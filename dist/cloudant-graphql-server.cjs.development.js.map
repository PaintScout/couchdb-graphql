{"version":3,"file":"cloudant-graphql-server.cjs.development.js","sources":["../src/util/createResolver.ts","../src/graphql/queries/get.ts","../src/graphql/queries/changes.ts","../src/graphql/queries/bulkGet.ts","../src/graphql/queries/info.ts","../src/graphql/queries/search.ts","../src/graphql/queries/find.ts","../src/graphql/queries/query.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/graphql/mutations/put.ts","../src/graphql/mutations/bulkDocs.ts","../src/createServer.ts"],"sourcesContent":["import { GraphQLResolverMap } from '@apollographql/apollo-tools'\n\nexport default function createResolver(\n  resolver: GraphQLResolverMap<{ dbName: string; dbUrl: string }>\n) {\n  return resolver\n}\n","import { gql } from 'apollo-server'\nimport axios from 'axios'\nimport queryString from 'query-string'\nimport createResolver from '../../util/createResolver'\n\n/**\n * Generic GET on a document\n */\nexport const typeDefs = gql`\n  type GetResponse {\n    _id: String!\n    _rev: String\n    document: JSON\n  }\n\n  extend type Query {\n    get(\n      id: String!\n      rev: String\n      revs: Boolean\n      revs_info: Boolean\n      open_revs: Boolean\n      conflicts: Boolean\n      attachments: Boolean\n      latest: Boolean\n    ): GetResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    get: async (parent, { id, ...args }, context, info) => {\n      const hasArgs = Object.keys(args).length > 0\n      let url = `${context.dbUrl}/${id}`\n\n      if (hasArgs) {\n        url += `?${queryString.stringify(args)}`\n      }\n\n      const response = await axios.get(url)\n\n      return {\n        _id: response.data._id,\n        _rev: response.data._rev,\n        document: response.data,\n      }\n    },\n  },\n})\n","import { gql } from 'apollo-server'\nimport axios from 'axios'\nimport queryString from 'query-string'\nimport createResolver from '../../util/createResolver'\n\nexport const typeDefs = gql`\n  type Change {\n    rev: String\n  }\n  type ChangesResult {\n    changes: [Change]\n    id: String\n    seq: JSON\n    doc: JSON\n    deleted: Boolean\n  }\n\n  type ChangesResponse {\n    last_seq: JSON\n    pending: Int\n    results: [ChangesResult]\n  }\n\n  extend type Query {\n    changes(\n      doc_ids: [String!]\n      conflicts: Boolean\n      descending: Boolean\n      feed: String\n      filter: String\n      heartbeat: Int\n      include_docs: Boolean\n      attachments: Boolean\n      att_encoding_info: Boolean\n      lastEventId: Int\n      limit: Int\n      since: String\n      timeout: Int\n      view: String\n      seq_interval: Int\n    ): ChangesResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    changes: async (parent, args, context, info) => {\n      const hasArgs = Object.keys(args).length > 0\n      let url = `${context.dbUrl}/_changes`\n\n      if (hasArgs) {\n        if (args.lastEventId) {\n          delete args.lastEventId\n          args['last-event-id'] = args.lastEventId\n        }\n\n        // if args.since is not 'now', convert to number\n        if (args.since) {\n          if (args.since !== 'now') {\n            args.since = parseInt(args.since)\n          }\n        }\n\n        url += `?${queryString.stringify(args)}`\n      }\n\n      const response = await axios.get(url)\n\n      return response.data\n    },\n  },\n})\n","import { gql } from 'apollo-server'\nimport axios from 'axios'\nimport queryString from 'query-string'\nimport createResolver from '../../util/createResolver'\n\n/**\n * Generic GET on a document\n */\nexport const typeDefs = gql`\n  input BulkGetInput {\n    id: String!\n    rev: String\n  }\n\n  type BulkGetResponse {\n    results: [BulkGetResult]\n  }\n\n  type BulkGetResult {\n    id: String\n    docs: [BulkGetDocs!]!\n  }\n\n  type BulkGetDocs {\n    ok: JSON\n    error: BulkGetError\n  }\n\n  type BulkGetError {\n    id: String\n    rev: String\n    error: String\n    reason: String\n  }\n\n  extend type Query {\n    bulkGet(docs: [BulkGetInput!]!, revs: Boolean): BulkGetResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    bulkGet: async (parent, { docs, revs }, context, info) => {\n      let url = `${context.dbUrl}/_bulk_get`\n\n      if (revs) {\n        url += `?${queryString.stringify({ revs })}`\n      }\n\n      const response = await axios.post(url, {\n        docs,\n        revs,\n      })\n\n      return response.data\n    },\n  },\n})\n","import { gql } from 'apollo-server'\nimport axios from 'axios'\nimport createResolver from '../../util/createResolver'\n\n/**\n * Generic GET on a document\n */\nexport const typeDefs = gql`\n  type Sizes {\n    file: Int\n    external: Int\n    active: Int\n  }\n\n  type Other {\n    data_size: Int\n  }\n\n  type Cluster {\n    q: Int\n    n: Int\n    w: Int\n    r: Int\n  }\n\n  type InfoResponse {\n    db_name: String\n    update_seq: String\n    sizes: Sizes\n    purge_seq: Int\n    other: Other\n    doc_del_count: Int\n    doc_count: Int\n    disk_size: Int\n    disk_format_version: Int\n    data_size: Int\n    compact_running: Boolean\n    cluster: Cluster\n    instance_start_time: Int\n  }\n\n  extend type Query {\n    info: InfoResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    info: async (parent, args, context, info) => {\n      let url = `${context.dbUrl}`\n\n      const response = await axios.get(url)\n\n      return response.data\n    },\n  },\n})\n","import { gql } from 'apollo-server'\nimport axios from 'axios'\nimport queryString from 'query-string'\nimport createResolver from '../../util/createResolver'\n\nexport const typeDefs = gql`\n  type SearchResponse {\n    total_rows: Int\n    bookmark: String\n    rows: [SearchRow]\n    counts: JSON\n  }\n\n  type SearchRow {\n    id: String\n    order: [Int]\n    fields: JSON\n  }\n\n  extend type Query {\n    search(\n      index: String!\n      ddoc: String!\n      bookmark: String\n      counts: [String!]\n      drilldown: JSON\n      group_field: String\n      group_limit: Int\n      group_sort: JSON\n      highlight_fields: [String!]\n      highlight_pre_tag: String\n      highlight_post_tag: String\n      highlight_number: Int\n      highlight_size: Int\n      include_docs: Boolean\n      include_fields: [String]\n      limit: Int\n      query: String!\n      ranges: JSON\n      sort: String\n      stale: String\n    ): SearchResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    search: async (\n      parent,\n      { index, ddoc, typename, ...args },\n      context,\n      info\n    ) => {\n      let url = `${context.dbUrl}/_design/${ddoc}/_search/${index}`\n\n      const hasArgs = Object.keys(args).length > 0\n      if (hasArgs) {\n        url += `?${queryString.stringify(args)}`\n      }\n\n      const response = await axios.get(url)\n\n      return response.data\n    },\n  },\n})\n","import { gql } from 'apollo-server'\nimport axios from 'axios'\nimport queryString from 'query-string'\nimport createResolver from '../../util/createResolver'\n\nexport const typeDefs = gql`\n  type FindResponse {\n    execution_stats: JSON\n    bookmark: String\n    warning: String\n    docs: [JSON!]\n  }\n\n  type FindRow {\n    id: String\n    order: [Int!]\n    fields: JSON\n  }\n\n  extend type Query {\n    find(\n      selector: JSON!\n      limit: Int\n      skip: Int\n      sort: Int\n      fields: [String!]\n      use_index: [String!]\n      r: Int\n      bookmark: String\n      update: Boolean\n      stable: Boolean\n      stale: String\n      execution_stats: Boolean\n    ): FindResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    find: async (parent, { index, ddoc, ...args }, context, info) => {\n      let url = `${context.dbUrl}/_find`\n\n      const response = await axios.post(url, args)\n\n      return response.data\n    },\n  },\n})\n","import { gql } from 'apollo-server'\nimport axios from 'axios'\nimport queryString from 'query-string'\nimport createResolver from '../../util/createResolver'\n\nexport const typeDefs = gql`\n  type QueryResponse {\n    offset: Int\n    update_seq: JSON\n    total_rows: Int\n    rows: [QueryRow!]\n  }\n\n  type QueryRow {\n    id: String\n    key: JSON\n    value: JSON\n  }\n\n  extend type Query {\n    query(\n      ddoc: String!\n      view: String!\n      conflicts: Boolean\n      descending: Boolean\n      endkey: JSON\n      group: Boolean\n      group_level: Int\n      include_docs: Boolean\n      attachments: Boolean\n      att_encoding_info: Boolean\n      inclusive_end: Boolean\n      key: JSON\n      keys: [JSON!]\n      limit: Int\n      reduce: Boolean\n      skip: Int\n      sorted: Boolean\n      stable: Boolean\n      stale: String\n      startkey: JSON\n      update: String\n      update_seq: Boolean\n    ): QueryResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    query: async (parent, { view, ddoc, ...args }, context, info) => {\n      let url = `${context.dbUrl}/_design/${ddoc}/_view/${view}`\n\n      const hasArgs = Object.keys(args).length > 0\n      if (hasArgs) {\n        url += `?${queryString.stringify(args)}`\n      }\n\n      const response = await axios.get(url)\n\n      return response.data\n    },\n  },\n})\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && !check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { gql } from 'apollo-server'\nimport axios from 'axios'\nimport queryString from 'query-string'\n\n/**\n * PUTs a document using _bulk_docs endpoint\n */\nexport const typeDefs = gql`\n  type PutResponse {\n    _id: String!\n    _rev: String\n    document: JSON\n  }\n\n  extend type Mutation {\n    put(input: JSON, upsert: Boolean, new_edits: Boolean): PutResponse\n  }\n`\n\nexport const resolvers = {\n  Mutation: {\n    put: async (parent, { input, upsert, new_edits }, context, info) => {\n      let url = `${context.dbUrl}/_bulk_docs`\n      let rev = input._rev\n\n      // get previous _rev for upsert\n      if (upsert) {\n        if (!input._id) {\n          throw Error('upsert option requires input to contain _id')\n        }\n\n        try {\n          const {\n            data: { _rev },\n          } = await axios.get(`${context.dbUrl}/${input._id}`)\n          rev = _rev\n        } catch (e) {\n          if (e.status !== 404) {\n            throw e\n          }\n        }\n      }\n\n      const response = await axios.post(url, {\n        docs: [{ ...input, _rev: rev }],\n        new_edits,\n      })\n\n      const [result] = response.data\n\n      if (result.error) {\n        console.error(result.error + ': ' + result.reason)\n        throw new Error(result.reason)\n      }\n\n      return {\n        _id: result.id,\n        _rev: result.rev,\n        document: {\n          ...input,\n          _id: result.id,\n          _rev: result.rev,\n        },\n      }\n    },\n  },\n}\n","import { gql } from 'apollo-server'\nimport axios from 'axios'\n\nexport const typeDefs = gql`\n  type BulkDocsResponseObject {\n    _id: String\n    _rev: String\n    document: JSON\n    error: String\n    reason: String\n  }\n\n  extend type Mutation {\n    bulkDocs(\n      input: [JSON!]!\n      upsert: Boolean\n      new_edits: Boolean\n    ): [BulkDocsResponseObject]\n  }\n`\n\nexport const resolvers = {\n  Mutation: {\n    bulkDocs: async (parent, { input, upsert, new_edits }, context, info) => {\n      let url = `${context.dbUrl}/_bulk_docs`\n      let previousRevs: Record<string, string> = {}\n\n      // get previous _revs for upsert\n      if (upsert) {\n        const ids: string[] = input.map(i => i._id).filter(id => !!id)\n\n        const { data: allDocs } = await axios.post(\n          `${context.dbUrl}/_all_docs`,\n          {\n            keys: ids,\n          }\n        )\n\n        allDocs.rows.forEach(row => {\n          previousRevs[row.id] = row.value.rev\n        })\n      }\n\n      const response = await axios.post(url, {\n        docs: input.map(i => ({\n          ...i,\n          _rev: upsert && i._id ? previousRevs[i._id] : i._rev,\n        })),\n        new_edits,\n      })\n\n      const results = response.data\n\n      return results.map((result, index) => {\n        const document = input[index]\n\n        const _rev = result.error\n          ? // if an error, return the last _rev\n            previousRevs[document._id] || document._rev\n          : // otherwise result.rev will be populated\n            result.rev\n\n        return {\n          _id: result.id,\n          _rev,\n          error: result.error,\n          reason: result.reason,\n          document: {\n            ...document,\n            _id: result.id,\n            _rev,\n          },\n        }\n      })\n    },\n  },\n}\n","require('dotenv').config()\n\nimport { ApolloServer, gql, GraphQLSchemaModule } from 'apollo-server'\n\nimport { buildFederatedSchema } from '@apollo/federation'\n\nimport * as queries from './graphql/queries'\nimport * as mutations from './graphql/mutations'\nimport {\n  ContextFunction,\n  Context,\n  AuthenticationError,\n} from 'apollo-server-core'\nimport { ExpressContext } from 'apollo-server-express/dist/ApolloServer'\n\nexport interface CreateServerOptions {\n  dbUrl: string\n  setContext?: ContextFunction<ExpressContext, Context>\n  schemas?: GraphQLSchemaModule[]\n}\n\nexport function createServer({\n  dbUrl,\n  setContext,\n  schemas = [],\n}: CreateServerOptions) {\n  const base = gql`\n    scalar JSON\n  `\n\n  if (!dbUrl) {\n    console.warn('Cannot find dbUrl - did you pass it into createServer()?')\n  }\n\n  const server = new ApolloServer({\n    schema: buildFederatedSchema([\n      { typeDefs: base },\n      ...Object.keys(queries).map(key => queries[key]),\n      ...Object.keys(mutations).map(key => mutations[key]),\n      ...schemas,\n    ] as any),\n    context: async args => {\n      const { req } = args\n      let context: any = {}\n\n      if (setContext) {\n        context = await setContext(args)\n      }\n\n      if (!context.dbName) {\n        throw new Error('dbName is required to exist in context')\n      }\n\n      return {\n        dbUrl: `${context.dbUrl || dbUrl}/${context.dbName}`,\n        ...context,\n      }\n    },\n  })\n\n  return server\n}\n"],"names":["createResolver","resolver","typeDefs","gql","resolvers","Query","get","parent","context","info","id","args","hasArgs","Object","keys","length","url","dbUrl","queryString","stringify","axios","response","_id","data","_rev","document","_templateObject","changes","lastEventId","since","parseInt","bulkGet","docs","revs","post","search","index","ddoc","typename","find","query","view","_iteratorSymbol","Symbol","iterator","_asyncIteratorSymbol","asyncIterator","_catch","body","recover","result","e","then","Mutation","put","input","upsert","new_edits","rev","error","console","reason","Error","status","bulkDocs","map","i","previousRevs","results","ids","filter","allDocs","rows","forEach","row","value","require","config","createServer","setContext","schemas","base","warn","server","ApolloServer","schema","buildFederatedSchema","queries","key","mutations","dbName","req"],"mappings":"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"}