"use strict";function n(n){return n&&"object"==typeof n&&"default"in n?n.default:n}var e=require("apollo-server-core"),t=n(require("axios")),r=n(require("qs")),o=require("@apollo/federation");function i(){return(i=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n}).apply(this,arguments)}function s(n,e){if(null==n)return{};var t,r,o={},i=Object.keys(n);for(r=0;r<i.length;r++)e.indexOf(t=i[r])>=0||(o[t]=n[t]);return o}function u(n,e){return e||(e=n.slice(0)),n.raw=e,n}function c(){var n=u(["\n    scalar JSON\n  "]);return c=function(){return n},n}var a={typeDefs:e.gql(c())};function l(n){return n}function d(n){return t.create({headers:n.dbHeaders})}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));var f=function(n,e){try{return e.onResolveConflict?Promise.resolve(v(n,e)).then((function(n){return Promise.resolve(Promise.all(Object.keys(n).map((function(t){try{return Promise.resolve(e.onResolveConflict({document:n[t].document,conflicts:n[t].conflicts,context:e})).then((function(e){return i({},s(e,["_conflicts"]),{_rev:n[t].revToSave})}))}catch(n){return Promise.reject(n)}})))).then((function(t){var r=[].concat(t,Object.keys(n).reduce((function(e,t){return[].concat(e,n[t].conflicts.map((function(n){return i({},n,{_deleted:!0})})).filter((function(e){return e._rev!==n[t].revToSave})))}),[]));return Promise.resolve(d(e).post(e.dbUrl+"/"+e.dbName+"/_bulk_docs",{docs:r})).then((function(n){return e.onConflictsResolved&&e.onConflictsResolved({documents:n.data.filter((function(n){return n.ok})).map((function(n){return i({},r.find((function(e){return e._id===n.id})),{_rev:n.rev,_id:n.id})})),context:e}),n.data}))}))})):Promise.resolve(null)}catch(n){return Promise.reject(n)}},v=function(n,e){try{return Promise.resolve(d(e).post(e.dbUrl+"/"+e.dbName+"/_all_docs?conflicts=true&include_docs=true",{keys:n.map((function(n){return n._id}))}).then((function(n){return n.data.rows.map((function(n){return n.doc}))}))).then((function(t){return Promise.resolve(d(e).post(e.dbUrl+"/"+e.dbName+"/_bulk_get",{docs:t.reduce((function(n,e){return[].concat(n,(e._conflicts||[]).map((function(n){return{id:e._id,rev:n}})))}),[])}).then((function(n){return n.data.results.map((function(n){return n.docs[0].ok})).filter((function(n){return!!n}))}))).then((function(e){return t.reduce((function(r,o){if(!r[o._id]){var s=t.find((function(n){return n._id===o._id}));r[o._id]={document:n.find((function(n){return n._id===o._id})),conflicts:[o],revToSave:s._rev}}var u,c=e.filter((function(n){return n._id===o._id}));return c?i({},r,((u={})[o._id]=i({},r[o._id],{conflicts:[].concat(r[o._id].conflicts,c)}),u)):r}),{})}))}))}catch(n){return Promise.reject(n)}},_=function(n,e,t){void 0===t&&(t={});try{var r=function(t){return o?t:Promise.resolve(d(n).post(a,{docs:[i({},e,{_rev:l})],new_edits:c}).then((function(t){try{var r=!1,o=t.data[0],i=function(){if(o&&o.id&&"conflict"===o.error)return Promise.resolve(f([e],n)).then((function(n){return r=!0,n[0]}))}();return Promise.resolve(i&&i.then?i.then((function(n){return r?n:o})):r?i:o)}catch(n){return Promise.reject(n)}}))).then((function(t){if(t&&t.error)throw new Error(t.reason);if(t){var r=i({},e,{_id:t.id,_rev:t.rev});return n.onDocumentsSaved&&n.onDocumentsSaved({documents:[r],context:n}),r}return null}))},o=!1,s=t.upsert,u=t.new_edits,c=void 0===u||u,a=n.dbUrl+"/"+n.dbName+"/_bulk_docs",l=e._rev,v=function(){if(s){if(!e._id)throw Error("upsert option requires input to contain _id");return function(t,r){try{var o=Promise.resolve(d(n).get(n.dbUrl+"/"+n.dbName+"/"+encodeURIComponent(e._id))).then((function(n){l=n.data._rev}))}catch(n){return r(n)}return o&&o.then?o.then(void 0,r):o}(0,(function(n){if(!n.response||404!==n.response.status)throw n}))}}();return Promise.resolve(v&&v.then?v.then(r):r(v))}catch(n){return Promise.reject(n)}};function p(){var n=u(["\n  type PutResponse {\n    _id: String!\n    _rev: String\n    document: JSON\n  }\n\n  extend type Mutation {\n    put(input: JSON, upsert: Boolean, new_edits: Boolean): PutResponse\n  }\n"]);return p=function(){return n},n}var y=function(n,e,t){void 0===t&&(t={});try{var r=function(){return Promise.resolve(d(n).post(c,{docs:e.map((function(n){return i({},n,{_rev:o&&n._id?a[n._id]:n._rev})})),new_edits:u}).then((function(t){try{var r=function(n){return o?n:t.data},o=!1,i=t.data.filter((function(n){return"conflict"===n.error})),s=function(){if(i.length>0)return Promise.resolve(f(e.filter((function(n){return i.find((function(e){return e.id===n._id}))})),n)).then((function(n){if(n)return o=!0,t.data.map((function(e){var t=n.find((function(n){return n.id===e.id}));return"conflict"===e.error&&t?t:e}))}))}();return Promise.resolve(s&&s.then?s.then(r):r(s))}catch(n){return Promise.reject(n)}}))).then((function(t){var r=t.map((function(n,t){var r=e[t],o=n.error?a[r._id]||r._rev:n.rev;return{_id:n.id,_rev:o,error:n.error,reason:n.reason,document:i({},r,{_id:n.id,_rev:o})}}));return n.onDocumentsSaved&&n.onDocumentsSaved({documents:r.filter((function(n){return!n.error})).map((function(n){return n.document})),context:n}),r}))},o=t.upsert,s=t.new_edits,u=void 0===s||s,c=n.dbUrl+"/"+n.dbName+"/_bulk_docs",a={},l=function(){if(o){var t=e.map((function(n){return n._id})).filter((function(n){return!!n}));return Promise.resolve(d(n).post(n.dbUrl+"/"+n.dbName+"/_all_docs",{keys:t})).then((function(n){n.data.rows.forEach((function(n){a[n.id]=n.value?n.value.rev:null}))}))}}();return Promise.resolve(l&&l.then?l.then(r):r())}catch(n){return Promise.reject(n)}};function m(){var n=u(["\n  type BulkDocsResponseObject {\n    _id: String\n    _rev: String\n    document: JSON\n    error: String\n    reason: String\n  }\n\n  extend type Mutation {\n    bulkDocs(\n      input: [JSON!]!\n      upsert: Boolean\n      new_edits: Boolean\n    ): [BulkDocsResponseObject]\n  }\n"]);return m=function(){return n},n}var g={__proto__:null,put:{__proto__:null,typeDefs:e.gql(p()),resolvers:l({Mutation:{put:function(n,e,t,r){var o=e.input,i=e.upsert,s=e.new_edits,u=void 0===s||s;try{return Promise.resolve(_(t,o,{upsert:i,new_edits:u})).then((function(n){return{_id:n._id,_rev:n._rev,document:n}}))}catch(n){return Promise.reject(n)}}}})},bulkDocs:{__proto__:null,typeDefs:e.gql(m()),resolvers:l({Mutation:{bulkDocs:function(n,e,t,r){var o=e.input,i=e.upsert,s=e.new_edits,u=void 0===s||s;try{return Promise.resolve(y(t,o,{upsert:i,new_edits:u}))}catch(n){return Promise.reject(n)}}}})}},h=function(n,e){var t=void 0===e?{}:e,o=t.keys,i=t.key,u=t.endkey,c=t.startkey,a=s(t,["keys","key","endkey","startkey"]);try{var l=n.dbUrl+"/"+n.dbName+"/_all_docs";return a&&(l+="?"+r.stringify(a)),Promise.resolve(d(n).post(l,{keys:o,key:i,endkey:u,startkey:c})).then((function(n){return n.data}))}catch(n){return Promise.reject(n)}};function S(){var n=u(["\n  type AllDocsRow {\n    id: String!\n    rev: String\n    value: JSON\n    doc: JSON\n  }\n\n  type AllDocsResponse {\n    total_rows: Int!\n    offset: Int!\n    rows: [AllDocsRow!]!\n  }\n\n  extend type Query {\n    allDocs(\n      conflicts: Boolean\n      endkey: JSON\n      include_docs: Boolean\n      inclusive_end: Boolean\n      key: JSON\n      keys: [JSON!]\n      limit: Int\n      skip: Int\n      startkey: JSON\n      update_seq: Boolean\n    ): AllDocsResponse\n  }\n"]);return S=function(){return n},n}var b={__proto__:null,typeDefs:e.gql(S()),resolvers:l({Query:{allDocs:function(n,e,t,r){try{return Promise.resolve(h(t,e))}catch(n){return Promise.reject(n)}}}})},k=function(n,e,t){var o=t.revs;try{var i=e.dbUrl+"/"+e.dbName+"/_bulk_get";return o&&(i+="?"+r.stringify({revs:o})),Promise.resolve(d(e).post(i,{docs:n,revs:o})).then((function(n){return n.data}))}catch(n){return Promise.reject(n)}};function P(){var n=u(["\n  input BulkGetInput {\n    id: String!\n    rev: String\n  }\n\n  type BulkGetResponse {\n    results: [BulkGetResult!]!\n  }\n\n  type BulkGetResult {\n    id: String\n    docs: [BulkGetDocs!]!\n  }\n\n  type BulkGetDocs {\n    ok: JSON\n    error: BulkGetError\n  }\n\n  type BulkGetError {\n    id: String\n    rev: String\n    error: String\n    reason: String\n  }\n\n  extend type Query {\n    bulkGet(docs: [BulkGetInput!]!, revs: Boolean): BulkGetResponse\n  }\n"]);return P=function(){return n},n}var I={__proto__:null,typeDefs:e.gql(P()),resolvers:l({Query:{bulkGet:function(n,e,t,r){var o=e.docs,i=e.revs;try{return Promise.resolve(k(o,t,{revs:i}))}catch(n){return Promise.reject(n)}}}})},B=function(n,e){try{var t=Object.keys(e).length>0,o=n.dbUrl+"/"+n.dbName+"/_changes";return t&&(e.lastEventId&&(delete e.lastEventId,e["last-event-id"]=e.lastEventId),e.since&&"now"!==e.since&&(e.since=parseInt(e.since)),o+="?"+r.stringify(e)),Promise.resolve(d(n).get(o)).then((function(n){return n.data}))}catch(n){return Promise.reject(n)}};function O(){var n=u(["\n  type Change {\n    rev: String\n  }\n  type ChangesResult {\n    changes: [Change]\n    id: String\n    seq: JSON\n    doc: JSON\n    deleted: Boolean\n  }\n\n  type ChangesResponse {\n    last_seq: JSON\n    pending: Int\n    results: [ChangesResult]\n  }\n\n  extend type Query {\n    changes(\n      doc_ids: [String!]\n      conflicts: Boolean\n      descending: Boolean\n      feed: String\n      filter: String\n      heartbeat: Int\n      include_docs: Boolean\n      attachments: Boolean\n      att_encoding_info: Boolean\n      lastEventId: Int\n      limit: Int\n      since: String\n      timeout: Int\n      view: String\n      seq_interval: Int\n    ): ChangesResponse\n  }\n"]);return O=function(){return n},n}var N={__proto__:null,typeDefs:e.gql(O()),resolvers:l({Query:{changes:function(n,e,t,r){try{return Promise.resolve(B(t,e))}catch(n){return Promise.reject(n)}}}})},w=function(n,e){try{var t=n.dbUrl+"/"+n.dbName+"/_find";return Promise.resolve(d(n).post(t,e)).then((function(n){return n.data}))}catch(n){return Promise.reject(n)}},x=function(n,e,t){void 0===t&&(t={});try{var o=Object.keys(t).length>0,i=n.dbUrl+"/"+n.dbName+"/"+encodeURIComponent(e);return o&&(i+="?"+r.stringify(t)),Promise.resolve(d(n).get(i)).then((function(n){return n.data}))}catch(n){return Promise.reject(n)}},j=function(n){try{var e=""+n.dbUrl;return Promise.resolve(d(n).get(e)).then((function(n){return n.data}))}catch(n){return Promise.reject(n)}},R=function(n,e){var t=e.view,o=e.ddoc,i=s(e,["view","ddoc"]);try{var u=n.dbUrl+"/"+n.dbName+"/_design/"+o+"/_view/"+t;return Object.keys(i).length>0&&(u+="?"+r.stringify(i)),Promise.resolve(d(n).get(u)).then((function(n){return n.data}))}catch(n){return Promise.reject(n)}},q=function(n,e){var t=e.index,r=e.ddoc,o=s(e,["index","ddoc"]);try{var i=n.dbUrl+"/"+n.dbName+"/_design/"+r+"/_search/"+t;return Promise.resolve(d(n).post(i,o)).then((function(n){return n.data}))}catch(n){return Promise.reject(n)}};function D(){var n=u(["\n  type FindResponse {\n    execution_stats: JSON\n    bookmark: String\n    warning: String\n    docs: [JSON!]\n  }\n\n  extend type Query {\n    find(\n      selector: JSON!\n      limit: Int\n      skip: Int\n      sort: Int\n      fields: [String!]\n      use_index: [String!]\n      r: Int\n      bookmark: String\n      update: Boolean\n      stable: Boolean\n      stale: String\n      execution_stats: Boolean\n    ): FindResponse\n  }\n"]);return D=function(){return n},n}var J={__proto__:null,typeDefs:e.gql(D()),resolvers:l({Query:{find:function(n,e,t,r){try{return Promise.resolve(w(t,e))}catch(n){return Promise.reject(n)}}}})};function Q(){var n=u(["\n  type GetResponse {\n    _id: String!\n    _rev: String\n    document: JSON\n  }\n\n  extend type Query {\n    get(\n      id: String!\n      rev: String\n      revs: Boolean\n      revs_info: Boolean\n      open_revs: Boolean\n      conflicts: Boolean\n      attachments: Boolean\n      latest: Boolean\n    ): GetResponse\n  }\n"]);return Q=function(){return n},n}var U={__proto__:null,typeDefs:e.gql(Q()),resolvers:l({Query:{get:function(n,e,t,r){var o=e.id,i=s(e,["id"]);try{return Promise.resolve(x(t,o,i)).then((function(n){return{_id:n._id,_rev:n._rev,document:n}}))}catch(n){return Promise.reject(n)}}}})};function G(){var n=u(["\n  type Sizes {\n    file: Int\n    external: Int\n    active: Int\n  }\n\n  type Other {\n    data_size: Int\n  }\n\n  type Cluster {\n    q: Int\n    n: Int\n    w: Int\n    r: Int\n  }\n\n  type InfoResponse {\n    db_name: String\n    update_seq: String\n    sizes: Sizes\n    purge_seq: Int\n    other: Other\n    doc_del_count: Int\n    doc_count: Int\n    disk_size: Int\n    disk_format_version: Int\n    data_size: Int\n    compact_running: Boolean\n    cluster: Cluster\n    instance_start_time: Int\n  }\n\n  extend type Query {\n    info: InfoResponse\n  }\n"]);return G=function(){return n},n}var C={__proto__:null,typeDefs:e.gql(G()),resolvers:l({Query:{info:function(n,e,t){try{return Promise.resolve(j(t))}catch(n){return Promise.reject(n)}}}})};function E(){var n=u(["\n  type QueryResponse {\n    offset: Int\n    update_seq: JSON\n    total_rows: Int\n    rows: [QueryRow!]\n  }\n\n  type QueryRow {\n    id: String\n    key: JSON\n    value: JSON\n  }\n\n  extend type Query {\n    query(\n      ddoc: String!\n      view: String!\n      conflicts: Boolean\n      descending: Boolean\n      endkey: JSON\n      group: Boolean\n      group_level: Int\n      include_docs: Boolean\n      attachments: Boolean\n      att_encoding_info: Boolean\n      inclusive_end: Boolean\n      key: JSON\n      keys: [JSON!]\n      limit: Int\n      reduce: Boolean\n      skip: Int\n      sorted: Boolean\n      stable: Boolean\n      stale: String\n      startkey: JSON\n      update: String\n      update_seq: Boolean\n    ): QueryResponse\n  }\n"]);return E=function(){return n},n}var z={__proto__:null,typeDefs:e.gql(E()),resolvers:l({Query:{query:function(n,e,t,r){try{return Promise.resolve(R(t,e))}catch(n){return Promise.reject(n)}}}})};function A(){var n=u(["\n  type SearchResponse {\n    total_rows: Int\n    bookmark: String\n    rows: [SearchRow]\n    counts: JSON\n  }\n\n  type SearchRow {\n    id: String\n    order: [Int]\n    fields: JSON\n  }\n\n  extend type Query {\n    search(\n      index: String!\n      ddoc: String!\n      bookmark: String\n      counts: [String!]\n      drilldown: JSON\n      group_field: String\n      group_limit: Int\n      group_sort: JSON\n      highlight_fields: [String!]\n      highlight_pre_tag: String\n      highlight_post_tag: String\n      highlight_number: Int\n      highlight_size: Int\n      include_docs: Boolean\n      include_fields: [String!]\n      limit: Int\n      query: String!\n      ranges: JSON\n      sort: [String!]\n      stale: String\n    ): SearchResponse\n  }\n"]);return A=function(){return n},n}var M={__proto__:null,get:U,info:C,bulkGet:I,changes:N,search:{__proto__:null,typeDefs:e.gql(A()),resolvers:l({Query:{search:function(n,e,t,r){try{return Promise.resolve(q(t,e))}catch(n){return Promise.reject(n)}}}})},find:J,query:z,allDocs:b};exports.allDocs=h,exports.base=a,exports.bulkDocs=y,exports.bulkGet=k,exports.changes=B,exports.createResolver=l,exports.createSchema=function(n){var e=void 0===n?{}:n,t=e.schemas,r=void 0===t?[]:t,i=e.cloudant,u=void 0===i||i,c=s(M,["search"]);return o.buildFederatedSchema([a].concat(Object.keys(u?M:c).map((function(n){return M[n]})),Object.keys(g).map((function(n){return g[n]})),r))},exports.find=w,exports.get=x,exports.info=j,exports.mutations=g,exports.put=_,exports.queries=M,exports.query=R,exports.resolveConflicts=f,exports.search=q;
//# sourceMappingURL=couchdb-graphql.cjs.production.min.js.map
