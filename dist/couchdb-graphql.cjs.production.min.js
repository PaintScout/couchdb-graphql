"use strict";function n(n){return n&&"object"==typeof n&&"default"in n?n.default:n}var e=require("apollo-server-core"),t=n(require("axios")),r=n(require("qs")),o=require("@apollo/federation");function i(){return(i=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n}).apply(this,arguments)}function s(n,e){if(null==n)return{};var t,r,o={},i=Object.keys(n);for(r=0;r<i.length;r++)e.indexOf(t=i[r])>=0||(o[t]=n[t]);return o}function u(n,e){return e||(e=n.slice(0)),n.raw=e,n}function c(){var n=u(["\n    scalar JSON\n  "]);return c=function(){return n},n}var a={typeDefs:e.gql(c())};function l(n){return t.create({headers:n.dbHeaders})}function d(n){return n}function f(){var n=u(["\n  type PutResponse {\n    _id: String!\n    _rev: String\n    document: JSON\n  }\n\n  extend type Mutation {\n    put(input: JSON, upsert: Boolean, new_edits: Boolean): PutResponse\n  }\n"]);return f=function(){return n},n}function _(){var n=u(["\n  type BulkDocsResponseObject {\n    _id: String\n    _rev: String\n    document: JSON\n    error: String\n    reason: String\n  }\n\n  extend type Mutation {\n    bulkDocs(\n      input: [JSON!]!\n      upsert: Boolean\n      new_edits: Boolean\n    ): [BulkDocsResponseObject]\n  }\n"]);return _=function(){return n},n}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));var p={__proto__:null,put:{__proto__:null,typeDefs:e.gql(f()),resolvers:d({Mutation:{put:function(n,e,t,r){var o=e.input,u=e.upsert,c=e.new_edits,a=void 0===c||c;try{var d=function(n){return f?n:Promise.resolve(l(t).post(_,{docs:[i({},o,{_rev:p})],new_edits:a})).then((function(n){var e=!1;function r(n){return e?n:u?{_id:u.id,_rev:u.rev,document:i({},o,{_id:u.id,_rev:u.rev})}:{}}var u=n.data[0],c=function(){if(u&&u.error)return function(){if("conflict"===u.error&&u.id&&t.onResolveConflict)return Promise.resolve(function(n,e){try{return Promise.resolve(function(n,e){try{return Promise.resolve(l(e).post(e.dbUrl+"/"+e.dbName+"/_all_docs?conflicts=true&include_docs=true",{keys:n.map((function(n){return n._id}))}).then((function(n){return n.data.rows.map((function(n){return n.doc}))}))).then((function(t){return Promise.resolve(l(e).post(e.dbUrl+"/"+e.dbName+"/_bulk_get",{docs:t.reduce((function(n,e){return[].concat(n,(e._conflicts||[]).map((function(n){return{id:e._id,rev:n}})))}),[])}).then((function(n){return n.data.results.map((function(n){return n.docs[0].ok})).filter((function(n){return!!n}))}))).then((function(e){return t.reduce((function(r,o){if(!r[o._id]){var s=t.find((function(n){return n._id===o._id}));r[o._id]={document:n.find((function(n){return n._id===o._id})),conflicts:[o],revToSave:s._rev}}var u,c=e.filter((function(n){return n._id===o._id}));return c?i({},r,((u={})[o._id]=i({},r[o._id],{conflicts:[].concat(r[o._id].conflicts,c)}),u)):r}),{})}))}))}catch(n){return Promise.reject(n)}}(n,e)).then((function(n){return conflictingDocuments=n,Promise.resolve(Promise.all(Object.keys(conflictingDocuments).map((function(n){try{return Promise.resolve(e.onResolveConflict({document:conflictingDocuments[n].document,conflicts:conflictingDocuments[n].conflicts,context:e})).then((function(e){return i({},s(e,["_conflicts"]),{_rev:conflictingDocuments[n].revToSave})}))}catch(n){return Promise.reject(n)}})))).then((function(n){var t=[].concat(n,Object.keys(conflictingDocuments).reduce((function(n,e){return[].concat(n,conflictingDocuments[e].conflicts.map((function(n){return i({},n,{_deleted:!0})})).filter((function(n){return n._rev!==conflictingDocuments[e].revToSave})))}),[]));return Promise.resolve(l(e).post(e.dbUrl+"/"+e.dbName+"/_bulk_docs",{docs:t})).then((function(n){return n.data}))}))}))}catch(n){return Promise.reject(n)}}([o],t)).then((function(n){if((u=n[0]).error)throw new Error(u.reason)}));throw new Error(u.reason)}()}();return c&&c.then?c.then(r):r(c)}))},f=!1,_=t.dbUrl+"/"+t.dbName+"/_bulk_docs",p=o._rev,v=function(){if(u){if(!o._id)throw Error("upsert option requires input to contain _id");return function(n,e){try{var r=Promise.resolve(l(t).get(t.dbUrl+"/"+t.dbName+"/"+encodeURIComponent(o._id))).then((function(n){p=n.data._rev}))}catch(n){return e(n)}return r&&r.then?r.then(void 0,e):r}(0,(function(n){if(!n.response||404!==n.response.status)throw n}))}}();return Promise.resolve(v&&v.then?v.then(d):d(v))}catch(n){return Promise.reject(n)}}}})},bulkDocs:{__proto__:null,typeDefs:e.gql(_()),resolvers:{Mutation:{bulkDocs:function(n,e,t,r){var o=e.input,s=e.upsert,u=e.new_edits;try{var c=function(){return Promise.resolve(l(t).post(a,{docs:o.map((function(n){return i({},n,{_rev:s&&n._id?d[n._id]:n._rev})})),new_edits:u})).then((function(n){return n.data.map((function(n,e){var t=o[e],r=n.error?d[t._id]||t._rev:n.rev;return{_id:n.id,_rev:r,error:n.error,reason:n.reason,document:i({},t,{_id:n.id,_rev:r})}}))}))},a=t.dbUrl+"/"+t.dbName+"/_bulk_docs",d={},f=function(){if(s){var n=o.map((function(n){return n._id})).filter((function(n){return!!n}));return Promise.resolve(l(t).post(t.dbUrl+"/"+t.dbName+"/_all_docs",{keys:n})).then((function(n){n.data.rows.forEach((function(n){d[n.id]=n.value?n.value.rev:null}))}))}}();return Promise.resolve(f&&f.then?f.then(c):c())}catch(n){return Promise.reject(n)}}}}}};function v(){var n=u(["\n  type AllDocsRow {\n    id: String!\n    rev: String\n    value: JSON\n    doc: JSON\n  }\n\n  type AllDocsResponse {\n    total_rows: Int!\n    offset: Int!\n    rows: [AllDocsRow!]!\n  }\n\n  extend type Query {\n    allDocs(\n      conflicts: Boolean\n      endkey: JSON\n      include_docs: Boolean\n      inclusive_end: Boolean\n      key: JSON\n      keys: [JSON!]\n      limit: Int\n      skip: Int\n      startkey: JSON\n      update_seq: Boolean\n    ): AllDocsResponse\n  }\n"]);return v=function(){return n},n}var g={__proto__:null,typeDefs:e.gql(v()),resolvers:d({Query:{allDocs:function(n,e,t,o){var i=e.keys,u=s(e,["keys"]);try{var c=t.dbUrl+"/"+t.dbName+"/_all_docs";return u&&(c+="?"+r.stringify(u)),Promise.resolve(l(t).post(c,{keys:i})).then((function(n){return n.data}))}catch(n){return Promise.reject(n)}}}})};function y(){var n=u(["\n  input BulkGetInput {\n    id: String!\n    rev: String\n  }\n\n  type BulkGetResponse {\n    results: [BulkGetResult!]!\n  }\n\n  type BulkGetResult {\n    id: String\n    docs: [BulkGetDocs!]!\n  }\n\n  type BulkGetDocs {\n    ok: JSON\n    error: BulkGetError\n  }\n\n  type BulkGetError {\n    id: String\n    rev: String\n    error: String\n    reason: String\n  }\n\n  extend type Query {\n    bulkGet(docs: [BulkGetInput!]!, revs: Boolean): BulkGetResponse\n  }\n"]);return y=function(){return n},n}var m={__proto__:null,typeDefs:e.gql(y()),resolvers:d({Query:{bulkGet:function(n,e,t,o){var i=e.docs,s=e.revs;try{var u=t.dbUrl+"/"+t.dbName+"/_bulk_get";return s&&(u+="?"+r.stringify({revs:s})),Promise.resolve(l(t).post(u,{docs:i,revs:s})).then((function(n){return n.data}))}catch(n){return Promise.reject(n)}}}})};function S(){var n=u(["\n  type Change {\n    rev: String\n  }\n  type ChangesResult {\n    changes: [Change]\n    id: String\n    seq: JSON\n    doc: JSON\n    deleted: Boolean\n  }\n\n  type ChangesResponse {\n    last_seq: JSON\n    pending: Int\n    results: [ChangesResult]\n  }\n\n  extend type Query {\n    changes(\n      doc_ids: [String!]\n      conflicts: Boolean\n      descending: Boolean\n      feed: String\n      filter: String\n      heartbeat: Int\n      include_docs: Boolean\n      attachments: Boolean\n      att_encoding_info: Boolean\n      lastEventId: Int\n      limit: Int\n      since: String\n      timeout: Int\n      view: String\n      seq_interval: Int\n    ): ChangesResponse\n  }\n"]);return S=function(){return n},n}var h={__proto__:null,typeDefs:e.gql(S()),resolvers:d({Query:{changes:function(n,e,t,o){try{var i=Object.keys(e).length>0,s=t.dbUrl+"/"+t.dbName+"/_changes";return i&&(e.lastEventId&&(delete e.lastEventId,e["last-event-id"]=e.lastEventId),e.since&&"now"!==e.since&&(e.since=parseInt(e.since)),s+="?"+r.stringify(e)),Promise.resolve(l(t).get(s)).then((function(n){return n.data}))}catch(n){return Promise.reject(n)}}}})};function b(){var n=u(["\n  type FindResponse {\n    execution_stats: JSON\n    bookmark: String\n    warning: String\n    docs: [JSON!]\n  }\n\n  type FindRow {\n    id: String\n    order: [Int!]\n    fields: JSON\n  }\n\n  extend type Query {\n    find(\n      selector: JSON!\n      limit: Int\n      skip: Int\n      sort: Int\n      fields: [String!]\n      use_index: [String!]\n      r: Int\n      bookmark: String\n      update: Boolean\n      stable: Boolean\n      stale: String\n      execution_stats: Boolean\n    ): FindResponse\n  }\n"]);return b=function(){return n},n}var k={__proto__:null,typeDefs:e.gql(b()),resolvers:d({Query:{find:function(n,e,t,r){var o=s(e,["index","ddoc"]);try{var i=t.dbUrl+"/"+t.dbName+"/_find";return Promise.resolve(l(t).post(i,o)).then((function(n){return n.data}))}catch(n){return Promise.reject(n)}}}})};function I(){var n=u(["\n  type GetResponse {\n    _id: String!\n    _rev: String\n    document: JSON\n  }\n\n  extend type Query {\n    get(\n      id: String!\n      rev: String\n      revs: Boolean\n      revs_info: Boolean\n      open_revs: Boolean\n      conflicts: Boolean\n      attachments: Boolean\n      latest: Boolean\n    ): GetResponse\n  }\n"]);return I=function(){return n},n}var B={__proto__:null,typeDefs:e.gql(I()),resolvers:d({Query:{get:function(n,e,t,o){var i=e.id,u=s(e,["id"]);try{var c=Object.keys(u).length>0,a=t.dbUrl+"/"+t.dbName+"/"+encodeURIComponent(i);return c&&(a+="?"+r.stringify(u)),Promise.resolve(l(t).get(a)).then((function(n){return{_id:n.data._id,_rev:n.data._rev,document:n.data}}))}catch(n){return Promise.reject(n)}}}})};function O(){var n=u(["\n  type Sizes {\n    file: Int\n    external: Int\n    active: Int\n  }\n\n  type Other {\n    data_size: Int\n  }\n\n  type Cluster {\n    q: Int\n    n: Int\n    w: Int\n    r: Int\n  }\n\n  type InfoResponse {\n    db_name: String\n    update_seq: String\n    sizes: Sizes\n    purge_seq: Int\n    other: Other\n    doc_del_count: Int\n    doc_count: Int\n    disk_size: Int\n    disk_format_version: Int\n    data_size: Int\n    compact_running: Boolean\n    cluster: Cluster\n    instance_start_time: Int\n  }\n\n  extend type Query {\n    info: InfoResponse\n  }\n"]);return O=function(){return n},n}var N={__proto__:null,typeDefs:e.gql(O()),resolvers:d({Query:{info:function(n,e,t,r){try{var o=""+t.dbUrl;return Promise.resolve(l(t).get(o)).then((function(n){return n.data}))}catch(n){return Promise.reject(n)}}}})};function w(){var n=u(["\n  type QueryResponse {\n    offset: Int\n    update_seq: JSON\n    total_rows: Int\n    rows: [QueryRow!]\n  }\n\n  type QueryRow {\n    id: String\n    key: JSON\n    value: JSON\n  }\n\n  extend type Query {\n    query(\n      ddoc: String!\n      view: String!\n      conflicts: Boolean\n      descending: Boolean\n      endkey: JSON\n      group: Boolean\n      group_level: Int\n      include_docs: Boolean\n      attachments: Boolean\n      att_encoding_info: Boolean\n      inclusive_end: Boolean\n      key: JSON\n      keys: [JSON!]\n      limit: Int\n      reduce: Boolean\n      skip: Int\n      sorted: Boolean\n      stable: Boolean\n      stale: String\n      startkey: JSON\n      update: String\n      update_seq: Boolean\n    ): QueryResponse\n  }\n"]);return w=function(){return n},n}var P={__proto__:null,typeDefs:e.gql(w()),resolvers:d({Query:{query:function(n,e,t,o){var i=e.view,u=e.ddoc,c=s(e,["view","ddoc"]);try{var a=t.dbUrl+"/"+t.dbName+"/_design/"+u+"/_view/"+i;return Object.keys(c).length>0&&(a+="?"+r.stringify(c)),Promise.resolve(l(t).get(a)).then((function(n){return n.data}))}catch(n){return Promise.reject(n)}}}})};function R(){var n=u(["\n  type SearchResponse {\n    total_rows: Int\n    bookmark: String\n    rows: [SearchRow]\n    counts: JSON\n  }\n\n  type SearchRow {\n    id: String\n    order: [Int]\n    fields: JSON\n  }\n\n  extend type Query {\n    search(\n      index: String!\n      ddoc: String!\n      bookmark: String\n      counts: [String!]\n      drilldown: JSON\n      group_field: String\n      group_limit: Int\n      group_sort: JSON\n      highlight_fields: [String!]\n      highlight_pre_tag: String\n      highlight_post_tag: String\n      highlight_number: Int\n      highlight_size: Int\n      include_docs: Boolean\n      include_fields: [String!]\n      limit: Int\n      query: String!\n      ranges: JSON\n      sort: [String!]\n      stale: String\n    ): SearchResponse\n  }\n"]);return R=function(){return n},n}var D={__proto__:null,get:B,info:N,bulkGet:m,changes:h,search:{__proto__:null,typeDefs:e.gql(R()),resolvers:d({Query:{search:function(n,e,t,r){var o=e.index,i=e.ddoc,u=s(e,["index","ddoc","typename"]);try{var c=t.dbUrl+"/"+t.dbName+"/_design/"+i+"/_search/"+o;return Promise.resolve(l(t).post(c,u)).then((function(n){return n.data}))}catch(n){return Promise.reject(n)}}}})},find:k,query:P,allDocs:g};exports.base=a,exports.createSchema=function(n){var e=void 0===n?{}:n,t=e.schemas,r=void 0===t?[]:t,i=e.cloudant,u=void 0===i||i,c=s(D,["search"]);return o.buildFederatedSchema([a].concat(Object.keys(u?D:c).map((function(n){return D[n]})),Object.keys(p).map((function(n){return p[n]})),r))},exports.mutations=p,exports.queries=D;
//# sourceMappingURL=couchdb-graphql.cjs.production.min.js.map
