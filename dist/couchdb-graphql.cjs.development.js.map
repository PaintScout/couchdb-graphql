{"version":3,"file":"couchdb-graphql.cjs.development.js","sources":["../src/graphql/base.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/util/getAxios.ts","../src/util/createResolver.ts","../src/util/resolveConflicts.ts","../src/graphql/mutations/put.ts","../src/graphql/mutations/bulkDocs.ts","../src/graphql/queries/allDocs.ts","../src/graphql/queries/bulkGet.ts","../src/graphql/queries/changes.ts","../src/graphql/queries/find.ts","../src/graphql/queries/get.ts","../src/graphql/queries/info.ts","../src/graphql/queries/query.ts","../src/graphql/queries/search.ts","../src/createSchema.ts"],"sourcesContent":["import { gql } from 'apollo-server-core'\n\nexport const base = {\n  typeDefs: gql`\n    scalar JSON\n  `,\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && !check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import axios from 'axios'\n\nexport default function getAxios(context: any) {\n  return axios.create({\n    headers: context.dbHeaders,\n  })\n}\n","import { GraphQLResolverMap } from '@apollographql/apollo-tools'\n\ninterface CouchDbDocument {\n  _id: string\n  _rev?: string\n}\n\nexport interface CouchDbContext {\n  dbUrl: string\n  dbName: string\n  onResolveConflict: <T extends CouchDbDocument>(args: {\n    document: T\n    conflicts: T[]\n    context: CouchDbContext\n  }) => T\n}\n\nexport default function createResolver(\n  resolver: GraphQLResolverMap<CouchDbContext>\n) {\n  return resolver\n}\n","import { CouchDbContext } from './createResolver'\nimport getAxios from './getAxios'\n\n/**\n * Resolves conflicts by calling context.onResolveConflict and saving its result\n */\nexport default async function resolveConflicts(\n  documents: any[],\n  context: CouchDbContext\n) {\n  const conflictingDocuments = await getConflictsByDocument(documents, context)\n\n  const resolvedDocs = await Promise.all(\n    Object.keys(conflictingDocuments).map(async id => {\n      const { _conflicts, ...resolved } = await context.onResolveConflict({\n        document: conflictingDocuments[id].document,\n        conflicts: conflictingDocuments[id].conflicts,\n        context,\n      })\n\n      return {\n        ...resolved,\n        _rev: conflictingDocuments[id].revToSave,\n      }\n    })\n  )\n\n  const docsToSave = [\n    ...resolvedDocs,\n\n    ...Object.keys(conflictingDocuments).reduce(\n      (deleted, docId) => [\n        ...deleted,\n        ...conflictingDocuments[docId].conflicts\n          .map(conflict => ({\n            ...conflict,\n            _deleted: true,\n          }))\n          .filter(\n            conflict => conflict._rev !== conflictingDocuments[docId].revToSave\n          ),\n      ],\n      [] as any[]\n    ),\n  ]\n\n  const response = await getAxios(context).post(\n    `${context.dbUrl}/${context.dbName}/_bulk_docs`,\n    {\n      docs: docsToSave,\n    }\n  )\n\n  return response.data\n}\n\n/**\n * Returns an object where the key is the doc id and the value is the rejected document\n * and full conflicting documents\n */\nasync function getConflictsByDocument(\n  documents: any[],\n  context: CouchDbContext\n): Promise<\n  Record<string, { document: any; conflicts: any[]; revToSave: string }>\n> {\n  // get _conflicts for each document\n  const documentsWithConflictRevs = await getAxios(context)\n    .post(\n      `${context.dbUrl}/${context.dbName}/_all_docs?conflicts=true&include_docs=true`,\n      {\n        keys: documents.map(doc => doc._id),\n      }\n    )\n    .then(res => res.data.rows.map(row => row.doc))\n\n  // get full document for each _conflict\n  const conflictingDocuments = await getAxios(context)\n    .post(`${context.dbUrl}/${context.dbName}/_bulk_get`, {\n      docs: documentsWithConflictRevs.reduce(\n        (conflicts, doc) => [\n          ...conflicts,\n          ...(doc._conflicts || []).map(rev => ({\n            id: doc._id,\n            rev,\n          })),\n        ],\n        []\n      ),\n    })\n    .then(res =>\n      res.data.results.map(row => row.docs[0].ok).filter(doc => !!doc)\n    )\n\n  return documentsWithConflictRevs.reduce((result, doc) => {\n    if (!result[doc._id]) {\n      const conflictedDoc = documentsWithConflictRevs.find(\n        d => d._id === doc._id\n      )\n\n      result[doc._id] = {\n        // the document rejected by the conflict\n        document: documents.find(original => original._id === doc._id),\n        // all conflicts in the db including the one with _conflicts\n        conflicts: [doc],\n        revToSave: conflictedDoc._rev,\n      }\n    }\n\n    // check if any _conflicts were for this document\n    const conflicts = conflictingDocuments.filter(d => d._id === doc._id)\n\n    if (conflicts) {\n      return {\n        ...result,\n        [doc._id]: {\n          ...result[doc._id],\n          conflicts: [...result[doc._id].conflicts, ...conflicts],\n        },\n      }\n    }\n\n    return result\n  }, {})\n}\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../../util/getAxios'\nimport createResolver from '../../util/createResolver'\nimport resolveConflicts from '../../util/resolveConflicts'\n\n/**\n * PUTs a document using _bulk_docs endpoint\n */\nexport const typeDefs = gql`\n  type PutResponse {\n    _id: String!\n    _rev: String\n    document: JSON\n  }\n\n  extend type Mutation {\n    put(input: JSON, upsert: Boolean, new_edits: Boolean): PutResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Mutation: {\n    put: async (parent, { input, upsert, new_edits = true }, context, info) => {\n      let url = `${context.dbUrl}/${context.dbName}/_bulk_docs`\n      let rev = input._rev\n\n      // get previous _rev for upsert\n      if (upsert) {\n        if (!input._id) {\n          throw Error('upsert option requires input to contain _id')\n        }\n\n        try {\n          const {\n            data: { _rev },\n          } = await getAxios(context).get(\n            `${context.dbUrl}/${context.dbName}/${encodeURIComponent(\n              input._id\n            )}`\n          )\n          rev = _rev\n        } catch (e) {\n          if (!e.response || e.response.status !== 404) {\n            throw e\n          }\n        }\n      }\n\n      const response = await getAxios(context).post(url, {\n        docs: [{ ...input, _rev: rev }],\n        new_edits,\n      })\n\n      let [result] = response.data\n\n      if (result && result.error) {\n        if (\n          result.error === 'conflict' &&\n          result.id &&\n          context.onResolveConflict\n        ) {\n          const resolved = await resolveConflicts([input], context)\n          result = resolved[0]\n\n          if (result.error) {\n            throw new Error(result.reason)\n          }\n        } else {\n          throw new Error(result.reason)\n        }\n      }\n\n      return result\n        ? {\n            _id: result.id,\n            _rev: result.rev,\n            document: {\n              ...input,\n              _id: result.id,\n              _rev: result.rev,\n            },\n          }\n        : {}\n    },\n  },\n})\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../../util/getAxios'\n\nexport const typeDefs = gql`\n  type BulkDocsResponseObject {\n    _id: String\n    _rev: String\n    document: JSON\n    error: String\n    reason: String\n  }\n\n  extend type Mutation {\n    bulkDocs(\n      input: [JSON!]!\n      upsert: Boolean\n      new_edits: Boolean\n    ): [BulkDocsResponseObject]\n  }\n`\n\nexport const resolvers = {\n  Mutation: {\n    bulkDocs: async (parent, { input, upsert, new_edits }, context, info) => {\n      let url = `${context.dbUrl}/${context.dbName}/_bulk_docs`\n      let previousRevs: Record<string, string> = {}\n\n      // get previous _revs for upsert\n      if (upsert) {\n        const ids: string[] = input.map(i => i._id).filter(id => !!id)\n\n        const { data: allDocs } = await getAxios(context).post(\n          `${context.dbUrl}/${context.dbName}/_all_docs`,\n          {\n            keys: ids,\n          }\n        )\n\n        allDocs.rows.forEach(row => {\n          previousRevs[row.id] = row.value ? row.value.rev : null\n        })\n      }\n\n      const response = await getAxios(context).post(url, {\n        docs: input.map(i => ({\n          ...i,\n          _rev: upsert && i._id ? previousRevs[i._id] : i._rev,\n        })),\n        new_edits,\n      })\n\n      const results = response.data\n\n      return results.map((result, index) => {\n        const document = input[index]\n\n        const _rev = result.error\n          ? // if an error, return the last _rev\n            previousRevs[document._id] || document._rev\n          : // otherwise result.rev will be populated\n            result.rev\n\n        return {\n          _id: result.id,\n          _rev,\n          error: result.error,\n          reason: result.reason,\n          document: {\n            ...document,\n            _id: result.id,\n            _rev,\n          },\n        }\n      })\n    },\n  },\n}\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../../util/getAxios'\nimport queryString from 'qs'\nimport createResolver from '../../util/createResolver'\n\nexport const typeDefs = gql`\n  type AllDocsRow {\n    id: String!\n    rev: String\n    value: JSON\n    doc: JSON\n  }\n\n  type AllDocsResponse {\n    total_rows: Int!\n    offset: Int!\n    rows: [AllDocsRow!]!\n  }\n\n  extend type Query {\n    allDocs(\n      conflicts: Boolean\n      endkey: JSON\n      include_docs: Boolean\n      inclusive_end: Boolean\n      key: JSON\n      keys: [JSON!]\n      limit: Int\n      skip: Int\n      startkey: JSON\n      update_seq: Boolean\n    ): AllDocsResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    allDocs: async (parent, { keys, ...args }, context, info) => {\n      let url = `${context.dbUrl}/${context.dbName}/_all_docs`\n\n      if (args) {\n        url += `?${queryString.stringify(args)}`\n      }\n\n      const response = await getAxios(context).post(url, { keys })\n\n      return response.data\n    },\n  },\n})\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../../util/getAxios'\nimport queryString from 'qs'\nimport createResolver from '../../util/createResolver'\n\n/**\n * Generic GET on a document\n */\nexport const typeDefs = gql`\n  input BulkGetInput {\n    id: String!\n    rev: String\n  }\n\n  type BulkGetResponse {\n    results: [BulkGetResult!]!\n  }\n\n  type BulkGetResult {\n    id: String\n    docs: [BulkGetDocs!]!\n  }\n\n  type BulkGetDocs {\n    ok: JSON\n    error: BulkGetError\n  }\n\n  type BulkGetError {\n    id: String\n    rev: String\n    error: String\n    reason: String\n  }\n\n  extend type Query {\n    bulkGet(docs: [BulkGetInput!]!, revs: Boolean): BulkGetResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    bulkGet: async (parent, { docs, revs }, context, info) => {\n      let url = `${context.dbUrl}/${context.dbName}/_bulk_get`\n\n      if (revs) {\n        url += `?${queryString.stringify({ revs })}`\n      }\n\n      const response = await getAxios(context).post(url, {\n        docs,\n        revs,\n      })\n\n      return response.data\n    },\n  },\n})\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../../util/getAxios'\nimport queryString from 'qs'\nimport createResolver from '../../util/createResolver'\n\nexport const typeDefs = gql`\n  type Change {\n    rev: String\n  }\n  type ChangesResult {\n    changes: [Change]\n    id: String\n    seq: JSON\n    doc: JSON\n    deleted: Boolean\n  }\n\n  type ChangesResponse {\n    last_seq: JSON\n    pending: Int\n    results: [ChangesResult]\n  }\n\n  extend type Query {\n    changes(\n      doc_ids: [String!]\n      conflicts: Boolean\n      descending: Boolean\n      feed: String\n      filter: String\n      heartbeat: Int\n      include_docs: Boolean\n      attachments: Boolean\n      att_encoding_info: Boolean\n      lastEventId: Int\n      limit: Int\n      since: String\n      timeout: Int\n      view: String\n      seq_interval: Int\n    ): ChangesResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    changes: async (parent, args, context, info) => {\n      const hasArgs = Object.keys(args).length > 0\n      let url = `${context.dbUrl}/${context.dbName}/_changes`\n\n      if (hasArgs) {\n        if (args.lastEventId) {\n          delete args.lastEventId\n          args['last-event-id'] = args.lastEventId\n        }\n\n        // if args.since is not 'now', convert to number\n        if (args.since) {\n          if (args.since !== 'now') {\n            args.since = parseInt(args.since)\n          }\n        }\n\n        url += `?${queryString.stringify(args)}`\n      }\n\n      const response = await getAxios(context).get(url)\n\n      return response.data\n    },\n  },\n})\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../../util/getAxios'\nimport createResolver from '../../util/createResolver'\n\nexport const typeDefs = gql`\n  type FindResponse {\n    execution_stats: JSON\n    bookmark: String\n    warning: String\n    docs: [JSON!]\n  }\n\n  type FindRow {\n    id: String\n    order: [Int!]\n    fields: JSON\n  }\n\n  extend type Query {\n    find(\n      selector: JSON!\n      limit: Int\n      skip: Int\n      sort: Int\n      fields: [String!]\n      use_index: [String!]\n      r: Int\n      bookmark: String\n      update: Boolean\n      stable: Boolean\n      stale: String\n      execution_stats: Boolean\n    ): FindResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    find: async (parent, { index, ddoc, ...args }, context, info) => {\n      let url = `${context.dbUrl}/${context.dbName}/_find`\n\n      const response = await getAxios(context).post(url, args)\n\n      return response.data\n    },\n  },\n})\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../../util/getAxios'\nimport queryString from 'qs'\nimport createResolver from '../../util/createResolver'\n\n/**\n * Generic GET on a document\n */\nexport const typeDefs = gql`\n  type GetResponse {\n    _id: String!\n    _rev: String\n    document: JSON\n  }\n\n  extend type Query {\n    get(\n      id: String!\n      rev: String\n      revs: Boolean\n      revs_info: Boolean\n      open_revs: Boolean\n      conflicts: Boolean\n      attachments: Boolean\n      latest: Boolean\n    ): GetResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    get: async (parent, { id, ...args }, context, info) => {\n      const hasArgs = Object.keys(args).length > 0\n      let url = `${context.dbUrl}/${context.dbName}/${encodeURIComponent(id)}`\n\n      if (hasArgs) {\n        url += `?${queryString.stringify(args)}`\n      }\n\n      const response = await getAxios(context).get(url)\n\n      return {\n        _id: response.data._id,\n        _rev: response.data._rev,\n        document: response.data,\n      }\n    },\n  },\n})\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../../util/getAxios'\nimport createResolver from '../../util/createResolver'\n\n/**\n * Generic GET on a document\n */\nexport const typeDefs = gql`\n  type Sizes {\n    file: Int\n    external: Int\n    active: Int\n  }\n\n  type Other {\n    data_size: Int\n  }\n\n  type Cluster {\n    q: Int\n    n: Int\n    w: Int\n    r: Int\n  }\n\n  type InfoResponse {\n    db_name: String\n    update_seq: String\n    sizes: Sizes\n    purge_seq: Int\n    other: Other\n    doc_del_count: Int\n    doc_count: Int\n    disk_size: Int\n    disk_format_version: Int\n    data_size: Int\n    compact_running: Boolean\n    cluster: Cluster\n    instance_start_time: Int\n  }\n\n  extend type Query {\n    info: InfoResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    info: async (parent, args, context, info) => {\n      let url = `${context.dbUrl}`\n\n      const response = await getAxios(context).get(url)\n\n      return response.data\n    },\n  },\n})\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../../util/getAxios'\nimport queryString from 'qs'\nimport createResolver from '../../util/createResolver'\n\nexport const typeDefs = gql`\n  type QueryResponse {\n    offset: Int\n    update_seq: JSON\n    total_rows: Int\n    rows: [QueryRow!]\n  }\n\n  type QueryRow {\n    id: String\n    key: JSON\n    value: JSON\n  }\n\n  extend type Query {\n    query(\n      ddoc: String!\n      view: String!\n      conflicts: Boolean\n      descending: Boolean\n      endkey: JSON\n      group: Boolean\n      group_level: Int\n      include_docs: Boolean\n      attachments: Boolean\n      att_encoding_info: Boolean\n      inclusive_end: Boolean\n      key: JSON\n      keys: [JSON!]\n      limit: Int\n      reduce: Boolean\n      skip: Int\n      sorted: Boolean\n      stable: Boolean\n      stale: String\n      startkey: JSON\n      update: String\n      update_seq: Boolean\n    ): QueryResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    query: async (parent, { view, ddoc, ...args }, context, info) => {\n      let url = `${context.dbUrl}/${context.dbName}/_design/${ddoc}/_view/${view}`\n\n      const hasArgs = Object.keys(args).length > 0\n      if (hasArgs) {\n        url += `?${queryString.stringify(args)}`\n      }\n\n      const response = await getAxios(context).get(url)\n\n      return response.data\n    },\n  },\n})\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../../util/getAxios'\nimport queryString from 'qs'\nimport createResolver from '../../util/createResolver'\n\nexport const typeDefs = gql`\n  type SearchResponse {\n    total_rows: Int\n    bookmark: String\n    rows: [SearchRow]\n    counts: JSON\n  }\n\n  type SearchRow {\n    id: String\n    order: [Int]\n    fields: JSON\n  }\n\n  extend type Query {\n    search(\n      index: String!\n      ddoc: String!\n      bookmark: String\n      counts: [String!]\n      drilldown: JSON\n      group_field: String\n      group_limit: Int\n      group_sort: JSON\n      highlight_fields: [String!]\n      highlight_pre_tag: String\n      highlight_post_tag: String\n      highlight_number: Int\n      highlight_size: Int\n      include_docs: Boolean\n      include_fields: [String!]\n      limit: Int\n      query: String!\n      ranges: JSON\n      sort: [String!]\n      stale: String\n    ): SearchResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    search: async (\n      parent,\n      { index, ddoc, typename, ...args },\n      context,\n      info\n    ) => {\n      let url = `${context.dbUrl}/${context.dbName}/_design/${ddoc}/_search/${index}`\n\n      const response = await getAxios(context).post(url, args)\n\n      return response.data\n    },\n  },\n})\n","import { buildFederatedSchema } from '@apollo/federation'\nimport { GraphQLSchemaModule } from 'apollo-server-core'\nimport { base } from './graphql/base'\nimport * as mutations from './graphql/mutations'\nimport * as queries from './graphql/queries'\n\nexport interface CreateSchemaOptions {\n  /**\n   * Includes schemas for cloudant endpoints\n   *\n   * defaults to true\n   */\n  cloudant?: boolean\n  schemas?: GraphQLSchemaModule[]\n}\n\n/**\n * Creates a GraphQL Schema for CouchDB\n */\nexport function createSchema({\n  schemas = [],\n  cloudant = true,\n}: CreateSchemaOptions = {}) {\n  const { search, ...couchdbQueries } = queries\n\n  return buildFederatedSchema([\n    base,\n    ...Object.keys(cloudant ? queries : couchdbQueries).map(\n      key => queries[key]\n    ),\n    ...Object.keys(mutations).map(key => mutations[key]),\n    ...schemas,\n  ])\n}\n"],"names":["base","typeDefs","gql","_iteratorSymbol","Symbol","iterator","_asyncIteratorSymbol","asyncIterator","_catch","body","recover","result","e","then","getAxios","context","axios","create","headers","dbHeaders","createResolver","resolver","getConflictsByDocument","documents","post","dbUrl","dbName","keys","map","doc","_id","res","data","rows","row","documentsWithConflictRevs","docs","reduce","conflicts","_conflicts","rev","id","results","ok","filter","conflictingDocuments","conflictedDoc","find","d","document","original","revToSave","_rev","resolveConflicts","Promise","all","Object","onResolveConflict","resolved","resolvedDocs","docsToSave","deleted","docId","conflict","_deleted","response","_templateObject","resolvers","Mutation","put","parent","info","input","upsert","new_edits","url","error","Error","reason","get","encodeURIComponent","status","bulkDocs","i","previousRevs","index","ids","allDocs","forEach","value","Query","args","queryString","stringify","bulkGet","revs","changes","hasArgs","length","lastEventId","since","parseInt","ddoc","query","view","search","typename","createSchema","schemas","cloudant","couchdbQueries","queries","buildFederatedSchema","key","mutations"],"mappings":"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"}