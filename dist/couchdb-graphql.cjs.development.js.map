{"version":3,"file":"couchdb-graphql.cjs.development.js","sources":["../src/graphql/base.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/util/getAxios.ts","../src/util/createResolver.ts","../src/util/resolveConflicts.ts","../src/graphql/mutations/put.ts","../src/graphql/mutations/bulkDocs.ts","../src/graphql/queries/allDocs.ts","../src/graphql/queries/bulkGet.ts","../src/graphql/queries/changes.ts","../src/graphql/queries/find.ts","../src/graphql/queries/get.ts","../src/graphql/queries/info.ts","../src/graphql/queries/query.ts","../src/graphql/queries/search.ts","../src/createSchema.ts"],"sourcesContent":["import { gql } from 'apollo-server-core'\n\nexport const base = {\n  typeDefs: gql`\n    scalar JSON\n  `,\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && !check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import axios from 'axios'\n\nexport default function getAxios(context: any) {\n  return axios.create({\n    headers: context.dbHeaders,\n  })\n}\n","import { GraphQLResolverMap } from '@apollographql/apollo-tools'\n\ninterface CouchDbDocument {\n  _id: string\n  _rev?: string\n  [key: string]: any\n}\n\nexport interface CouchDbContext {\n  dbUrl: string\n  dbName: string\n  onResolveConflict?: <T extends CouchDbDocument>(args: {\n    document: T\n    conflicts: T[]\n    context: CouchDbContext\n  }) => T\n  onConflictsResolved?: <T extends CouchDbDocument>(documents: T[]) => any\n  onDocumentsSaved?: <T extends CouchDbDocument>(documents: T[]) => any\n}\n\nexport function createResolver(resolver: GraphQLResolverMap<CouchDbContext>) {\n  return resolver\n}\n","import { CouchDbContext } from './createResolver'\nimport getAxios from './getAxios'\n\n/**\n * Returns an object where the key is the doc id and the value is the rejected document\n * and full conflicting documents\n */\nasync function getConflictsByDocument(\n  documents: any[],\n  context: CouchDbContext\n): Promise<\n  Record<string, { document: any; conflicts: any[]; revToSave: string }>\n> {\n  // get _conflicts for each document\n  const documentsWithConflictRevs = await getAxios(context)\n    .post(\n      `${context.dbUrl}/${context.dbName}/_all_docs?conflicts=true&include_docs=true`,\n      {\n        keys: documents.map(doc => doc._id),\n      }\n    )\n    .then(res => res.data.rows.map(row => row.doc))\n\n  // get full document for each _conflict\n  const conflictingDocuments = await getAxios(context)\n    .post(`${context.dbUrl}/${context.dbName}/_bulk_get`, {\n      docs: documentsWithConflictRevs.reduce(\n        (conflicts, doc) => [\n          ...conflicts,\n          ...(doc._conflicts || []).map(rev => ({\n            id: doc._id,\n            rev,\n          })),\n        ],\n        []\n      ),\n    })\n    .then(res =>\n      res.data.results.map(row => row.docs[0].ok).filter(doc => !!doc)\n    )\n\n  const result = documentsWithConflictRevs.reduce((result, doc) => {\n    if (!result[doc._id]) {\n      const conflictedDoc = documentsWithConflictRevs.find(\n        d => d._id === doc._id\n      )\n\n      result[doc._id] = {\n        // the document rejected by the conflict\n        document: documents.find(original => original._id === doc._id),\n        // all conflicts in the db including the one with _conflicts\n        conflicts: [doc],\n        revToSave: conflictedDoc._rev,\n      }\n    }\n\n    // check if any _conflicts were for this document\n    const conflicts = conflictingDocuments.filter(d => d._id === doc._id)\n\n    if (conflicts) {\n      return {\n        ...result,\n        [doc._id]: {\n          ...result[doc._id],\n          conflicts: [...result[doc._id].conflicts, ...conflicts],\n        },\n      }\n    }\n\n    return result\n  }, {})\n\n  return result\n}\n\n/**\n * Resolves conflicts by calling context.onResolveConflict and saving its result\n */\nexport async function resolveConflicts(\n  documents: any[],\n  context: CouchDbContext\n) {\n  if (!context.onResolveConflict) {\n    return null\n  }\n\n  const conflictingDocuments = await getConflictsByDocument(documents, context)\n\n  const resolvedDocs = await Promise.all(\n    Object.keys(conflictingDocuments).map(async id => {\n      const { _conflicts, ...resolved } = await context.onResolveConflict!({\n        document: conflictingDocuments[id].document,\n        conflicts: conflictingDocuments[id].conflicts,\n        context,\n      })\n\n      return {\n        ...resolved,\n        _rev: conflictingDocuments[id].revToSave,\n      }\n    })\n  )\n\n  const docsToSave = [\n    ...resolvedDocs,\n\n    ...Object.keys(conflictingDocuments).reduce(\n      (deleted, docId) => [\n        ...deleted,\n        ...conflictingDocuments[docId].conflicts\n          .map(conflict => ({\n            ...conflict,\n            _deleted: true,\n          }))\n          .filter(\n            conflict => conflict._rev !== conflictingDocuments[docId].revToSave\n          ),\n      ],\n      [] as any[]\n    ),\n  ]\n\n  const response = await getAxios(context).post(\n    `${context.dbUrl}/${context.dbName}/_bulk_docs`,\n    {\n      docs: docsToSave,\n    }\n  )\n\n  if (context.onConflictsResolved) {\n    context.onConflictsResolved(\n      response.data\n        .filter(result => result.ok)\n        .map(result => ({\n          ...docsToSave.find(doc => doc._id === result.id),\n          _rev: result.rev,\n          _id: result.id,\n        }))\n    )\n  }\n  return response.data\n}\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../../util/getAxios'\nimport { createResolver } from '../../util/createResolver'\nimport { resolveConflicts } from '../../util/resolveConflicts'\n\n/**\n * PUTs a document using _bulk_docs endpoint\n */\nexport const typeDefs = gql`\n  type PutResponse {\n    _id: String!\n    _rev: String\n    document: JSON\n  }\n\n  extend type Mutation {\n    put(input: JSON, upsert: Boolean, new_edits: Boolean): PutResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Mutation: {\n    put: async (parent, { input, upsert, new_edits = true }, context, info) => {\n      let url = `${context.dbUrl}/${context.dbName}/_bulk_docs`\n      let rev = input._rev\n\n      // get previous _rev for upsert\n      if (upsert) {\n        if (!input._id) {\n          throw Error('upsert option requires input to contain _id')\n        }\n\n        try {\n          const {\n            data: { _rev },\n          } = await getAxios(context).get(\n            `${context.dbUrl}/${context.dbName}/${encodeURIComponent(\n              input._id\n            )}`\n          )\n          rev = _rev\n        } catch (e) {\n          if (!e.response || e.response.status !== 404) {\n            throw e\n          }\n        }\n      }\n\n      const response = await getAxios(context).post(url, {\n        docs: [{ ...input, _rev: rev }],\n        new_edits,\n      })\n\n      let [result] = response.data\n\n      if (result && result.error) {\n        if (result.error === 'conflict' && result.id) {\n          const resolved = await resolveConflicts([input], context)\n\n          if (resolved) {\n            result = resolved[0]\n          }\n\n          if (result.error) {\n            throw new Error(result.reason)\n          }\n        } else {\n          throw new Error(result.reason)\n        }\n      }\n\n      if (result) {\n        const savedDocument = result && {\n          ...input,\n          _id: result.id,\n          _rev: result.rev,\n        }\n\n        if (context.onDocumentsSaved) {\n          context.onDocumentsSaved([savedDocument])\n        }\n\n        return {\n          _id: result.id,\n          _rev: result.rev,\n          document: savedDocument,\n        }\n      } else {\n        // new_edits=false returns empty response\n        return {}\n      }\n    },\n  },\n})\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../../util/getAxios'\nimport { resolveConflicts } from '../../util/resolveConflicts'\nimport { createResolver } from '../../util/createResolver'\n\nexport const typeDefs = gql`\n  type BulkDocsResponseObject {\n    _id: String\n    _rev: String\n    document: JSON\n    error: String\n    reason: String\n  }\n\n  extend type Mutation {\n    bulkDocs(\n      input: [JSON!]!\n      upsert: Boolean\n      new_edits: Boolean\n    ): [BulkDocsResponseObject]\n  }\n`\n\nexport const resolvers = createResolver({\n  Mutation: {\n    bulkDocs: async (\n      parent,\n      { input, upsert, new_edits = true },\n      context,\n      info\n    ) => {\n      let url = `${context.dbUrl}/${context.dbName}/_bulk_docs`\n      let previousRevs: Record<string, string> = {}\n\n      // get previous _revs for upsert\n      if (upsert) {\n        const ids: string[] = input.map(i => i._id).filter(id => !!id)\n\n        const { data: allDocs } = await getAxios(context).post(\n          `${context.dbUrl}/${context.dbName}/_all_docs`,\n          {\n            keys: ids,\n          }\n        )\n\n        allDocs.rows.forEach(row => {\n          previousRevs[row.id] = row.value ? row.value.rev : null\n        })\n      }\n\n      const saveResponse = await getAxios(context).post(url, {\n        docs: input.map(doc => ({\n          ...doc,\n          _rev: upsert && doc._id ? previousRevs[doc._id] : doc._rev,\n        })),\n        new_edits,\n      })\n\n      let saveResults = saveResponse.data\n      const conflicts = saveResponse.data.filter(\n        result => result.error === 'conflict'\n      )\n\n      if (conflicts.length > 0) {\n        const resolved = await resolveConflicts(\n          input.filter(doc =>\n            conflicts.find(conflict => conflict.id === doc._id)\n          ),\n          context\n        )\n\n        if (resolved) {\n          // update any \"conflict\" results with the resolved result\n          saveResults = saveResults.map(saveResult => {\n            const resolvedDoc = resolved.find(\n              resolvedResult => resolvedResult.id === saveResult.id\n            )\n            if (saveResult.error === 'conflict' && resolvedDoc) {\n              return resolvedDoc\n            }\n\n            return saveResult\n          })\n        }\n      }\n\n      const response = saveResults.map((result, index) => {\n        const document = input[index]\n\n        const _rev = result.error\n          ? // if an error, return the last _rev\n            previousRevs[document._id] || document._rev\n          : // otherwise result.rev will be populated\n            result.rev\n\n        return {\n          _id: result.id,\n          _rev,\n          error: result.error,\n          reason: result.reason,\n          document: {\n            ...document,\n            _id: result.id,\n            _rev,\n          },\n        }\n      })\n\n      if (context.onDocumentsSaved) {\n        context.onDocumentsSaved(\n          response.filter(res => !res.error).map(res => res.document)\n        )\n      }\n\n      return response\n    },\n  },\n})\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../../util/getAxios'\nimport queryString from 'qs'\nimport { createResolver } from '../../util/createResolver'\n\nexport const typeDefs = gql`\n  type AllDocsRow {\n    id: String!\n    rev: String\n    value: JSON\n    doc: JSON\n  }\n\n  type AllDocsResponse {\n    total_rows: Int!\n    offset: Int!\n    rows: [AllDocsRow!]!\n  }\n\n  extend type Query {\n    allDocs(\n      conflicts: Boolean\n      endkey: JSON\n      include_docs: Boolean\n      inclusive_end: Boolean\n      key: JSON\n      keys: [JSON!]\n      limit: Int\n      skip: Int\n      startkey: JSON\n      update_seq: Boolean\n    ): AllDocsResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    allDocs: async (parent, { keys, ...args }, context, info) => {\n      let url = `${context.dbUrl}/${context.dbName}/_all_docs`\n\n      if (args) {\n        url += `?${queryString.stringify(args)}`\n      }\n\n      const response = await getAxios(context).post(url, { keys })\n\n      return response.data\n    },\n  },\n})\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../../util/getAxios'\nimport queryString from 'qs'\nimport { createResolver } from '../../util/createResolver'\n\n/**\n * Generic GET on a document\n */\nexport const typeDefs = gql`\n  input BulkGetInput {\n    id: String!\n    rev: String\n  }\n\n  type BulkGetResponse {\n    results: [BulkGetResult!]!\n  }\n\n  type BulkGetResult {\n    id: String\n    docs: [BulkGetDocs!]!\n  }\n\n  type BulkGetDocs {\n    ok: JSON\n    error: BulkGetError\n  }\n\n  type BulkGetError {\n    id: String\n    rev: String\n    error: String\n    reason: String\n  }\n\n  extend type Query {\n    bulkGet(docs: [BulkGetInput!]!, revs: Boolean): BulkGetResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    bulkGet: async (parent, { docs, revs }, context, info) => {\n      let url = `${context.dbUrl}/${context.dbName}/_bulk_get`\n\n      if (revs) {\n        url += `?${queryString.stringify({ revs })}`\n      }\n\n      const response = await getAxios(context).post(url, {\n        docs,\n        revs,\n      })\n\n      return response.data\n    },\n  },\n})\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../../util/getAxios'\nimport queryString from 'qs'\nimport { createResolver } from '../../util/createResolver'\n\nexport const typeDefs = gql`\n  type Change {\n    rev: String\n  }\n  type ChangesResult {\n    changes: [Change]\n    id: String\n    seq: JSON\n    doc: JSON\n    deleted: Boolean\n  }\n\n  type ChangesResponse {\n    last_seq: JSON\n    pending: Int\n    results: [ChangesResult]\n  }\n\n  extend type Query {\n    changes(\n      doc_ids: [String!]\n      conflicts: Boolean\n      descending: Boolean\n      feed: String\n      filter: String\n      heartbeat: Int\n      include_docs: Boolean\n      attachments: Boolean\n      att_encoding_info: Boolean\n      lastEventId: Int\n      limit: Int\n      since: String\n      timeout: Int\n      view: String\n      seq_interval: Int\n    ): ChangesResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    changes: async (parent, args, context, info) => {\n      const hasArgs = Object.keys(args).length > 0\n      let url = `${context.dbUrl}/${context.dbName}/_changes`\n\n      if (hasArgs) {\n        if (args.lastEventId) {\n          delete args.lastEventId\n          args['last-event-id'] = args.lastEventId\n        }\n\n        // if args.since is not 'now', convert to number\n        if (args.since) {\n          if (args.since !== 'now') {\n            args.since = parseInt(args.since)\n          }\n        }\n\n        url += `?${queryString.stringify(args)}`\n      }\n\n      const response = await getAxios(context).get(url)\n\n      return response.data\n    },\n  },\n})\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../../util/getAxios'\nimport { createResolver } from '../../util/createResolver'\n\nexport const typeDefs = gql`\n  type FindResponse {\n    execution_stats: JSON\n    bookmark: String\n    warning: String\n    docs: [JSON!]\n  }\n\n  type FindRow {\n    id: String\n    order: [Int!]\n    fields: JSON\n  }\n\n  extend type Query {\n    find(\n      selector: JSON!\n      limit: Int\n      skip: Int\n      sort: Int\n      fields: [String!]\n      use_index: [String!]\n      r: Int\n      bookmark: String\n      update: Boolean\n      stable: Boolean\n      stale: String\n      execution_stats: Boolean\n    ): FindResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    find: async (parent, { index, ddoc, ...args }, context, info) => {\n      let url = `${context.dbUrl}/${context.dbName}/_find`\n\n      const response = await getAxios(context).post(url, args)\n\n      return response.data\n    },\n  },\n})\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../../util/getAxios'\nimport queryString from 'qs'\nimport { createResolver } from '../../util/createResolver'\n\n/**\n * Generic GET on a document\n */\nexport const typeDefs = gql`\n  type GetResponse {\n    _id: String!\n    _rev: String\n    document: JSON\n  }\n\n  extend type Query {\n    get(\n      id: String!\n      rev: String\n      revs: Boolean\n      revs_info: Boolean\n      open_revs: Boolean\n      conflicts: Boolean\n      attachments: Boolean\n      latest: Boolean\n    ): GetResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    get: async (parent, { id, ...args }, context, info) => {\n      const hasArgs = Object.keys(args).length > 0\n      let url = `${context.dbUrl}/${context.dbName}/${encodeURIComponent(id)}`\n\n      if (hasArgs) {\n        url += `?${queryString.stringify(args)}`\n      }\n\n      const response = await getAxios(context).get(url)\n\n      return {\n        _id: response.data._id,\n        _rev: response.data._rev,\n        document: response.data,\n      }\n    },\n  },\n})\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../../util/getAxios'\nimport { createResolver } from '../../util/createResolver'\n\n/**\n * Generic GET on a document\n */\nexport const typeDefs = gql`\n  type Sizes {\n    file: Int\n    external: Int\n    active: Int\n  }\n\n  type Other {\n    data_size: Int\n  }\n\n  type Cluster {\n    q: Int\n    n: Int\n    w: Int\n    r: Int\n  }\n\n  type InfoResponse {\n    db_name: String\n    update_seq: String\n    sizes: Sizes\n    purge_seq: Int\n    other: Other\n    doc_del_count: Int\n    doc_count: Int\n    disk_size: Int\n    disk_format_version: Int\n    data_size: Int\n    compact_running: Boolean\n    cluster: Cluster\n    instance_start_time: Int\n  }\n\n  extend type Query {\n    info: InfoResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    info: async (parent, args, context, info) => {\n      let url = `${context.dbUrl}`\n\n      const response = await getAxios(context).get(url)\n\n      return response.data\n    },\n  },\n})\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../../util/getAxios'\nimport queryString from 'qs'\nimport { createResolver } from '../../util/createResolver'\n\nexport const typeDefs = gql`\n  type QueryResponse {\n    offset: Int\n    update_seq: JSON\n    total_rows: Int\n    rows: [QueryRow!]\n  }\n\n  type QueryRow {\n    id: String\n    key: JSON\n    value: JSON\n  }\n\n  extend type Query {\n    query(\n      ddoc: String!\n      view: String!\n      conflicts: Boolean\n      descending: Boolean\n      endkey: JSON\n      group: Boolean\n      group_level: Int\n      include_docs: Boolean\n      attachments: Boolean\n      att_encoding_info: Boolean\n      inclusive_end: Boolean\n      key: JSON\n      keys: [JSON!]\n      limit: Int\n      reduce: Boolean\n      skip: Int\n      sorted: Boolean\n      stable: Boolean\n      stale: String\n      startkey: JSON\n      update: String\n      update_seq: Boolean\n    ): QueryResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    query: async (parent, { view, ddoc, ...args }, context, info) => {\n      let url = `${context.dbUrl}/${context.dbName}/_design/${ddoc}/_view/${view}`\n\n      const hasArgs = Object.keys(args).length > 0\n      if (hasArgs) {\n        url += `?${queryString.stringify(args)}`\n      }\n\n      const response = await getAxios(context).get(url)\n\n      return response.data\n    },\n  },\n})\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../../util/getAxios'\nimport queryString from 'qs'\nimport { createResolver } from '../../util/createResolver'\n\nexport const typeDefs = gql`\n  type SearchResponse {\n    total_rows: Int\n    bookmark: String\n    rows: [SearchRow]\n    counts: JSON\n  }\n\n  type SearchRow {\n    id: String\n    order: [Int]\n    fields: JSON\n  }\n\n  extend type Query {\n    search(\n      index: String!\n      ddoc: String!\n      bookmark: String\n      counts: [String!]\n      drilldown: JSON\n      group_field: String\n      group_limit: Int\n      group_sort: JSON\n      highlight_fields: [String!]\n      highlight_pre_tag: String\n      highlight_post_tag: String\n      highlight_number: Int\n      highlight_size: Int\n      include_docs: Boolean\n      include_fields: [String!]\n      limit: Int\n      query: String!\n      ranges: JSON\n      sort: [String!]\n      stale: String\n    ): SearchResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    search: async (\n      parent,\n      { index, ddoc, typename, ...args },\n      context,\n      info\n    ) => {\n      let url = `${context.dbUrl}/${context.dbName}/_design/${ddoc}/_search/${index}`\n\n      const response = await getAxios(context).post(url, args)\n\n      return response.data\n    },\n  },\n})\n","import { buildFederatedSchema } from '@apollo/federation'\nimport { GraphQLSchemaModule } from 'apollo-server-core'\nimport { base } from './graphql/base'\nimport * as mutations from './graphql/mutations'\nimport * as queries from './graphql/queries'\n\nexport interface CreateSchemaOptions {\n  /**\n   * Includes schemas for cloudant endpoints\n   *\n   * defaults to true\n   */\n  cloudant?: boolean\n  schemas?: GraphQLSchemaModule[]\n}\n\n/**\n * Creates a GraphQL Schema for CouchDB\n */\nexport function createSchema({\n  schemas = [],\n  cloudant = true,\n}: CreateSchemaOptions = {}) {\n  const { search, ...couchdbQueries } = queries\n\n  return buildFederatedSchema([\n    base,\n    ...Object.keys(cloudant ? queries : couchdbQueries).map(\n      key => queries[key]\n    ),\n    ...Object.keys(mutations).map(key => mutations[key]),\n    ...schemas,\n  ])\n}\n"],"names":["base","typeDefs","gql","_iteratorSymbol","Symbol","iterator","_asyncIteratorSymbol","asyncIterator","_catch","body","recover","result","e","then","getAxios","context","axios","create","headers","dbHeaders","createResolver","resolver","resolveConflicts","documents","onResolveConflict","getConflictsByDocument","conflictingDocuments","Promise","all","Object","keys","map","id","document","conflicts","_conflicts","resolved","_rev","revToSave","resolvedDocs","docsToSave","reduce","deleted","docId","conflict","_deleted","filter","post","dbUrl","dbName","docs","response","onConflictsResolved","data","ok","find","doc","_id","rev","res","rows","row","documentsWithConflictRevs","results","conflictedDoc","d","original","_templateObject","resolvers","Mutation","put","parent","info","input","upsert","new_edits","url","savedDocument","onDocumentsSaved","error","Error","reason","get","encodeURIComponent","status","bulkDocs","previousRevs","saveResponse","saveResults","index","length","saveResult","resolvedDoc","resolvedResult","ids","i","allDocs","forEach","value","Query","args","queryString","stringify","bulkGet","revs","changes","hasArgs","lastEventId","since","parseInt","ddoc","query","view","search","typename","createSchema","schemas","cloudant","couchdbQueries","queries","buildFederatedSchema","key","mutations"],"mappings":"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"}