{"version":3,"file":"couchdb-graphql.cjs.development.js","sources":["../src/graphql/base.ts","../src/util/createResolver.ts","../src/util/parseFetchResponse.ts","../src/util/resolveConflicts.ts","../src/couchdb/put.ts","../src/graphql/mutations/put.ts","../src/couchdb/bulkDocs.ts","../src/graphql/mutations/bulkDocs.ts","../src/couchdb/allDocs.ts","../src/graphql/queries/allDocs.ts","../src/couchdb/bulkGet.ts","../src/graphql/queries/bulkGet.ts","../src/couchdb/changes.ts","../src/graphql/queries/changes.ts","../src/couchdb/find.ts","../src/couchdb/get.ts","../src/couchdb/info.ts","../src/couchdb/query.ts","../src/couchdb/search.ts","../src/graphql/queries/find.ts","../src/graphql/queries/get.ts","../src/graphql/queries/info.ts","../src/graphql/queries/query.ts","../src/graphql/queries/search.ts","../src/createCouchDbModule.ts","../src/createContext.ts"],"sourcesContent":["import { gql } from 'apollo-server-core'\n\nexport const base = {\n  typeDefs: gql`\n    scalar JSON\n\n    type Query\n    type Mutation\n  `,\n}\n","import { CouchDbContext } from '../createContext'\nimport { GraphQLFieldResolver } from 'graphql'\n\nexport function createResolver<T = any>(\n  resolver: GraphQLFieldResolver<any, CouchDbContext, T>\n) {\n  return resolver\n}\n","export default async function parseFetchResponse(response: Response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response.json()\n  } else {\n    const error = new Error(response.statusText)\n\n    // @ts-ignore\n    error.response = await response.json()\n    throw error\n  }\n}\n","import { CouchDbContext } from '../createContext'\nimport parseFetchResponse from './parseFetchResponse'\n\n/**\n * Returns an object where the key is the doc id and the value is the rejected document\n * and full conflicting documents\n */\nasync function getConflictsByDocument(\n  documents: any[],\n  context: CouchDbContext\n): Promise<\n  Record<string, { document: any; conflicts: any[]; revToSave: string }>\n> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n\n  // get _conflicts for each document\n  const documentsWithConflictRevs = await fetch(\n    `${dbUrl}/${dbName}/_all_docs?conflicts=true&include_docs=true`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        keys: documents.map(doc => doc._id),\n      }),\n    }\n  )\n    .then(parseFetchResponse)\n    .then(res => {\n      return res.rows.map(row => row.doc).filter(doc => !!doc)\n    })\n\n  // get full document for each _conflict\n  const conflictingDocuments = await fetch(`${dbUrl}/${dbName}/_bulk_get`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      docs: documentsWithConflictRevs.reduce(\n        (conflicts, doc) => [\n          ...conflicts,\n          ...((doc && doc._conflicts) || []).map(rev => ({\n            id: doc._id,\n            rev,\n          })),\n        ],\n        []\n      ),\n    }),\n  })\n    .then(parseFetchResponse)\n    .then(res => res.results.map(row => row.docs[0].ok).filter(doc => !!doc))\n\n  const result = documentsWithConflictRevs.reduce((result, doc) => {\n    if (!result[doc._id]) {\n      const conflictedDoc = documentsWithConflictRevs.find(\n        d => d._id === doc._id\n      )\n\n      result[doc._id] = {\n        // the document rejected by the conflict\n        document: documents.find(original => original._id === doc._id),\n        // add the stored document in the conflicts array\n        conflicts: [doc],\n        revToSave: conflictedDoc._rev,\n      }\n    }\n\n    // check if any _conflicts were for this document\n    const conflicts = conflictingDocuments.filter(d => d._id === doc._id)\n\n    if (conflicts) {\n      return {\n        ...result,\n        [doc._id]: {\n          ...result[doc._id],\n          conflicts: [...result[doc._id].conflicts, ...conflicts],\n        },\n      }\n    }\n\n    return result\n  }, {})\n\n  return result\n}\n\n/**\n * Resolves conflicts by calling context.onResolveConflict and saving its result\n */\nexport async function resolveConflicts(\n  documents: any[],\n  context: CouchDbContext\n) {\n  const {\n    fetch,\n    dbName,\n    dbUrl,\n    onResolveConflict,\n    onConflictsResolved,\n  } = context.couchDb\n  if (!onResolveConflict) {\n    return null\n  }\n\n  const conflictingDocuments = await getConflictsByDocument(documents, context)\n\n  const resolvedDocs = await Promise.all(\n    Object.keys(conflictingDocuments).map(async id => {\n      const resolvedDocument = await onResolveConflict!({\n        document: conflictingDocuments[id].document,\n        conflicts: conflictingDocuments[id].conflicts,\n        context,\n      })\n\n      if (resolvedDocument) {\n        const { _conflicts, ...resolved } = resolvedDocument\n        return {\n          ...resolved,\n          _rev: conflictingDocuments[id].revToSave,\n        }\n      }\n    })\n  ).then(res => res.filter(x => !!x))\n\n  const docsToSave = [\n    ...resolvedDocs,\n\n    ...Object.keys(conflictingDocuments).reduce(\n      (deleted, docId) => [\n        ...deleted,\n        ...conflictingDocuments[docId].conflicts\n          .map(conflict => ({\n            ...conflict,\n            _deleted: true,\n          }))\n          .filter(\n            conflict => conflict._rev !== conflictingDocuments[docId].revToSave\n          ),\n      ],\n      [] as any[]\n    ),\n  ]\n\n  const response = await fetch(`${dbUrl}/${dbName}/_bulk_docs`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      docs: docsToSave,\n    }),\n  }).then(parseFetchResponse)\n\n  const resolvedDocuments = response\n    .filter(result => result.ok)\n    .map(result => ({\n      ...docsToSave.find(doc => doc._id === result.id),\n      _rev: result.rev,\n      _id: result.id,\n    }))\n\n  if (onConflictsResolved && resolvedDocuments.length > 0) {\n    onConflictsResolved({\n      documents: resolvedDocuments,\n      context,\n    })\n  }\n  return response\n}\n","import { resolveConflicts } from '../util/resolveConflicts'\nimport { CouchDbDocument } from '../types'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\ninterface PutOptions {\n  upsert?: boolean\n  new_edits?: boolean\n}\n\nexport async function put<T extends CouchDbDocument>(\n  context: CouchDbContext,\n  doc: T,\n  options: PutOptions = {}\n): Promise<T | null> {\n  const { fetch, dbUrl, dbName, onDocumentsSaved } = context.couchDb\n\n  const { upsert, new_edits = true } = options\n  let url = `${dbUrl}/${dbName}/_bulk_docs`\n  let rev = doc._rev ?? undefined // don't let it be null\n\n  // couchdb errors if _deleted is null\n  if (doc._deleted === null) {\n    delete doc._deleted\n  }\n\n  // get previous _rev for upsert\n  if (upsert) {\n    if (!doc._id) {\n      throw Error('upsert option requires input to contain _id')\n    }\n\n    try {\n      const { _rev } = await fetch(\n        `${dbUrl}/${dbName}/${encodeURIComponent(doc._id)}`\n      ).then(parseFetchResponse)\n      rev = _rev\n    } catch (e) {\n      if (!e.response || e.response.status !== 404) {\n        throw e\n      }\n    }\n  }\n\n  const result = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      docs: [{ ...doc, _rev: rev }],\n      new_edits,\n    }),\n  })\n    .then(parseFetchResponse)\n    .then(async res => {\n      const result = Array.isArray(res) ? res[0] : res\n\n      // resolve conflicts\n      if (result && result.id && result.error === 'conflict') {\n        const [resolved] = await resolveConflicts([doc], context)\n\n        if (resolved) {\n          return resolved\n        }\n      }\n\n      return result\n    })\n\n  if (result && result.error) {\n    throw new Error(result.reason)\n  }\n\n  if (result) {\n    const savedDocument = {\n      ...doc,\n      _id: result.id,\n      _rev: result.rev,\n    }\n\n    if (onDocumentsSaved) {\n      onDocumentsSaved({ documents: [savedDocument], context })\n    }\n\n    return savedDocument\n  } else {\n    // new_edits=false returns empty response\n    return null\n  }\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { put } from '../../couchdb/put'\n\n/**\n * PUTs a document using _bulk_docs endpoint\n */\nexport const typeDefs = gql`\n  type PutResponse {\n    _id: String!\n    _rev: String\n    document: JSON\n  }\n\n  extend type Mutation {\n    put(input: JSON, upsert: Boolean, new_edits: Boolean): PutResponse\n  }\n`\n\nexport const resolvers = {\n  Mutation: {\n    put: createResolver(\n      async (parent, { input, upsert, new_edits = true }, context, info) => {\n        const document = await put(context, input, { upsert, new_edits })\n\n        return {\n          _id: document._id,\n          _rev: document._rev,\n          document,\n        }\n      }\n    ),\n  },\n}\n","import { resolveConflicts } from '../util/resolveConflicts'\nimport { CouchDbDocument } from '../types'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface BulkDocsResponseObject<T extends CouchDbDocument> {\n  _id: string\n  _rev?: string\n  document?: T\n  error?: string\n  reason?: string\n}\n\nexport type BulkDocsResponse<\n  T extends CouchDbDocument\n> = BulkDocsResponseObject<T>[]\n\nexport interface BulkDocsOptions {\n  upsert?: boolean\n  new_edits?: boolean\n}\nexport async function bulkDocs<T extends CouchDbDocument>(\n  context: CouchDbContext,\n  docs: any[],\n  options: BulkDocsOptions = {}\n): Promise<BulkDocsResponse<T>> {\n  const { fetch, dbUrl, dbName, onDocumentsSaved } = context.couchDb\n  const { upsert, new_edits = true } = options\n  let url = `${dbUrl}/${dbName}/_bulk_docs`\n  let previousRevs: Record<string, string> = {}\n\n  // get previous _revs for upsert\n  if (upsert) {\n    const ids: string[] = docs.map(i => i._id).filter(id => !!id)\n\n    const { data: allDocs } = await fetch(`${dbUrl}/${dbName}/_all_docs`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        keys: ids,\n      }),\n    }).then(parseFetchResponse)\n\n    allDocs.rows.forEach(row => {\n      previousRevs[row.id] = row.value ? row.value.rev : null\n    })\n  }\n\n  const saveResults = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      docs: docs.map(doc => {\n        const docToSave = {\n          ...doc,\n          _rev:\n            // fallback to undefined if it is null\n            (upsert && doc._id ? previousRevs[doc._id] : doc._rev) ?? undefined,\n        }\n\n        if (docToSave._deleted === null) {\n          delete docToSave._deleted\n        }\n\n        return docToSave\n      }),\n      new_edits,\n    }),\n  })\n    .then(parseFetchResponse)\n    .then(async res => {\n      // resolve conflicts\n      const conflicts = res.filter(result => result.error === 'conflict')\n\n      if (conflicts.length > 0) {\n        const resolved = await resolveConflicts(\n          docs.filter(doc =>\n            conflicts.find(conflict => conflict.id === doc._id)\n          ),\n          context\n        )\n\n        if (resolved) {\n          // update any \"conflict\" results with the resolved result\n          return res.map(saveResult => {\n            const resolvedDoc = resolved.find(\n              resolvedResult => resolvedResult.id === saveResult.id\n            )\n            if (saveResult.error === 'conflict' && resolvedDoc) {\n              return resolvedDoc\n            }\n\n            return saveResult\n          })\n        }\n      }\n\n      // return bulkDocs data\n      return res\n    })\n\n  const response = saveResults.map((result, index) => {\n    const document = docs[index]\n\n    const _rev = result.error\n      ? // if an error, return the last _rev\n        previousRevs[document._id] || document._rev\n      : // otherwise result.rev will be populated\n        result.rev\n\n    return {\n      _id: result.id,\n      _rev,\n      error: result.error,\n      reason: result.reason,\n      document: {\n        ...document,\n        _id: result.id,\n        _rev,\n      },\n    }\n  })\n\n  if (onDocumentsSaved) {\n    onDocumentsSaved({\n      documents: response.filter(res => !res.error).map(res => res.document),\n      context,\n    })\n  }\n\n  return response\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { bulkDocs } from '../../couchdb/bulkDocs'\n\nexport const typeDefs = gql`\n  type BulkDocsResponseObject {\n    _id: String\n    _rev: String\n    document: JSON\n    error: String\n    reason: String\n  }\n\n  extend type Mutation {\n    bulkDocs(\n      input: [JSON!]!\n      upsert: Boolean\n      new_edits: Boolean\n    ): [BulkDocsResponseObject]\n  }\n`\n\nexport const resolvers = {\n  Mutation: {\n    bulkDocs: createResolver(\n      (parent, { input, upsert, new_edits = true }, context, info) => {\n        return bulkDocs(context, input, { upsert, new_edits })\n      }\n    ),\n  },\n}\n","import queryString from 'qs'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface AllDocsOptions {\n  conflicts?: boolean\n  endkey?: any | any[]\n  include_docs?: boolean\n  inclusive_end?: boolean\n  key?: any | any[]\n  keys?: any | any[]\n  limit?: number\n  skip?: number\n  startkey?: any | any[]\n  update_seq?: boolean\n}\n\nexport interface AllDocsResponse<T = any> {\n  total_rows: number\n  offset: number\n  rows: Array<{\n    id: string\n    rev?: string\n    value?: {\n      rev: string\n    }\n    doc?: T\n  }>\n}\n\nexport async function allDocs<T = any>(\n  context: CouchDbContext,\n  { keys, key, endkey, startkey, ...args }: AllDocsOptions = {}\n): Promise<AllDocsResponse<T>> {\n  const { fetch } = context.couchDb\n  let url = `${context.couchDb.dbUrl}/${context.couchDb.dbName}/_all_docs`\n\n  if (args) {\n    url += `?${queryString.stringify(args)}`\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      keys,\n      key,\n      endkey,\n      startkey,\n    }),\n  }).then(parseFetchResponse)\n\n  return response\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { allDocs } from '../../couchdb/allDocs'\n\nexport const typeDefs = gql`\n  type AllDocsRow {\n    id: String!\n    rev: String\n    value: JSON\n    doc: JSON\n  }\n\n  type AllDocsResponse {\n    total_rows: Int!\n    offset: Int!\n    rows: [AllDocsRow!]!\n  }\n\n  extend type Query {\n    allDocs(\n      conflicts: Boolean\n      endkey: JSON\n      include_docs: Boolean\n      inclusive_end: Boolean\n      key: JSON\n      keys: [JSON!]\n      limit: Int\n      skip: Int\n      startkey: JSON\n      update_seq: Boolean\n    ): AllDocsResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    allDocs: createResolver((parent, args, context, info) => {\n      return allDocs(context, args)\n    }),\n  },\n}\n","import queryString from 'qs'\nimport { CouchDbDocument } from '../types'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface BulkGetOptions {\n  revs?: boolean\n}\n\nexport interface BulkGetResponse<T extends CouchDbDocument> {\n  results: Array<{\n    ok?: T\n    error?: {\n      id: string\n      rev?: string\n      error: string\n      reason: string\n    }\n  }>\n}\n\nexport async function bulkGet<T extends CouchDbDocument>(\n  docs: Array<{ id: string; rev?: string }>,\n  context: CouchDbContext,\n  { revs }: BulkGetOptions = {}\n): Promise<BulkGetResponse<T>> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n  let url = `${dbUrl}/${dbName}/_bulk_get`\n\n  if (revs) {\n    url += `?${queryString.stringify({ revs })}`\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      docs,\n      revs,\n    }),\n  }).then(parseFetchResponse)\n\n  return response\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { bulkGet } from '../../couchdb/bulkGet'\n\n/**\n * Generic GET on a document\n */\nexport const typeDefs = gql`\n  input BulkGetInput {\n    id: String!\n    rev: String\n  }\n\n  type BulkGetResponse {\n    results: [BulkGetResult!]!\n  }\n\n  type BulkGetResult {\n    id: String\n    docs: [BulkGetDocs!]!\n  }\n\n  type BulkGetDocs {\n    ok: JSON\n    error: BulkGetError\n  }\n\n  type BulkGetError {\n    id: String\n    rev: String\n    error: String\n    reason: String\n  }\n\n  extend type Query {\n    bulkGet(docs: [BulkGetInput!]!, revs: Boolean): BulkGetResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    bulkGet: createResolver((parent, { docs, revs }, context, info) => {\n      return bulkGet(docs, context, { revs })\n    }),\n  },\n}\n","import queryString from 'qs'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface ChangesOptions {\n  doc_ids?: string[]\n  conflicts?: boolean\n  descending?: boolean\n  feed?: string\n  filter?: string\n  heartbeat?: number\n  include_docs?: boolean\n  attachments?: boolean\n  att_encoding_info?: boolean\n  lastEventId?: number\n  limit?: number\n  since?: string | number\n  timeout?: number\n  view?: string\n  seq_interval?: number\n}\n\nexport interface ChangesResponse {\n  last_seq: any\n  pending: number\n  results: Array<{\n    changes: Array<{ rev: string }>\n    id: string\n    seq: any\n    doc: any\n    deleted?: boolean\n  }>\n}\nexport async function changes(\n  context: CouchDbContext,\n  options: ChangesOptions\n): Promise<ChangesResponse> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n  const hasArgs = Object.keys(options).length > 0\n  let url = `${context}/${context}/_changes`\n\n  if (hasArgs) {\n    if (options.lastEventId) {\n      delete options.lastEventId\n      options['last-event-id'] = options.lastEventId\n    }\n\n    // if options.since is not 'now', convert to number\n    if (options.since && options.since !== 'now') {\n      options.since = parseInt(options.since as string)\n    }\n\n    url += `?${queryString.stringify(options)}`\n  }\n\n  const response = await fetch(url).then(parseFetchResponse)\n\n  return response\n}\n","import { gql } from 'apollo-server-core'\n\nimport { createResolver } from '../../util/createResolver'\nimport { changes } from '../../couchdb/changes'\n\nexport const typeDefs = gql`\n  type Change {\n    rev: String\n  }\n  type ChangesResult {\n    changes: [Change]\n    id: String\n    seq: JSON\n    doc: JSON\n    deleted: Boolean\n  }\n\n  type ChangesResponse {\n    last_seq: JSON\n    pending: Int\n    results: [ChangesResult]\n  }\n\n  extend type Query {\n    changes(\n      doc_ids: [String!]\n      conflicts: Boolean\n      descending: Boolean\n      feed: String\n      filter: String\n      heartbeat: Int\n      include_docs: Boolean\n      attachments: Boolean\n      att_encoding_info: Boolean\n      lastEventId: Int\n      limit: Int\n      since: String\n      timeout: Int\n      view: String\n      seq_interval: Int\n    ): ChangesResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    changes: createResolver((parent, args, context, info) => {\n      return changes(context, args)\n    }),\n  },\n}\n","import parseFetchResponse from '../util/parseFetchResponse'\nimport { CouchDbContext } from '../createContext'\n\nexport interface FindOptions {\n  selector?: any\n  limit?: number\n  skip?: number\n  sort?: number\n  fields?: string[]\n  use_index?: string[]\n  r?: number\n  bookmark?: string\n  update?: boolean\n  stable?: boolean\n  stale?: string\n  execution_stats?: boolean\n}\n\nexport interface FindResponse<T = any> {\n  execution_stats: any\n  bookmark: any\n  warning: string\n  docs: T[]\n}\n\nexport async function find<T = any>(\n  context: CouchDbContext,\n  options: FindOptions\n): Promise<FindResponse<T>> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n  let url = `${dbUrl}/${dbName}/_find`\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(options),\n  }).then(parseFetchResponse)\n\n  return response\n}\n","import queryString from 'qs'\nimport { CouchDbDocument } from '../types'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface GetOptions {\n  rev?: string\n  revs?: boolean\n  revs_info?: boolean\n  open_revs?: boolean\n  conflicts?: boolean\n  attachments?: boolean\n  latest?: boolean\n}\n\nexport async function get<T extends CouchDbDocument>(\n  context: CouchDbContext,\n  id: string,\n  options: GetOptions = {}\n): Promise<T> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n  const hasArgs = Object.keys(options).length > 0\n  let url = `${dbUrl}/${dbName}/${encodeURIComponent(id)}`\n\n  if (hasArgs) {\n    url += `?${queryString.stringify(options)}`\n  }\n\n  const response = await fetch(url).then(parseFetchResponse)\n\n  return response\n}\n","import { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface InfoResponse {\n  db_name: string\n  update_seq: string\n  sizes: {\n    file: number\n    external: number\n    active: number\n  }\n  purge_seq: number\n  other: {\n    data_size: number\n  }\n  doc_del_count: number\n  doc_count: number\n  disk_size: number\n  disk_format_version: number\n  data_size: number\n  compact_running: Boolean\n  cluster: {\n    q: number\n    n: number\n    w: number\n    r: number\n  }\n  instance_start_time: number\n}\n\nexport async function info(context: CouchDbContext): Promise<InfoResponse> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n  let url = `${dbUrl}/${dbName}`\n\n  const response = await fetch(url).then(parseFetchResponse)\n\n  return response\n}\n","import queryString from 'qs'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface QueryOptions {\n  ddoc: string\n  view: string\n  conflicts?: boolean\n  descending?: boolean\n  endkey?: any | any[]\n  group?: boolean\n  group_level?: number\n  include_docs?: boolean\n  attachments?: boolean\n  att_encoding_info?: boolean\n  inclusive_end?: boolean\n  key?: any | any[]\n  keys?: any | any[]\n  limit?: number\n  reduce?: boolean\n  skip?: number\n  sorted?: boolean\n  stable?: boolean\n  stale?: string\n  startkey?: any | any[]\n  update?: string\n  update_seq?: boolean\n}\n\nexport interface QueryResponse<T> {\n  offset: number\n  update_seq: any | any[]\n  total_rows: number\n  rows: Array<{\n    id: string\n    key?: any | any[]\n    value?: any\n    doc?: T\n  }>\n}\nexport async function query<T = any>(\n  context: CouchDbContext,\n  { view, ddoc, key, keys, ...options }: QueryOptions\n): Promise<QueryResponse<T>> {\n  const { fetch, dbUrl, dbName, onDocumentsSaved } = context.couchDb\n  const postOptions = { key, keys }\n\n  let url = `${dbUrl}/${dbName}/_design/${ddoc}/_view/${view}`\n\n  if (options) {\n    url += `?${queryString.stringify(options)}`\n  }\n\n  const hasArgs = Object.keys(postOptions).length > 0\n  const fetchOptions: any = {}\n  if (hasArgs) {\n    fetchOptions.method = 'POST'\n    fetchOptions.body = JSON.stringify(postOptions)\n    fetchOptions.headers = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    }\n  }\n\n  const response = await fetch(url, fetchOptions).then(parseFetchResponse)\n\n  return response\n}\n","import { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface SearchOptions {\n  index: string\n  ddoc: string\n  query: string\n  bookmark?: string\n  counts?: string[]\n  drilldown?: any\n  group_field?: string\n  group_limit?: number\n  group_sort?: any\n  highlight_fields?: string[]\n  highlight_pre_tag?: string\n  highlight_post_tag?: string\n  highlight_number?: number\n  highlight_size?: number\n  include_docs?: boolean\n  include_fields?: string[]\n  limit?: number\n  ranges?: any\n  sort?: string | string[]\n  stale?: string\n}\n\nexport interface SearchResponse<T> {\n  total_rows: number\n  bookmark: string\n  rows: Array<{\n    id: string\n    order: number[]\n    fields: Record<string, any>\n    doc?: T\n  }>\n  counts?: any\n}\n\nexport async function search<T = any>(\n  context: CouchDbContext,\n  { index, ddoc, ...options }: SearchOptions\n): Promise<SearchResponse<T>> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n\n  let url = `${dbUrl}/${dbName}/_design/${ddoc}/_search/${index}`\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(options),\n  }).then(parseFetchResponse)\n\n  return response\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { find } from '../../couchdb'\n\nexport const typeDefs = gql`\n  type FindResponse {\n    execution_stats: JSON\n    bookmark: String\n    warning: String\n    docs: [JSON!]\n  }\n\n  extend type Query {\n    find(\n      selector: JSON!\n      limit: Int\n      skip: Int\n      sort: Int\n      fields: [String!]\n      use_index: [String!]\n      r: Int\n      bookmark: String\n      update: Boolean\n      stable: Boolean\n      stale: String\n      execution_stats: Boolean\n    ): FindResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    find: createResolver((parent, args, context, info) => {\n      return find(context, args)\n    }),\n  },\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { get } from '../../couchdb'\n\n/**\n * Generic GET on a document\n */\nexport const typeDefs = gql`\n  type GetResponse {\n    _id: String!\n    _rev: String\n    document: JSON\n  }\n\n  extend type Query {\n    get(\n      id: String!\n      rev: String\n      revs: Boolean\n      revs_info: Boolean\n      open_revs: Boolean\n      conflicts: Boolean\n      attachments: Boolean\n      latest: Boolean\n    ): GetResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    get: createResolver(async (parent, { id, ...args }, context, info) => {\n      const document = await get(context, id, args)\n      return {\n        _id: document._id,\n        _rev: document._rev,\n        document,\n      }\n    }),\n  },\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { info } from '../../couchdb/info'\n\nexport const typeDefs = gql`\n  type Sizes {\n    file: Int\n    external: Int\n    active: Int\n  }\n\n  type Other {\n    data_size: Int\n  }\n\n  type Cluster {\n    q: Int\n    n: Int\n    w: Int\n    r: Int\n  }\n\n  type InfoResponse {\n    db_name: String\n    update_seq: String\n    sizes: Sizes\n    purge_seq: Int\n    other: Other\n    doc_del_count: Int\n    doc_count: Int\n    disk_size: Int\n    disk_format_version: Int\n    data_size: Int\n    compact_running: Boolean\n    cluster: Cluster\n    instance_start_time: Int\n  }\n\n  extend type Query {\n    info: InfoResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    info: createResolver((parent, args, context) => {\n      return info(context)\n    }),\n  },\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { query, QueryOptions } from '../../couchdb/query'\n\nexport const typeDefs = gql`\n  type QueryResponse {\n    offset: Int\n    update_seq: JSON\n    total_rows: Int\n    rows: [QueryRow!]\n  }\n\n  type QueryRow {\n    id: String\n    key: JSON\n    value: JSON\n  }\n\n  extend type Query {\n    query(\n      ddoc: String!\n      view: String!\n      conflicts: Boolean\n      descending: Boolean\n      endkey: JSON\n      group: Boolean\n      group_level: Int\n      include_docs: Boolean\n      attachments: Boolean\n      att_encoding_info: Boolean\n      inclusive_end: Boolean\n      key: JSON\n      keys: [JSON!]\n      limit: Int\n      reduce: Boolean\n      skip: Int\n      sorted: Boolean\n      stable: Boolean\n      stale: String\n      startkey: JSON\n      update: String\n      update_seq: Boolean\n    ): QueryResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    query: createResolver<QueryOptions>(async (parent, args, context, info) => {\n      return query(context, args)\n    }),\n  },\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { search, SearchOptions } from '../../couchdb/search'\n\nexport const typeDefs = gql`\n  type SearchResponse {\n    total_rows: Int!\n    bookmark: String!\n    rows: [SearchRow]!\n    counts: JSON\n  }\n\n  type SearchRow {\n    id: String!\n    order: [Int!]!\n    fields: JSON!\n    doc: JSON\n  }\n\n  extend type Query {\n    search(\n      index: String!\n      ddoc: String!\n      bookmark: String\n      counts: [String!]\n      drilldown: JSON\n      group_field: String\n      group_limit: Int\n      group_sort: JSON\n      highlight_fields: [String!]\n      highlight_pre_tag: String\n      highlight_post_tag: String\n      highlight_number: Int\n      highlight_size: Int\n      include_docs: Boolean\n      include_fields: [String!]\n      limit: Int\n      query: String!\n      ranges: JSON\n      sort: [String!]\n      stale: String\n    ): SearchResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    search: createResolver<SearchOptions>(\n      async (parent, args, context, info) => {\n        return search(context, args)\n      }\n    ),\n  },\n}\n","import {\n  GraphQLModule,\n  GraphQLModuleOptions,\n  Resolvers,\n  ModuleContext,\n} from '@graphql-modules/core'\nimport { CouchDbContext } from './createContext'\nimport * as mutations from './graphql/mutations'\nimport * as queries from './graphql/queries'\nimport { base } from './graphql/base'\n\nexport interface CouchDBModuleOptions<\n  Config = any,\n  Session extends object = any,\n  Context = CouchDbContext,\n  SelfResolvers extends Resolvers<any, ModuleContext<Context>> = Resolvers<\n    any,\n    ModuleContext<Context>\n  >\n> extends GraphQLModuleOptions<Config, Session, Context, SelfResolvers> {\n  cloudant?: boolean\n}\n\nexport function createCouchDbModule<\n  Config = any,\n  Session extends object = any,\n  Context = CouchDbContext,\n  SelfResolvers extends Resolvers<any, ModuleContext<Context>> = Resolvers<\n    any,\n    ModuleContext<Context>\n  >\n>(\n  {\n    cloudant,\n    ...options\n  }: CouchDBModuleOptions<Config, Session, Context, SelfResolvers>,\n  moduleConfig?: Config\n) {\n  // separate cloudant queries from couchdb\n  const { search, ...couchdbQueries } = queries\n\n  // combine typeDefs\n  const typeDefs = [\n    base.typeDefs,\n    ...Object.keys(cloudant ? queries : couchdbQueries).map(\n      key => queries[key].typeDefs\n    ),\n    ...Object.keys(mutations).map(key => mutations[key].typeDefs),\n  ]\n\n  if (options.typeDefs) {\n    if (Array.isArray(options.typeDefs)) {\n      typeDefs.push(...options.typeDefs)\n    } else {\n      typeDefs.push(options.typeDefs)\n    }\n  }\n\n  // combine resolvers\n  const resolvers = [\n    ...Object.keys(cloudant ? queries : couchdbQueries).map(\n      key => queries[key].resolvers\n    ),\n    ...Object.keys(mutations).map(key => mutations[key].resolvers),\n  ]\n\n  if (options.resolvers) {\n    if (Array.isArray(options.resolvers)) {\n      resolvers.push(...options.resolvers)\n    } else {\n      resolvers.push(options.resolvers)\n    }\n  }\n\n  return new GraphQLModule(\n    {\n      ...options,\n      typeDefs,\n      resolvers,\n    },\n    moduleConfig\n  )\n}\n","import 'isomorphic-fetch'\nimport { CouchDbDocument } from './types'\n\nexport interface CouchDbContext {\n  couchDb: {\n    dbUrl: string\n    dbName: string\n\n    /**\n     * The fetch function used by the requests made to the couchdb server\n     *\n     * default is node-fetch\n     */\n    fetch: typeof fetch\n\n    onResolveConflict?: <T extends CouchDbDocument>(args: {\n      document: T\n      conflicts: T[]\n      context: CouchDbContext\n    }) => T | Promise<T>\n    onConflictsResolved?: <T extends CouchDbDocument>(args: {\n      documents: T[]\n      context: CouchDbContext\n    }) => any\n    onDocumentsSaved?: <T extends CouchDbDocument>(args: {\n      documents: T[]\n      context: CouchDbContext\n    }) => any\n  }\n}\n\nexport function createContext(args: {\n  dbUrl: CouchDbContext['couchDb']['dbUrl']\n  dbName: CouchDbContext['couchDb']['dbName']\n\n  /**\n   * The fetch function used by the requests made to the couchdb server\n   *\n   * default is node-fetch\n   */\n  fetch?: CouchDbContext['couchDb']['fetch']\n\n  onResolveConflict?: CouchDbContext['couchDb']['onResolveConflict']\n  onConflictsResolved?: CouchDbContext['couchDb']['onConflictsResolved']\n  onDocumentsSaved?: CouchDbContext['couchDb']['onDocumentsSaved']\n}): CouchDbContext {\n  return {\n    couchDb: {\n      fetch,\n      ...args,\n    },\n  }\n}\n"],"names":["base","typeDefs","gql","createResolver","resolver","parseFetchResponse","response","status","json","error","Error","statusText","_a","_b","getConflictsByDocument","documents","context","couchDb","fetch","dbUrl","dbName","method","headers","body","JSON","stringify","keys","map","doc","_id","then","res","rows","row","filter","documentsWithConflictRevs","docs","reduce","conflicts","_conflicts","rev","id","results","ok","conflictingDocuments","result","conflictedDoc","find","d","document","original","revToSave","_rev","resolveConflicts","onResolveConflict","onConflictsResolved","Promise","all","Object","resolvedDocument","resolved","x","resolvedDocs","docsToSave","deleted","docId","conflict","_deleted","resolvedDocuments","length","put","options","onDocumentsSaved","upsert","_c","new_edits","url","undefined","encodeURIComponent","_d","e_1","Array","isArray","reason","savedDocument","resolvers","Mutation","parent","info","input","bulkDocs","previousRevs","ids","i","allDocs","forEach","value","docToSave","resolved_1","saveResult","resolvedDoc","resolvedResult","saveResults","index","key","endkey","startkey","args","queryString","Query","bulkGet","revs","changes","hasArgs","lastEventId","since","parseInt","get","query","view","ddoc","postOptions","fetchOptions","Accept","search","createCouchDbModule","moduleConfig","cloudant","couchdbQueries","queries","mutations","push","GraphQLModule","createContext"],"mappings":"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"}