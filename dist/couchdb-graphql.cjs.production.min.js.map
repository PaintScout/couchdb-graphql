{"version":3,"file":"couchdb-graphql.cjs.production.min.js","sources":["../src/graphql/base.ts","../src/util/createResolver.ts","../src/util/parseFetchResponse.ts","../src/util/resolveConflicts.ts","../src/couchdb/put.ts","../src/couchdb/bulkDocs.ts","../src/graphql/mutations/bulkDocs.ts","../src/graphql/mutations/put.ts","../src/couchdb/allDocs.ts","../src/graphql/queries/allDocs.ts","../src/couchdb/bulkGet.ts","../src/graphql/queries/bulkGet.ts","../src/couchdb/changes.ts","../src/graphql/queries/changes.ts","../src/couchdb/find.ts","../src/couchdb/get.ts","../src/couchdb/info.ts","../src/couchdb/query.ts","../src/couchdb/search.ts","../src/graphql/queries/find.ts","../src/graphql/queries/get.ts","../src/graphql/queries/info.ts","../src/graphql/queries/query.ts","../src/graphql/queries/search.ts","../src/createContext.ts","../src/createCouchDbModule.ts"],"sourcesContent":["import { gql } from 'apollo-server-core'\n\nexport const base = {\n  typeDefs: gql`\n    scalar JSON\n\n    type Query\n    type Mutation\n  `,\n}\n","import { CouchDbContext } from '../createContext'\nimport { GraphQLFieldResolver } from 'graphql'\n\nexport function createResolver<T = any>(\n  resolver: GraphQLFieldResolver<any, CouchDbContext, T>\n) {\n  return resolver\n}\n","export default async function parseFetchResponse(response: Response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response.json()\n  } else {\n    const error = new Error(response.statusText)\n\n    // @ts-ignore\n    error.response = await response.json()\n    throw error\n  }\n}\n","import { CouchDbContext } from '../createContext'\nimport parseFetchResponse from './parseFetchResponse'\n\n/**\n * Returns an object where the key is the doc id and the value is the rejected document\n * and full conflicting documents\n */\nasync function getConflictsByDocument(\n  documents: any[],\n  context: CouchDbContext\n): Promise<\n  Record<string, { document: any; conflicts: any[]; revToSave: string }>\n> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n\n  // get _conflicts for each document\n  const documentsWithConflictRevs = await fetch(\n    `${dbUrl}/${dbName}/_all_docs?conflicts=true&include_docs=true`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        keys: documents.map(doc => doc._id),\n      }),\n    }\n  )\n    .then(parseFetchResponse)\n    .then(res => {\n      return res.rows.map(row => row.doc).filter(doc => !!doc)\n    })\n\n  // get full document for each _conflict\n  const conflictingDocuments = await fetch(`${dbUrl}/${dbName}/_bulk_get`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      docs: documentsWithConflictRevs.reduce(\n        (conflicts, doc) => [\n          ...conflicts,\n          ...((doc && doc._conflicts) || []).map(rev => ({\n            id: doc._id,\n            rev,\n          })),\n        ],\n        []\n      ),\n    }),\n  })\n    .then(parseFetchResponse)\n    .then(res => res.results.map(row => row.docs[0].ok).filter(doc => !!doc))\n\n  const result = documentsWithConflictRevs.reduce((result, doc) => {\n    if (!result[doc._id]) {\n      const conflictedDoc = documentsWithConflictRevs.find(\n        d => d._id === doc._id\n      )\n\n      result[doc._id] = {\n        // the document rejected by the conflict\n        document: documents.find(original => original._id === doc._id),\n        // add the stored document in the conflicts array\n        conflicts: [doc],\n        revToSave: conflictedDoc._rev,\n      }\n    }\n\n    // check if any _conflicts were for this document\n    const conflicts = conflictingDocuments.filter(d => d._id === doc._id)\n\n    if (conflicts) {\n      return {\n        ...result,\n        [doc._id]: {\n          ...result[doc._id],\n          conflicts: [...result[doc._id].conflicts, ...conflicts],\n        },\n      }\n    }\n\n    return result\n  }, {})\n\n  return result\n}\n\n/**\n * Resolves conflicts by calling context.onResolveConflict and saving its result\n */\nexport async function resolveConflicts(\n  documents: any[],\n  context: CouchDbContext\n) {\n  const {\n    fetch,\n    dbName,\n    dbUrl,\n    onResolveConflict,\n    onConflictsResolved,\n  } = context.couchDb\n  if (!onResolveConflict) {\n    return null\n  }\n\n  const conflictingDocuments = await getConflictsByDocument(documents, context)\n\n  const resolvedDocs = await Promise.all(\n    Object.keys(conflictingDocuments).map(async id => {\n      const resolvedDocument = await onResolveConflict!({\n        document: conflictingDocuments[id].document,\n        conflicts: conflictingDocuments[id].conflicts,\n        context,\n      })\n\n      if (resolvedDocument) {\n        const { _conflicts, ...resolved } = resolvedDocument\n        return {\n          ...resolved,\n          _rev: conflictingDocuments[id].revToSave,\n        }\n      }\n    })\n  ).then(res => res.filter(x => !!x))\n\n  const docsToSave = [\n    ...resolvedDocs,\n\n    ...Object.keys(conflictingDocuments).reduce(\n      (deleted, docId) => [\n        ...deleted,\n        ...conflictingDocuments[docId].conflicts\n          .map(conflict => ({\n            ...conflict,\n            _deleted: true,\n          }))\n          .filter(\n            conflict => conflict._rev !== conflictingDocuments[docId].revToSave\n          ),\n      ],\n      [] as any[]\n    ),\n  ]\n\n  const response = await fetch(`${dbUrl}/${dbName}/_bulk_docs`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      docs: docsToSave,\n    }),\n  }).then(parseFetchResponse)\n\n  const resolvedDocuments = response\n    .filter(result => result.ok)\n    .map(result => ({\n      ...docsToSave.find(doc => doc._id === result.id),\n      _rev: result.rev,\n      _id: result.id,\n    }))\n\n  if (onConflictsResolved && resolvedDocuments.length > 0) {\n    onConflictsResolved({\n      documents: resolvedDocuments,\n      context,\n    })\n  }\n  return response\n}\n","import { resolveConflicts } from '../util/resolveConflicts'\nimport { CouchDbDocument } from '../types'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\ninterface PutOptions {\n  upsert?: boolean\n  new_edits?: boolean\n}\n\nexport async function put<T extends CouchDbDocument>(\n  context: CouchDbContext,\n  doc: T,\n  options: PutOptions = {}\n): Promise<T | null> {\n  const { fetch, dbUrl, dbName, onDocumentsSaved } = context.couchDb\n\n  const { upsert, new_edits = true } = options\n  let url = `${dbUrl}/${dbName}/_bulk_docs`\n  let rev = doc._rev\n\n  // get previous _rev for upsert\n  if (upsert) {\n    if (!doc._id) {\n      throw Error('upsert option requires input to contain _id')\n    }\n\n    try {\n      const { _rev } = await fetch(\n        `${dbUrl}/${dbName}/${encodeURIComponent(doc._id)}`\n      ).then(parseFetchResponse)\n      rev = _rev\n    } catch (e) {\n      if (!e.response || e.response.status !== 404) {\n        throw e\n      }\n    }\n  }\n\n  const result = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      docs: [{ ...doc, _rev: rev }],\n      new_edits,\n    }),\n  })\n    .then(parseFetchResponse)\n    .then(async res => {\n      const result = Array.isArray(res) ? res[0] : res\n\n      // resolve conflicts\n      if (result && result.id && result.error === 'conflict') {\n        const [resolved] = await resolveConflicts([doc], context)\n\n        if (resolved) {\n          return resolved\n        }\n      }\n\n      return result\n    })\n\n  if (result && result.error) {\n    throw new Error(result.reason)\n  }\n\n  if (result) {\n    const savedDocument = {\n      ...doc,\n      _id: result.id,\n      _rev: result.rev,\n    }\n\n    if (onDocumentsSaved) {\n      onDocumentsSaved({ documents: [savedDocument], context })\n    }\n\n    return savedDocument\n  } else {\n    // new_edits=false returns empty response\n    return null\n  }\n}\n","import { resolveConflicts } from '../util/resolveConflicts'\nimport { CouchDbDocument } from '../types'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface BulkDocsResponseObject<T extends CouchDbDocument> {\n  _id: string\n  _rev?: string\n  document?: T\n  error?: string\n  reason?: string\n}\n\nexport type BulkDocsResponse<\n  T extends CouchDbDocument\n> = BulkDocsResponseObject<T>[]\n\nexport interface BulkDocsOptions {\n  upsert?: boolean\n  new_edits?: boolean\n}\nexport async function bulkDocs<T extends CouchDbDocument>(\n  context: CouchDbContext,\n  docs: any[],\n  options: BulkDocsOptions = {}\n): Promise<BulkDocsResponse<T>> {\n  const { fetch, dbUrl, dbName, onDocumentsSaved } = context.couchDb\n  const { upsert, new_edits = true } = options\n  let url = `${dbUrl}/${dbName}/_bulk_docs`\n  let previousRevs: Record<string, string> = {}\n\n  // get previous _revs for upsert\n  if (upsert) {\n    const ids: string[] = docs.map(i => i._id).filter(id => !!id)\n\n    const { data: allDocs } = await fetch(`${dbUrl}/${dbName}/_all_docs`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        keys: ids,\n      }),\n    }).then(parseFetchResponse)\n\n    allDocs.rows.forEach(row => {\n      previousRevs[row.id] = row.value ? row.value.rev : null\n    })\n  }\n\n  const saveResults = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      docs: docs.map(doc => ({\n        ...doc,\n        _rev: upsert && doc._id ? previousRevs[doc._id] : doc._rev,\n      })),\n      new_edits,\n    }),\n  })\n    .then(parseFetchResponse)\n    .then(async res => {\n      // resolve conflicts\n      const conflicts = res.filter(result => result.error === 'conflict')\n\n      if (conflicts.length > 0) {\n        const resolved = await resolveConflicts(\n          docs.filter(doc =>\n            conflicts.find(conflict => conflict.id === doc._id)\n          ),\n          context\n        )\n\n        if (resolved) {\n          // update any \"conflict\" results with the resolved result\n          return res.map(saveResult => {\n            const resolvedDoc = resolved.find(\n              resolvedResult => resolvedResult.id === saveResult.id\n            )\n            if (saveResult.error === 'conflict' && resolvedDoc) {\n              return resolvedDoc\n            }\n\n            return saveResult\n          })\n        }\n      }\n\n      // return bulkDocs data\n      return res\n    })\n\n  const response = saveResults.map((result, index) => {\n    const document = docs[index]\n\n    const _rev = result.error\n      ? // if an error, return the last _rev\n        previousRevs[document._id] || document._rev\n      : // otherwise result.rev will be populated\n        result.rev\n\n    return {\n      _id: result.id,\n      _rev,\n      error: result.error,\n      reason: result.reason,\n      document: {\n        ...document,\n        _id: result.id,\n        _rev,\n      },\n    }\n  })\n\n  if (onDocumentsSaved) {\n    onDocumentsSaved({\n      documents: response.filter(res => !res.error).map(res => res.document),\n      context,\n    })\n  }\n\n  return response\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { bulkDocs } from '../../couchdb/bulkDocs'\n\nexport const typeDefs = gql`\n  type BulkDocsResponseObject {\n    _id: String\n    _rev: String\n    document: JSON\n    error: String\n    reason: String\n  }\n\n  extend type Mutation {\n    bulkDocs(\n      input: [JSON!]!\n      upsert: Boolean\n      new_edits: Boolean\n    ): [BulkDocsResponseObject]\n  }\n`\n\nexport const resolvers = {\n  Mutation: {\n    bulkDocs: createResolver(\n      (parent, { input, upsert, new_edits = true }, context, info) => {\n        return bulkDocs(context, input, { upsert, new_edits })\n      }\n    ),\n  },\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { put } from '../../couchdb/put'\n\n/**\n * PUTs a document using _bulk_docs endpoint\n */\nexport const typeDefs = gql`\n  type PutResponse {\n    _id: String!\n    _rev: String\n    document: JSON\n  }\n\n  extend type Mutation {\n    put(input: JSON, upsert: Boolean, new_edits: Boolean): PutResponse\n  }\n`\n\nexport const resolvers = {\n  Mutation: {\n    put: createResolver(\n      async (parent, { input, upsert, new_edits = true }, context, info) => {\n        const document = await put(context, input, { upsert, new_edits })\n\n        return {\n          _id: document._id,\n          _rev: document._rev,\n          document,\n        }\n      }\n    ),\n  },\n}\n","import queryString from 'qs'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface AllDocsOptions {\n  conflicts?: boolean\n  endkey?: any | any[]\n  include_docs?: boolean\n  inclusive_end?: boolean\n  key?: any | any[]\n  keys?: any | any[]\n  limit?: number\n  skip?: number\n  startkey?: any | any[]\n  update_seq?: boolean\n}\n\nexport interface AllDocsResponse<T = any> {\n  total_rows: number\n  offset: number\n  rows: Array<{\n    id: string\n    rev?: string\n    value?: {\n      rev: string\n    }\n    doc?: T\n  }>\n}\n\nexport async function allDocs<T = any>(\n  context: CouchDbContext,\n  { keys, key, endkey, startkey, ...args }: AllDocsOptions = {}\n): Promise<AllDocsResponse<T>> {\n  const { fetch } = context.couchDb\n  let url = `${context.couchDb.dbUrl}/${context.couchDb.dbName}/_all_docs`\n\n  if (args) {\n    url += `?${queryString.stringify(args)}`\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      keys,\n      key,\n      endkey,\n      startkey,\n    }),\n  }).then(parseFetchResponse)\n\n  return response\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { allDocs } from '../../couchdb/allDocs'\n\nexport const typeDefs = gql`\n  type AllDocsRow {\n    id: String!\n    rev: String\n    value: JSON\n    doc: JSON\n  }\n\n  type AllDocsResponse {\n    total_rows: Int!\n    offset: Int!\n    rows: [AllDocsRow!]!\n  }\n\n  extend type Query {\n    allDocs(\n      conflicts: Boolean\n      endkey: JSON\n      include_docs: Boolean\n      inclusive_end: Boolean\n      key: JSON\n      keys: [JSON!]\n      limit: Int\n      skip: Int\n      startkey: JSON\n      update_seq: Boolean\n    ): AllDocsResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    allDocs: createResolver((parent, args, context, info) => {\n      return allDocs(context, args)\n    }),\n  },\n}\n","import queryString from 'qs'\nimport { CouchDbDocument } from '../types'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface BulkGetOptions {\n  revs?: boolean\n}\n\nexport interface BulkGetResponse<T extends CouchDbDocument> {\n  results: Array<{\n    ok?: T\n    error?: {\n      id: string\n      rev?: string\n      error: string\n      reason: string\n    }\n  }>\n}\n\nexport async function bulkGet<T extends CouchDbDocument>(\n  docs: Array<{ id: string; rev?: string }>,\n  context: CouchDbContext,\n  { revs }: BulkGetOptions = {}\n): Promise<BulkGetResponse<T>> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n  let url = `${dbUrl}/${dbName}/_bulk_get`\n\n  if (revs) {\n    url += `?${queryString.stringify({ revs })}`\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      docs,\n      revs,\n    }),\n  }).then(parseFetchResponse)\n\n  return response\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { bulkGet } from '../../couchdb/bulkGet'\n\n/**\n * Generic GET on a document\n */\nexport const typeDefs = gql`\n  input BulkGetInput {\n    id: String!\n    rev: String\n  }\n\n  type BulkGetResponse {\n    results: [BulkGetResult!]!\n  }\n\n  type BulkGetResult {\n    id: String\n    docs: [BulkGetDocs!]!\n  }\n\n  type BulkGetDocs {\n    ok: JSON\n    error: BulkGetError\n  }\n\n  type BulkGetError {\n    id: String\n    rev: String\n    error: String\n    reason: String\n  }\n\n  extend type Query {\n    bulkGet(docs: [BulkGetInput!]!, revs: Boolean): BulkGetResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    bulkGet: createResolver((parent, { docs, revs }, context, info) => {\n      return bulkGet(docs, context, { revs })\n    }),\n  },\n}\n","import queryString from 'qs'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface ChangesOptions {\n  doc_ids?: string[]\n  conflicts?: boolean\n  descending?: boolean\n  feed?: string\n  filter?: string\n  heartbeat?: number\n  include_docs?: boolean\n  attachments?: boolean\n  att_encoding_info?: boolean\n  lastEventId?: number\n  limit?: number\n  since?: string | number\n  timeout?: number\n  view?: string\n  seq_interval?: number\n}\n\nexport interface ChangesResponse {\n  last_seq: any\n  pending: number\n  results: Array<{\n    changes: Array<{ rev: string }>\n    id: string\n    seq: any\n    doc: any\n    deleted?: boolean\n  }>\n}\nexport async function changes(\n  context: CouchDbContext,\n  options: ChangesOptions\n): Promise<ChangesResponse> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n  const hasArgs = Object.keys(options).length > 0\n  let url = `${context}/${context}/_changes`\n\n  if (hasArgs) {\n    if (options.lastEventId) {\n      delete options.lastEventId\n      options['last-event-id'] = options.lastEventId\n    }\n\n    // if options.since is not 'now', convert to number\n    if (options.since && options.since !== 'now') {\n      options.since = parseInt(options.since as string)\n    }\n\n    url += `?${queryString.stringify(options)}`\n  }\n\n  const response = await fetch(url).then(parseFetchResponse)\n\n  return response\n}\n","import { gql } from 'apollo-server-core'\n\nimport { createResolver } from '../../util/createResolver'\nimport { changes } from '../../couchdb/changes'\n\nexport const typeDefs = gql`\n  type Change {\n    rev: String\n  }\n  type ChangesResult {\n    changes: [Change]\n    id: String\n    seq: JSON\n    doc: JSON\n    deleted: Boolean\n  }\n\n  type ChangesResponse {\n    last_seq: JSON\n    pending: Int\n    results: [ChangesResult]\n  }\n\n  extend type Query {\n    changes(\n      doc_ids: [String!]\n      conflicts: Boolean\n      descending: Boolean\n      feed: String\n      filter: String\n      heartbeat: Int\n      include_docs: Boolean\n      attachments: Boolean\n      att_encoding_info: Boolean\n      lastEventId: Int\n      limit: Int\n      since: String\n      timeout: Int\n      view: String\n      seq_interval: Int\n    ): ChangesResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    changes: createResolver((parent, args, context, info) => {\n      return changes(context, args)\n    }),\n  },\n}\n","import parseFetchResponse from '../util/parseFetchResponse'\nimport { CouchDbContext } from '../createContext'\n\nexport interface FindOptions {\n  selector?: any\n  limit?: number\n  skip?: number\n  sort?: number\n  fields?: string[]\n  use_index?: string[]\n  r?: number\n  bookmark?: string\n  update?: boolean\n  stable?: boolean\n  stale?: string\n  execution_stats?: boolean\n}\n\nexport interface FindResponse<T = any> {\n  execution_stats: any\n  bookmark: any\n  warning: string\n  docs: T[]\n}\n\nexport async function find<T = any>(\n  context: CouchDbContext,\n  options: FindOptions\n): Promise<FindResponse<T>> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n  let url = `${dbUrl}/${dbName}/_find`\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(options),\n  }).then(parseFetchResponse)\n\n  return response\n}\n","import queryString from 'qs'\nimport { CouchDbDocument } from '../types'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface GetOptions {\n  rev?: string\n  revs?: boolean\n  revs_info?: boolean\n  open_revs?: boolean\n  conflicts?: boolean\n  attachments?: boolean\n  latest?: boolean\n}\n\nexport async function get<T extends CouchDbDocument>(\n  context: CouchDbContext,\n  id: string,\n  options: GetOptions = {}\n): Promise<T> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n  const hasArgs = Object.keys(options).length > 0\n  let url = `${dbUrl}/${dbName}/${encodeURIComponent(id)}`\n\n  if (hasArgs) {\n    url += `?${queryString.stringify(options)}`\n  }\n\n  const response = await fetch(url).then(parseFetchResponse)\n\n  return response\n}\n","import { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface InfoResponse {\n  db_name: string\n  update_seq: string\n  sizes: {\n    file: number\n    external: number\n    active: number\n  }\n  purge_seq: number\n  other: {\n    data_size: number\n  }\n  doc_del_count: number\n  doc_count: number\n  disk_size: number\n  disk_format_version: number\n  data_size: number\n  compact_running: Boolean\n  cluster: {\n    q: number\n    n: number\n    w: number\n    r: number\n  }\n  instance_start_time: number\n}\n\nexport async function info(context: CouchDbContext): Promise<InfoResponse> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n  let url = `${dbUrl}/${dbName}`\n\n  const response = await fetch(url).then(parseFetchResponse)\n\n  return response\n}\n","import queryString from 'qs'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface QueryOptions {\n  ddoc: string\n  view: string\n  conflicts?: boolean\n  descending?: boolean\n  endkey?: any | any[]\n  group?: boolean\n  group_level?: number\n  include_docs?: boolean\n  attachments?: boolean\n  att_encoding_info?: boolean\n  inclusive_end?: boolean\n  key?: any | any[]\n  keys?: any | any[]\n  limit?: number\n  reduce?: boolean\n  skip?: number\n  sorted?: boolean\n  stable?: boolean\n  stale?: string\n  startkey?: any | any[]\n  update?: string\n  update_seq?: boolean\n}\n\nexport interface QueryResponse<T> {\n  offset: number\n  update_seq: any | any[]\n  total_rows: number\n  rows: Array<{\n    id: string\n    key?: any | any[]\n    value?: any\n    doc?: T\n  }>\n}\nexport async function query<T = any>(\n  context: CouchDbContext,\n  { view, ddoc, key, keys, ...options }: QueryOptions\n): Promise<QueryResponse<T>> {\n  const { fetch, dbUrl, dbName, onDocumentsSaved } = context.couchDb\n  const postOptions = { key, keys }\n\n  let url = `${dbUrl}/${dbName}/_design/${ddoc}/_view/${view}`\n\n  if (options) {\n    url += `?${queryString.stringify(options)}`\n  }\n\n  const hasArgs = Object.keys(postOptions).length > 0\n  const fetchOptions: any = {}\n  if (hasArgs) {\n    fetchOptions.method = 'POST'\n    fetchOptions.body = JSON.stringify(postOptions)\n    fetchOptions.headers = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    }\n  }\n\n  const response = await fetch(url, fetchOptions).then(parseFetchResponse)\n\n  return response\n}\n","import { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface SearchOptions {\n  index: string\n  ddoc: string\n  query: string\n  bookmark?: string\n  counts?: string[]\n  drilldown?: any\n  group_field?: string\n  group_limit?: number\n  group_sort?: any\n  highlight_fields?: string[]\n  highlight_pre_tag?: string\n  highlight_post_tag?: string\n  highlight_number?: number\n  highlight_size?: number\n  include_docs?: boolean\n  include_fields?: string[]\n  limit?: number\n  ranges?: any\n  sort?: string | string[]\n  stale?: string\n}\n\nexport interface SearchResponse<T> {\n  total_rows: number\n  bookmark: string\n  rows: Array<{\n    id: string\n    order: number[]\n    fields: Record<string, any>\n    doc?: T\n  }>\n  counts?: any\n}\n\nexport async function search<T = any>(\n  context: CouchDbContext,\n  { index, ddoc, ...options }: SearchOptions\n): Promise<SearchResponse<T>> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n\n  let url = `${dbUrl}/${dbName}/_design/${ddoc}/_search/${index}`\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(options),\n  }).then(parseFetchResponse)\n\n  return response\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { find } from '../../couchdb'\n\nexport const typeDefs = gql`\n  type FindResponse {\n    execution_stats: JSON\n    bookmark: String\n    warning: String\n    docs: [JSON!]\n  }\n\n  extend type Query {\n    find(\n      selector: JSON!\n      limit: Int\n      skip: Int\n      sort: Int\n      fields: [String!]\n      use_index: [String!]\n      r: Int\n      bookmark: String\n      update: Boolean\n      stable: Boolean\n      stale: String\n      execution_stats: Boolean\n    ): FindResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    find: createResolver((parent, args, context, info) => {\n      return find(context, args)\n    }),\n  },\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { get } from '../../couchdb'\n\n/**\n * Generic GET on a document\n */\nexport const typeDefs = gql`\n  type GetResponse {\n    _id: String!\n    _rev: String\n    document: JSON\n  }\n\n  extend type Query {\n    get(\n      id: String!\n      rev: String\n      revs: Boolean\n      revs_info: Boolean\n      open_revs: Boolean\n      conflicts: Boolean\n      attachments: Boolean\n      latest: Boolean\n    ): GetResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    get: createResolver(async (parent, { id, ...args }, context, info) => {\n      const document = await get(context, id, args)\n      return {\n        _id: document._id,\n        _rev: document._rev,\n        document,\n      }\n    }),\n  },\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { info } from '../../couchdb/info'\n\nexport const typeDefs = gql`\n  type Sizes {\n    file: Int\n    external: Int\n    active: Int\n  }\n\n  type Other {\n    data_size: Int\n  }\n\n  type Cluster {\n    q: Int\n    n: Int\n    w: Int\n    r: Int\n  }\n\n  type InfoResponse {\n    db_name: String\n    update_seq: String\n    sizes: Sizes\n    purge_seq: Int\n    other: Other\n    doc_del_count: Int\n    doc_count: Int\n    disk_size: Int\n    disk_format_version: Int\n    data_size: Int\n    compact_running: Boolean\n    cluster: Cluster\n    instance_start_time: Int\n  }\n\n  extend type Query {\n    info: InfoResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    info: createResolver((parent, args, context) => {\n      return info(context)\n    }),\n  },\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { query, QueryOptions } from '../../couchdb/query'\n\nexport const typeDefs = gql`\n  type QueryResponse {\n    offset: Int\n    update_seq: JSON\n    total_rows: Int\n    rows: [QueryRow!]\n  }\n\n  type QueryRow {\n    id: String\n    key: JSON\n    value: JSON\n  }\n\n  extend type Query {\n    query(\n      ddoc: String!\n      view: String!\n      conflicts: Boolean\n      descending: Boolean\n      endkey: JSON\n      group: Boolean\n      group_level: Int\n      include_docs: Boolean\n      attachments: Boolean\n      att_encoding_info: Boolean\n      inclusive_end: Boolean\n      key: JSON\n      keys: [JSON!]\n      limit: Int\n      reduce: Boolean\n      skip: Int\n      sorted: Boolean\n      stable: Boolean\n      stale: String\n      startkey: JSON\n      update: String\n      update_seq: Boolean\n    ): QueryResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    query: createResolver<QueryOptions>(async (parent, args, context, info) => {\n      return query(context, args)\n    }),\n  },\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { search, SearchOptions } from '../../couchdb/search'\n\nexport const typeDefs = gql`\n  type SearchResponse {\n    total_rows: Int!\n    bookmark: String!\n    rows: [SearchRow]!\n    counts: JSON\n  }\n\n  type SearchRow {\n    id: String!\n    order: [Int!]!\n    fields: JSON!\n    doc: JSON\n  }\n\n  extend type Query {\n    search(\n      index: String!\n      ddoc: String!\n      bookmark: String\n      counts: [String!]\n      drilldown: JSON\n      group_field: String\n      group_limit: Int\n      group_sort: JSON\n      highlight_fields: [String!]\n      highlight_pre_tag: String\n      highlight_post_tag: String\n      highlight_number: Int\n      highlight_size: Int\n      include_docs: Boolean\n      include_fields: [String!]\n      limit: Int\n      query: String!\n      ranges: JSON\n      sort: [String!]\n      stale: String\n    ): SearchResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    search: createResolver<SearchOptions>(\n      async (parent, args, context, info) => {\n        return search(context, args)\n      }\n    ),\n  },\n}\n","import 'isomorphic-fetch'\nimport { CouchDbDocument } from './types'\n\nexport interface CouchDbContext {\n  couchDb: {\n    dbUrl: string\n    dbName: string\n\n    /**\n     * The fetch function used by the requests made to the couchdb server\n     *\n     * default is node-fetch\n     */\n    fetch: typeof fetch\n\n    onResolveConflict?: <T extends CouchDbDocument>(args: {\n      document: T\n      conflicts: T[]\n      context: CouchDbContext\n    }) => T | Promise<T>\n    onConflictsResolved?: <T extends CouchDbDocument>(args: {\n      documents: T[]\n      context: CouchDbContext\n    }) => any\n    onDocumentsSaved?: <T extends CouchDbDocument>(args: {\n      documents: T[]\n      context: CouchDbContext\n    }) => any\n  }\n}\n\nexport function createContext(args: {\n  dbUrl: CouchDbContext['couchDb']['dbUrl']\n  dbName: CouchDbContext['couchDb']['dbName']\n\n  /**\n   * The fetch function used by the requests made to the couchdb server\n   *\n   * default is node-fetch\n   */\n  fetch?: CouchDbContext['couchDb']['fetch']\n\n  onResolveConflict?: CouchDbContext['couchDb']['onResolveConflict']\n  onConflictsResolved?: CouchDbContext['couchDb']['onConflictsResolved']\n  onDocumentsSaved?: CouchDbContext['couchDb']['onDocumentsSaved']\n}): CouchDbContext {\n  return {\n    couchDb: {\n      fetch,\n      ...args,\n    },\n  }\n}\n","import {\n  GraphQLModule,\n  GraphQLModuleOptions,\n  Resolvers,\n  ModuleContext,\n} from '@graphql-modules/core'\nimport { CouchDbContext } from './createContext'\nimport * as mutations from './graphql/mutations'\nimport * as queries from './graphql/queries'\nimport { base } from './graphql/base'\n\nexport interface CouchDBModuleOptions<\n  Config = any,\n  Session extends object = any,\n  Context = CouchDbContext,\n  SelfResolvers extends Resolvers<any, ModuleContext<Context>> = Resolvers<\n    any,\n    ModuleContext<Context>\n  >\n> extends GraphQLModuleOptions<Config, Session, Context, SelfResolvers> {\n  cloudant?: boolean\n}\n\nexport function createCouchDbModule<\n  Config = any,\n  Session extends object = any,\n  Context = CouchDbContext,\n  SelfResolvers extends Resolvers<any, ModuleContext<Context>> = Resolvers<\n    any,\n    ModuleContext<Context>\n  >\n>(\n  {\n    cloudant,\n    ...options\n  }: CouchDBModuleOptions<Config, Session, Context, SelfResolvers>,\n  moduleConfig?: Config\n) {\n  // separate cloudant queries from couchdb\n  const { search, ...couchdbQueries } = queries\n\n  // combine typeDefs\n  const typeDefs = [\n    base.typeDefs,\n    ...Object.keys(cloudant ? queries : couchdbQueries).map(\n      key => queries[key].typeDefs\n    ),\n    ...Object.keys(mutations).map(key => mutations[key].typeDefs),\n  ]\n\n  if (options.typeDefs) {\n    if (Array.isArray(options.typeDefs)) {\n      typeDefs.push(...options.typeDefs)\n    } else {\n      typeDefs.push(options.typeDefs)\n    }\n  }\n\n  // combine resolvers\n  const resolvers = [\n    ...Object.keys(cloudant ? queries : couchdbQueries).map(\n      key => queries[key].resolvers\n    ),\n    ...Object.keys(mutations).map(key => mutations[key].resolvers),\n  ]\n\n  if (options.resolvers) {\n    if (Array.isArray(options.resolvers)) {\n      resolvers.push(...options.resolvers)\n    } else {\n      resolvers.push(options.resolvers)\n    }\n  }\n\n  return new GraphQLModule(\n    {\n      ...options,\n      typeDefs,\n      resolvers,\n    },\n    moduleConfig\n  )\n}\n"],"names":["base","typeDefs","gql","createResolver","resolver","parseFetchResponse","response","status","json","error","Error","statusText","_a","_b","getConflictsByDocument","documents","context","fetch","couchDb","dbUrl","dbName","method","headers","body","JSON","stringify","keys","map","doc","_id","then","res","rows","row","filter","documentsWithConflictRevs","docs","reduce","conflicts","_conflicts","rev","id","results","ok","conflictingDocuments","result","conflictedDoc","find","d","document","original","revToSave","_rev","resolveConflicts","onConflictsResolved","onResolveConflict","Promise","all","Object","resolvedDocument","resolved","x","resolvedDocs","docsToSave","deleted","docId","conflict","_deleted","resolvedDocuments","length","put","options","onDocumentsSaved","new_edits","url","encodeURIComponent","_c","e_1","Array","isArray","reason","savedDocument","bulkDocs","previousRevs","upsert","ids","i","forEach","value","resolved_1","saveResult","resolvedDoc","resolvedResult","saveResults","index","Mutation","parent","info","input","allDocs","key","endkey","startkey","args","queryString","Query","bulkGet","revs","changes","hasArgs","lastEventId","since","parseInt","get","query","view","ddoc","postOptions","fetchOptions","Accept","search","moduleConfig","cloudant","couchdbQueries","queries","mutations","push","resolvers","GraphQLModule"],"mappings":"uQAEaA,EAAO,CAClBC,SAAUC,mGAAG,2ECACC,EACdC,UAEOA,WCNqBC,EAAmBC,kIAC3CA,EAASC,QAAU,KAAOD,EAASC,OAAS,OACvCD,EAASE,4BAEVC,EAAQ,IAAIC,MAAMJ,EAASK,YAGjCC,EAAAH,KAAuBH,EAASE,qBAAhCI,EAAMN,SAAWO,SACXJ,SCDV,SAAeK,EACbC,EACAC,6IAIQC,GAAFL,EAA2BI,EAAQE,iBAA1BC,gBAAOC,0DAKpB,CACEC,OAAQ,OACRC,QAAS,gBACS,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,KAAMX,EAAUY,KAAI,SAAAC,UAAOA,EAAIC,WAIlCC,KAAKzB,GACLyB,MAAK,SAAAC,UACGA,EAAIC,KAAKL,KAAI,SAAAM,UAAOA,EAAIL,OAAKM,QAAO,SAAAN,WAASA,uBAdlDO,EAA4BtB,YAkBCI,EAASE,MAASC,eAAoB,CACvEC,OAAQ,OACRC,QAAS,gBACS,oBAElBC,KAAMC,KAAKC,UAAU,CACnBW,KAAMD,EAA0BE,QAC9B,SAACC,EAAWV,2BACPU,GACEV,GAAOA,EAAIW,YAAe,IAAIZ,KAAI,SAAAa,SAAQ,CAC7CC,GAAIb,EAAIC,IACRW,aAGJ,QAIHV,KAAKzB,GACLyB,MAAK,SAAAC,UAAOA,EAAIW,QAAQf,KAAI,SAAAM,UAAOA,EAAIG,KAAK,GAAGO,MAAIT,QAAO,SAAAN,WAASA,uBAnBhEgB,EAAuB/B,YAqBdsB,EAA0BE,QAAO,SAACQ,EAAQjB,aAClDiB,EAAOjB,EAAIC,KAAM,KACdiB,EAAgBX,EAA0BY,MAC9C,SAAAC,UAAKA,EAAEnB,MAAQD,EAAIC,OAGrBgB,EAAOjB,EAAIC,KAAO,CAEhBoB,SAAUlC,EAAUgC,MAAK,SAAAG,UAAYA,EAASrB,MAAQD,EAAIC,OAE1DS,UAAW,CAACV,GACZuB,UAAWL,EAAcM,UAKvBd,EAAYM,EAAqBV,QAAO,SAAAc,UAAKA,EAAEnB,MAAQD,EAAIC,cAE7DS,2BAEGO,WACFjB,EAAIC,8BACAgB,EAAOjB,EAAIC,OACdS,2BAAeO,EAAOjB,EAAIC,KAAKS,UAAcA,SAK5CO,IACN,qBAQiBQ,EACpBtC,EACAC,2JAGEC,GADIL,EAMFI,EAAQE,eAJVE,WACAD,UAEAmC,yBADAC,0BAOiCzC,EAAuBC,EAAWC,OAH5D,oBAGH4B,EAAuB/B,YAEF2C,QAAQC,IACjCC,OAAOhC,KAAKkB,GAAsBjB,KAAI,SAAMc,iIACXc,EAAmB,CAChDN,SAAUL,EAAqBH,GAAIQ,SACnCX,UAAWM,EAAqBH,GAAIH,UACpCtB,2BAHI2C,EAAmB/C,WAOAgD,WAAaD,EAA9B,4CAEDC,IACHR,KAAMR,EAAqBH,GAAIU,6BAIrCrB,MAAK,SAAAC,UAAOA,EAAIG,QAAO,SAAA2B,WAAOA,uBAhB1BC,EAAejD,SAkBfkD,mBACDD,EAEAJ,OAAOhC,KAAKkB,GAAsBP,QACnC,SAAC2B,EAASC,2BACLD,EACApB,EAAqBqB,GAAO3B,UAC5BX,KAAI,SAAAuC,mCACAA,IACHC,UAAU,OAEXjC,QACC,SAAAgC,UAAYA,EAASd,OAASR,EAAqBqB,GAAOd,gBAGhE,QAImBlC,EAASE,MAASC,gBAAqB,CAC5DC,OAAQ,OACRC,QAAS,gBACS,oBAElBC,KAAMC,KAAKC,UAAU,CACnBW,KAAM2B,MAEPjC,KAAKzB,kBARFC,EAAWO,SAUXuD,EAAoB9D,EACvB4B,QAAO,SAAAW,UAAUA,EAAOF,MACxBhB,KAAI,SAAAkB,mCACAkB,EAAWhB,MAAK,SAAAnB,UAAOA,EAAIC,MAAQgB,EAAOJ,QAC7CW,KAAMP,EAAOL,IACbX,IAAKgB,EAAOJ,QAGZa,GAAuBc,EAAkBC,OAAS,GACpDf,EAAoB,CAClBvC,UAAWqD,EACXpD,eAGGV,mBChKagE,EACpBtD,EACAY,EACA2C,uBAAAA,uJAEQtD,GAAFL,EAA6CI,EAAQE,eAA7BsD,qBAEdC,YAAA5D,EAAqB0D,gBACjCG,GAHWvD,gBAAOC,0BAIlBoB,EAAMZ,EAAIwB,MAFuBmB,SAKjC,gBACG3C,EAAIC,UACDnB,MAAM,gGAIWO,EAClBE,MAASC,MAAUuD,mBAAmB/C,EAAIC,MAC7CC,KAAKzB,kBAFC+C,EAASwB,cAGjBpC,EAAMY,gCAEC9C,UAAkC,MAAtBuE,EAAEvE,SAASC,aACtBsE,8BAKS5D,EAAMyD,EAAK,CAC9BrD,OAAQ,OACRC,QAAS,gBACS,oBAElBC,KAAMC,KAAKC,UAAU,CACnBW,KAAM,0BAAMR,IAAKwB,KAAMZ,KACvBiC,gBAGD3C,KAAKzB,GACLyB,MAAK,SAAMC,+HACJc,EAASiC,MAAMC,QAAQhD,GAAOA,EAAI,GAAKA,IAG/Bc,EAAOJ,IAAuB,aAAjBI,EAAOpC,SACP4C,EAAiB,CAACzB,GAAMZ,oBAA1C4C,EAAYhD,qBAGVgD,6BAIJf,yBAvBLA,EAAS+B,WA0BD/B,EAAOpC,YACb,IAAIC,MAAMmC,EAAOmC,eAGrBnC,GACIoC,2BACDrD,IACHC,IAAKgB,EAAOJ,GACZW,KAAMP,EAAOL,MAGXgC,GACFA,EAAiB,CAAEzD,UAAW,CAACkE,GAAgBjE,eAG1CiE,OAGA,sBC9DWC,EACpBlE,EACAoB,EACAmC,uBAAAA,2JAEQtD,GAAFL,EAA6CI,EAAQE,eAA7BsD,qBACdC,YAAA5D,EAAqB0D,gBACjCG,GAFWvD,gBAAOC,0BAGlB+D,EAAuC,IAFnCC,EAA6Bb,WAM7Bc,EAAgBjD,EAAKT,KAAI,SAAA2D,UAAKA,EAAEzD,OAAKK,QAAO,SAAAO,WAAQA,QAE1BxB,EAASE,MAASC,eAAoB,CACpEC,OAAQ,OACRC,QAAS,gBACS,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,KAAM2D,MAEPvD,KAAKzB,kBARkBuE,cAUlB5C,KAAKuD,SAAQ,SAAAtD,GACnBkD,EAAalD,EAAIQ,IAAMR,EAAIuD,MAAQvD,EAAIuD,MAAMhD,IAAM,kCAI7BvB,EAAMyD,EAAK,CACnCrD,OAAQ,OACRC,QAAS,gBACS,oBAElBC,KAAMC,KAAKC,UAAU,CACnBW,KAAMA,EAAKT,KAAI,SAAAC,mCACVA,IACHwB,KAAMgC,GAAUxD,EAAIC,IAAMsD,EAAavD,EAAIC,KAAOD,EAAIwB,UAExDqB,gBAGD3C,KAAKzB,GACLyB,MAAK,SAAMC,+HAEJO,EAAYP,EAAIG,QAAO,SAAAW,SAA2B,aAAjBA,EAAOpC,UAEhC4D,OAAS,KACEhB,EACrBjB,EAAKF,QAAO,SAAAN,UACVU,EAAUS,MAAK,SAAAmB,UAAYA,EAASzB,KAAOb,EAAIC,UAEjDb,oBAJIyE,EAAW7E,kBASRmB,EAAIJ,KAAI,SAAA+D,OACPC,EAAcF,EAAS1C,MAC3B,SAAA6C,UAAkBA,EAAenD,KAAOiD,EAAWjD,YAE5B,aAArBiD,EAAWjF,OAAwBkF,EAC9BA,EAGFD,gCAMN3D,4BA1CL8D,EAAcjB,SA6CdtE,EAAWuF,EAAYlE,KAAI,SAACkB,EAAQiD,OAClC7C,EAAWb,EAAK0D,GAEhB1C,EAAOP,EAAOpC,MAEhB0E,EAAalC,EAASpB,MAAQoB,EAASG,KAEvCP,EAAOL,UAEJ,CACLX,IAAKgB,EAAOJ,GACZW,OACA3C,MAAOoC,EAAOpC,MACduE,OAAQnC,EAAOmC,OACf/B,kCACKA,IACHpB,IAAKgB,EAAOJ,GACZW,aAKFoB,GACFA,EAAiB,CACfzD,UAAWT,EAAS4B,QAAO,SAAAH,UAAQA,EAAItB,SAAOkB,KAAI,SAAAI,UAAOA,EAAIkB,YAC7DjC,eAIGV,UCxHF,qDCGiBJ,uOAAG,+MAYF,CACvB6F,SAAU,CACRzB,IAAKnE,GACH,SAAO6F,EAAQpF,EAAqCI,EAASiF,OAA5CC,UAAOd,WAAQvE,cAAA4D,iJACPH,EAAItD,EAASkF,EAAO,CAAEd,SAAQX,+BAE9C,CACL5C,KAHIoB,EAAW2B,UAGD/C,IACduB,KAAMH,EAASG,KACfH,4DDxBc/C,wUAAG,gTAkBF,CACvB6F,SAAU,CACRb,SAAU/E,GACR,SAAC6F,EAAQpF,EAAqCI,EAASiF,OAA7BpF,qBACjBqE,EAASlE,UAAgB,CAAEoE,gBAAQX,0CEI5B0B,EACpBnF,EACAJ,gBAAAA,UAAEc,SAAM0E,QAAKC,WAAQC,aAAUC,gLAEvBtF,EAAUD,EAAQE,cACtBwD,EAAS1D,EAAQE,QAAQC,UAASH,EAAQE,QAAQE,oBAElDmF,IACF7B,GAAO,IAAI8B,EAAY/E,UAAU8E,OAGZtF,EAAMyD,EAAK,CAChCrD,OAAQ,OACRC,QAAS,gBACS,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,OACA0E,MACAC,SACAC,eAEDxE,KAAKzB,oBAXSQ,iBCrCZ,iCAAiBX,ihBAAG,yfA8BF,CACvBuG,MAAO,CACLN,QAAShG,GAAe,SAAC6F,EAAQO,EAAMvF,EAASiF,UACvCE,EAAQnF,EAASuF,kBChBRG,EACpBtE,EACApB,EACAJ,OAAE+F,0JAEM1F,GAAFJ,EAA2BG,EAAQE,eACrCwD,oCAEAiC,IACFjC,GAAO,IAAI8B,EAAY/E,UAAU,CAAEkF,aAGd1F,EAAMyD,EAAK,CAChCrD,OAAQ,OACRC,QAAS,gBACS,oBAElBC,KAAMC,KAAKC,UAAU,CACnBW,OACAuE,WAED7E,KAAKzB,oBATSuE,iBC1BZ,iCAAiB1E,kgBAAG,0eAgCF,CACvBuG,MAAO,CACLC,QAASvG,GAAe,SAAC6F,EAAQpF,EAAgBI,EAASiF,UACjDS,SAAc1F,EAAS,CAAE2F,6BCThBC,EACpB5F,EACAuD,oIAEQtD,EAAyBD,EAAQE,cACnC2F,EAAUnD,OAAOhC,KAAK6C,GAASF,OAAS,EAC1CK,EAAS1D,MAAWA,cAEpB6F,IACEtC,EAAQuC,qBACHvC,EAAQuC,YACfvC,EAAQ,iBAAmBA,EAAQuC,aAIjCvC,EAAQwC,OAA2B,QAAlBxC,EAAQwC,QAC3BxC,EAAQwC,MAAQC,SAASzC,EAAQwC,QAGnCrC,GAAO,IAAI8B,EAAY/E,UAAU8C,OAGZtD,EAAMyD,GAAK5C,KAAKzB,oBAAtBQ,iBClDZ,iCAAiBX,6tBAAG,qsBAuCF,CACvBuG,MAAO,CACLG,QAASzG,GAAe,SAAC6F,EAAQO,EAAMvF,EAASiF,UACvCW,EAAQ5F,EAASuF,kBCtBRxD,EACpB/B,EACAuD,mIAEQtD,GAAFL,EAA2BI,EAAQE,8CAGP,CAChCG,OAAQ,OACRC,QAAS,gBACS,oBAElBC,KAAMC,KAAKC,UAAU8C,KACpBzC,KAAKzB,oBANSQ,0BCjBGoG,EACpBjG,EACAyB,EACA8B,uBAAAA,sIAEQtD,GAAFL,EAA2BI,EAAQE,eAA1BC,UAAOC,WAChByF,EAAUnD,OAAOhC,KAAK6C,GAASF,OAAS,EAC1CK,EAASvD,MAASC,MAAUuD,mBAAmBlC,GAE/CoE,IACFnC,GAAO,IAAI8B,EAAY/E,UAAU8C,OAGZtD,EAAMyD,GAAK5C,KAAKzB,oBAAtBQ,0BCEGoF,EAAKjF,mIACjBC,GAAFL,EAA2BI,EAAQE,sCAGPY,KAAKzB,oBAAtBQ,0BCMGqG,EACpBlG,EACAJ,OAAEuG,SAAMC,SAAMhB,QAAK1E,SAAM6C,kLAEjBtD,GAAFJ,EAA6CG,EAAQE,eACrDmG,EAAc,CAAEjB,MAAK1E,QAEvBgD,mCAAoC0C,YAAcD,EAElD5C,IACFG,GAAO,IAAI8B,EAAY/E,UAAU8C,IAG7BsC,EAAUnD,OAAOhC,KAAK2F,GAAahD,OAAS,EAC5CiD,EAAoB,GACtBT,IACFS,EAAajG,OAAS,OACtBiG,EAAa/F,KAAOC,KAAKC,UAAU4F,GACnCC,EAAahG,QAAU,CACrBiG,OAAQ,kCACQ,wBAIGtG,EAAMyD,EAAK4C,GAAcxF,KAAKzB,oBAApCuE,0BC1BG4C,EACpBxG,EACAJ,OAAEkF,UAAOsB,SAAM7C,+JAEPtD,GAAFJ,EAA2BG,EAAQE,iDAEDkG,cAAgBtB,EAEtB,CAChCzE,OAAQ,OACRC,QAAS,gBACS,oBAElBC,KAAMC,KAAKC,UAAU8C,KACpBzC,KAAKzB,oBANSuE,iBC1CZ,yCAAiB1E,ueAAG,+cA0BF,CACvBuG,MAAO,CACL1D,KAAM5C,GAAe,SAAC6F,EAAQO,EAAMvF,EAASiF,UACpClD,EAAK/B,EAASuF,oCC1BHrG,sXAAG,8VAqBF,CACvBuG,MAAO,CACLQ,IAAK9G,GAAe,SAAO6F,EAAQpF,EAAiBI,EAASiF,6DAAxBxD,OAAI8D,4FAChBU,EAAIjG,EAASyB,EAAI8D,oBACjC,CACL1E,KAFIoB,EAAWpC,UAEDgB,IACduB,KAAMH,EAASG,KACfH,qDC/BgB/C,omBAAG,4kBAuCF,CACvBuG,MAAO,CACLR,KAAM9F,GAAe,SAAC6F,EAAQO,EAAMvF,UAC3BiF,EAAKjF,oCC1CMd,yyBAAG,ixBA0CF,CACvBuG,MAAO,CACLS,MAAO/G,GAA6B,SAAO6F,EAAQO,EAAMvF,EAASiF,uGACzDiB,EAAMlG,EAASuF,mGC7CJrG,s0BAAG,8yBAyCF,CACvBuG,MAAO,CACLe,OAAQrH,GACN,SAAO6F,EAAQO,EAAMvF,EAASiF,uGACrBuB,EAAOxG,EAASuF,iKClBDA,SAerB,CACLrF,oBACED,aACGsF,0CCjBP3F,EAIA6G,OAHEC,aACAnD,2BAKcoD,yBAGV1H,oBACJD,EAAKC,UACFyD,OAAOhC,KAAKgG,EAAWE,EAAUD,GAAgBhG,KAClD,SAAAyE,UAAOwB,EAAQxB,GAAKnG,YAEnByD,OAAOhC,KAAKmG,GAAWlG,KAAI,SAAAyE,UAAOyB,EAAUzB,GAAKnG,aAGlDsE,EAAQtE,WACN6E,MAAMC,QAAQR,EAAQtE,UACxBA,EAAS6H,WAAT7H,EAAiBsE,EAAQtE,UAEzBA,EAAS6H,KAAKvD,EAAQtE,eAKpB8H,mBACDrE,OAAOhC,KAAKgG,EAAWE,EAAUD,GAAgBhG,KAClD,SAAAyE,UAAOwB,EAAQxB,GAAK2B,aAEnBrE,OAAOhC,KAAKmG,GAAWlG,KAAI,SAAAyE,UAAOyB,EAAUzB,GAAK2B,qBAGlDxD,EAAQwD,YACNjD,MAAMC,QAAQR,EAAQwD,WACxBA,EAAUD,WAAVC,EAAkBxD,EAAQwD,WAE1BA,EAAUD,KAAKvD,EAAQwD,YAIpB,IAAIC,yCAEJzD,IACHtE,WACA8H,cAEFN"}