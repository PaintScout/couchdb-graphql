{"version":3,"file":"couchdb-graphql.cjs.production.min.js","sources":["../src/graphql/base.ts","../src/util/createResolver.ts","../src/util/getAxios.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/util/resolveConflicts.ts","../src/couchdb/put.ts","../src/graphql/mutations/put.ts","../src/couchdb/bulkDocs.ts","../src/graphql/mutations/bulkDocs.ts","../src/couchdb/allDocs.ts","../src/graphql/queries/allDocs.ts","../src/couchdb/bulkGet.ts","../src/graphql/queries/bulkGet.ts","../src/couchdb/changes.ts","../src/graphql/queries/changes.ts","../src/couchdb/find.ts","../src/couchdb/get.ts","../src/couchdb/info.ts","../src/couchdb/query.ts","../src/couchdb/search.ts","../src/graphql/queries/find.ts","../src/graphql/queries/get.ts","../src/graphql/queries/info.ts","../src/graphql/queries/query.ts","../src/graphql/queries/search.ts","../src/createSchema.ts"],"sourcesContent":["import { gql } from 'apollo-server-core'\n\nexport const base = {\n  typeDefs: gql`\n    scalar JSON\n  `,\n}\n","import { GraphQLResolverMap } from '@apollographql/apollo-tools'\n\nexport interface CouchDbDocument {\n  _id: string\n  _rev?: string\n  [key: string]: any\n}\n\nexport interface CouchDbContext {\n  dbUrl: string\n  dbName: string\n  onResolveConflict?: <T extends CouchDbDocument>(args: {\n    document: T\n    conflicts: T[]\n    context: CouchDbContext\n  }) => T\n  onConflictsResolved?: <T extends CouchDbDocument>(documents: T[]) => any\n  onDocumentsSaved?: <T extends CouchDbDocument>(documents: T[]) => any\n}\n\nexport function createResolver(resolver: GraphQLResolverMap<CouchDbContext>) {\n  return resolver\n}\n","import axios from 'axios'\n\nexport default function getAxios(context: any) {\n  return axios.create({\n    headers: context.dbHeaders,\n  })\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && !check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { CouchDbContext } from './createResolver'\nimport getAxios from './getAxios'\n\n/**\n * Returns an object where the key is the doc id and the value is the rejected document\n * and full conflicting documents\n */\nasync function getConflictsByDocument(\n  documents: any[],\n  context: CouchDbContext\n): Promise<\n  Record<string, { document: any; conflicts: any[]; revToSave: string }>\n> {\n  // get _conflicts for each document\n  const documentsWithConflictRevs = await getAxios(context)\n    .post(\n      `${context.dbUrl}/${context.dbName}/_all_docs?conflicts=true&include_docs=true`,\n      {\n        keys: documents.map(doc => doc._id),\n      }\n    )\n    .then(res => res.data.rows.map(row => row.doc))\n\n  // get full document for each _conflict\n  const conflictingDocuments = await getAxios(context)\n    .post(`${context.dbUrl}/${context.dbName}/_bulk_get`, {\n      docs: documentsWithConflictRevs.reduce(\n        (conflicts, doc) => [\n          ...conflicts,\n          ...(doc._conflicts || []).map(rev => ({\n            id: doc._id,\n            rev,\n          })),\n        ],\n        []\n      ),\n    })\n    .then(res =>\n      res.data.results.map(row => row.docs[0].ok).filter(doc => !!doc)\n    )\n\n  const result = documentsWithConflictRevs.reduce((result, doc) => {\n    if (!result[doc._id]) {\n      const conflictedDoc = documentsWithConflictRevs.find(\n        d => d._id === doc._id\n      )\n\n      result[doc._id] = {\n        // the document rejected by the conflict\n        document: documents.find(original => original._id === doc._id),\n        // all conflicts in the db including the one with _conflicts\n        conflicts: [doc],\n        revToSave: conflictedDoc._rev,\n      }\n    }\n\n    // check if any _conflicts were for this document\n    const conflicts = conflictingDocuments.filter(d => d._id === doc._id)\n\n    if (conflicts) {\n      return {\n        ...result,\n        [doc._id]: {\n          ...result[doc._id],\n          conflicts: [...result[doc._id].conflicts, ...conflicts],\n        },\n      }\n    }\n\n    return result\n  }, {})\n\n  return result\n}\n\n/**\n * Resolves conflicts by calling context.onResolveConflict and saving its result\n */\nexport async function resolveConflicts(\n  documents: any[],\n  context: CouchDbContext\n) {\n  if (!context.onResolveConflict) {\n    return null\n  }\n\n  const conflictingDocuments = await getConflictsByDocument(documents, context)\n\n  const resolvedDocs = await Promise.all(\n    Object.keys(conflictingDocuments).map(async id => {\n      const { _conflicts, ...resolved } = await context.onResolveConflict!({\n        document: conflictingDocuments[id].document,\n        conflicts: conflictingDocuments[id].conflicts,\n        context,\n      })\n\n      return {\n        ...resolved,\n        _rev: conflictingDocuments[id].revToSave,\n      }\n    })\n  )\n\n  const docsToSave = [\n    ...resolvedDocs,\n\n    ...Object.keys(conflictingDocuments).reduce(\n      (deleted, docId) => [\n        ...deleted,\n        ...conflictingDocuments[docId].conflicts\n          .map(conflict => ({\n            ...conflict,\n            _deleted: true,\n          }))\n          .filter(\n            conflict => conflict._rev !== conflictingDocuments[docId].revToSave\n          ),\n      ],\n      [] as any[]\n    ),\n  ]\n\n  const response = await getAxios(context).post(\n    `${context.dbUrl}/${context.dbName}/_bulk_docs`,\n    {\n      docs: docsToSave,\n    }\n  )\n\n  if (context.onConflictsResolved) {\n    context.onConflictsResolved(\n      response.data\n        .filter(result => result.ok)\n        .map(result => ({\n          ...docsToSave.find(doc => doc._id === result.id),\n          _rev: result.rev,\n          _id: result.id,\n        }))\n    )\n  }\n  return response.data\n}\n","import getAxios from '../util/getAxios'\nimport { resolveConflicts } from '../util/resolveConflicts'\nimport { CouchDbContext, CouchDbDocument } from '../util/createResolver'\n\ninterface PutOptions {\n  upsert?: boolean\n  new_edits?: boolean\n}\n\nexport async function put<T extends CouchDbDocument>(\n  context: CouchDbContext,\n  doc: T,\n  options: PutOptions = {}\n): Promise<T | null> {\n  const { upsert, new_edits = true } = options\n  let url = `${context.dbUrl}/${context.dbName}/_bulk_docs`\n  let rev = doc._rev\n\n  // get previous _rev for upsert\n  if (upsert) {\n    if (!doc._id) {\n      throw Error('upsert option requires input to contain _id')\n    }\n\n    try {\n      const {\n        data: { _rev },\n      } = await getAxios(context).get(\n        `${context.dbUrl}/${context.dbName}/${encodeURIComponent(doc._id)}`\n      )\n      rev = _rev\n    } catch (e) {\n      if (!e.response || e.response.status !== 404) {\n        throw e\n      }\n    }\n  }\n\n  const result = await getAxios(context)\n    .post(url, {\n      docs: [{ ...doc, _rev: rev }],\n      new_edits,\n    })\n    .then(async res => {\n      const [result] = res.data\n\n      // resolve conflicts\n      if (result && result.id && result.error === 'conflict') {\n        const resolved = await resolveConflicts([doc], context)\n\n        return resolved[0]\n      }\n\n      return result\n    })\n\n  if (result && result.error) {\n    throw new Error(result.reason)\n  }\n\n  if (result) {\n    const savedDocument = {\n      ...doc,\n      _id: result.id,\n      _rev: result.rev,\n    }\n\n    if (context.onDocumentsSaved) {\n      context.onDocumentsSaved([savedDocument])\n    }\n\n    return savedDocument\n  } else {\n    // new_edits=false returns empty response\n    return null\n  }\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { put } from '../../couchdb/put'\n\n/**\n * PUTs a document using _bulk_docs endpoint\n */\nexport const typeDefs = gql`\n  type PutResponse {\n    _id: String!\n    _rev: String\n    document: JSON\n  }\n\n  extend type Mutation {\n    put(input: JSON, upsert: Boolean, new_edits: Boolean): PutResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Mutation: {\n    put: async (parent, { input, upsert, new_edits = true }, context, info) => {\n      const document = await put(context, input, { upsert, new_edits })\n\n      return {\n        _id: document._id,\n        _rev: document._rev,\n        document,\n      }\n    },\n  },\n})\n","import getAxios from '../util/getAxios'\nimport { resolveConflicts } from '../util/resolveConflicts'\nimport { CouchDbDocument, CouchDbContext } from '../util/createResolver'\n\nexport interface BulkDocsResponseObject {\n  _id: String\n  _rev?: String\n  document?: CouchDbDocument\n  error?: String\n  reason?: String\n}\n\nexport type BulkDocsResponse = Array<BulkDocsResponseObject>\n\nexport interface BulkDocsOptions {\n  upsert?: boolean\n  new_edits?: boolean\n}\nexport async function bulkDocs(\n  context: CouchDbContext,\n  docs: CouchDbDocument[],\n  options: BulkDocsOptions = {}\n): Promise<BulkDocsResponse> {\n  const { upsert, new_edits = true } = options\n  let url = `${context.dbUrl}/${context.dbName}/_bulk_docs`\n  let previousRevs: Record<string, string> = {}\n\n  // get previous _revs for upsert\n  if (upsert) {\n    const ids: string[] = docs.map(i => i._id).filter(id => !!id)\n\n    const { data: allDocs } = await getAxios(context).post(\n      `${context.dbUrl}/${context.dbName}/_all_docs`,\n      {\n        keys: ids,\n      }\n    )\n\n    allDocs.rows.forEach(row => {\n      previousRevs[row.id] = row.value ? row.value.rev : null\n    })\n  }\n\n  const saveResults = await getAxios(context)\n    .post(url, {\n      docs: docs.map(doc => ({\n        ...doc,\n        _rev: upsert && doc._id ? previousRevs[doc._id] : doc._rev,\n      })),\n      new_edits,\n    })\n    .then(async res => {\n      // resolve conflicts\n      const conflicts = res.data.filter(result => result.error === 'conflict')\n\n      if (conflicts.length > 0) {\n        const resolved = await resolveConflicts(\n          docs.filter(doc =>\n            conflicts.find(conflict => conflict.id === doc._id)\n          ),\n          context\n        )\n\n        if (resolved) {\n          // update any \"conflict\" results with the resolved result\n          return res.data.map(saveResult => {\n            const resolvedDoc = resolved.find(\n              resolvedResult => resolvedResult.id === saveResult.id\n            )\n            if (saveResult.error === 'conflict' && resolvedDoc) {\n              return resolvedDoc\n            }\n\n            return saveResult\n          })\n        }\n      }\n\n      // return bulkDocs data\n      return res.data\n    })\n\n  const response = saveResults.map((result, index) => {\n    const document = docs[index]\n\n    const _rev = result.error\n      ? // if an error, return the last _rev\n        previousRevs[document._id] || document._rev\n      : // otherwise result.rev will be populated\n        result.rev\n\n    return {\n      _id: result.id,\n      _rev,\n      error: result.error,\n      reason: result.reason,\n      document: {\n        ...document,\n        _id: result.id,\n        _rev,\n      },\n    }\n  })\n\n  if (context.onDocumentsSaved) {\n    context.onDocumentsSaved(\n      response.filter(res => !res.error).map(res => res.document)\n    )\n  }\n\n  return response\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { bulkDocs } from '../../couchdb/bulkDocs'\n\nexport const typeDefs = gql`\n  type BulkDocsResponseObject {\n    _id: String\n    _rev: String\n    document: JSON\n    error: String\n    reason: String\n  }\n\n  extend type Mutation {\n    bulkDocs(\n      input: [JSON!]!\n      upsert: Boolean\n      new_edits: Boolean\n    ): [BulkDocsResponseObject]\n  }\n`\n\nexport const resolvers = createResolver({\n  Mutation: {\n    bulkDocs: async (\n      parent,\n      { input, upsert, new_edits = true },\n      context,\n      info\n    ) => {\n      return bulkDocs(context, input, { upsert, new_edits })\n    },\n  },\n})\n","import queryString from 'qs'\nimport getAxios from '../util/getAxios'\nimport { CouchDbContext } from '../util/createResolver'\n\nexport interface AllDocsOptions {\n  conflicts?: boolean\n  endkey?: any | any[]\n  include_docs?: boolean\n  inclusive_end?: boolean\n  key?: any | any[]\n  keys?: any | any[]\n  limit?: number\n  skip?: number\n  startkey?: any | any[]\n  update_seq?: boolean\n}\n\nexport async function allDocs(\n  context: CouchDbContext,\n  { keys, key, endkey, startkey, ...args }: AllDocsOptions = {}\n) {\n  let url = `${context.dbUrl}/${context.dbName}/_all_docs`\n\n  if (args) {\n    url += `?${queryString.stringify(args)}`\n  }\n\n  const response = await getAxios(context).post(url, {\n    keys,\n    key,\n    endkey,\n    startkey,\n  })\n\n  return response.data\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { allDocs } from '../../couchdb/allDocs'\n\nexport const typeDefs = gql`\n  type AllDocsRow {\n    id: String!\n    rev: String\n    value: JSON\n    doc: JSON\n  }\n\n  type AllDocsResponse {\n    total_rows: Int!\n    offset: Int!\n    rows: [AllDocsRow!]!\n  }\n\n  extend type Query {\n    allDocs(\n      conflicts: Boolean\n      endkey: JSON\n      include_docs: Boolean\n      inclusive_end: Boolean\n      key: JSON\n      keys: [JSON!]\n      limit: Int\n      skip: Int\n      startkey: JSON\n      update_seq: Boolean\n    ): AllDocsResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    allDocs: async (parent, args, context, info) => {\n      return allDocs(context, args)\n    },\n  },\n})\n","import getAxios from '../util/getAxios'\nimport queryString from 'qs'\nimport { CouchDbContext, CouchDbDocument } from '../util/createResolver'\n\nexport interface BulkGetOptions {\n  revs?: boolean\n}\n\nexport interface BulkGetResponse {\n  results: Array<{\n    ok?: CouchDbDocument\n    error?: {\n      id: string\n      rev?: string\n      error: string\n      reason: string\n    }\n  }>\n}\n\nexport async function bulkGet(\n  docs: Array<{ id: string; rev: string }>,\n  context: CouchDbContext,\n  { revs }: BulkGetOptions\n): Promise<BulkGetResponse> {\n  let url = `${context.dbUrl}/${context.dbName}/_bulk_get`\n\n  if (revs) {\n    url += `?${queryString.stringify({ revs })}`\n  }\n\n  const response = await getAxios(context).post(url, {\n    docs,\n    revs,\n  })\n\n  return response.data\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { bulkGet } from '../../couchdb/bulkGet'\n\n/**\n * Generic GET on a document\n */\nexport const typeDefs = gql`\n  input BulkGetInput {\n    id: String!\n    rev: String\n  }\n\n  type BulkGetResponse {\n    results: [BulkGetResult!]!\n  }\n\n  type BulkGetResult {\n    id: String\n    docs: [BulkGetDocs!]!\n  }\n\n  type BulkGetDocs {\n    ok: JSON\n    error: BulkGetError\n  }\n\n  type BulkGetError {\n    id: String\n    rev: String\n    error: String\n    reason: String\n  }\n\n  extend type Query {\n    bulkGet(docs: [BulkGetInput!]!, revs: Boolean): BulkGetResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    bulkGet: async (parent, { docs, revs }, context, info) => {\n      return bulkGet(docs, context, { revs })\n    },\n  },\n})\n","import getAxios from '../util/getAxios'\nimport queryString from 'qs'\nimport { CouchDbContext } from '../util/createResolver'\n\nexport interface ChangesOptions {\n  doc_ids?: string[]\n  conflicts?: boolean\n  descending?: boolean\n  feed?: string\n  filter?: string\n  heartbeat?: number\n  include_docs?: boolean\n  attachments?: boolean\n  att_encoding_info?: boolean\n  lastEventId?: number\n  limit?: number\n  since?: string | number\n  timeout?: number\n  view?: string\n  seq_interval?: number\n}\n\nexport interface ChangesResponse {\n  last_seq: any\n  pending: number\n  results: Array<{\n    changes: Array<{ rev: string }>\n    id: string\n    seq: any\n    doc: any\n    deleted?: boolean\n  }>\n}\nexport async function changes(\n  context: CouchDbContext,\n  options: ChangesOptions\n): Promise<ChangesResponse> {\n  const hasArgs = Object.keys(options).length > 0\n  let url = `${context.dbUrl}/${context.dbName}/_changes`\n\n  if (hasArgs) {\n    if (options.lastEventId) {\n      delete options.lastEventId\n      options['last-event-id'] = options.lastEventId\n    }\n\n    // if options.since is not 'now', convert to number\n    if (options.since && options.since !== 'now') {\n      options.since = parseInt(options.since as string)\n    }\n\n    url += `?${queryString.stringify(options)}`\n  }\n\n  const response = await getAxios(context).get(url)\n\n  return response.data\n}\n","import { gql } from 'apollo-server-core'\n\nimport { createResolver } from '../../util/createResolver'\nimport { changes } from '../../couchdb/changes'\n\nexport const typeDefs = gql`\n  type Change {\n    rev: String\n  }\n  type ChangesResult {\n    changes: [Change]\n    id: String\n    seq: JSON\n    doc: JSON\n    deleted: Boolean\n  }\n\n  type ChangesResponse {\n    last_seq: JSON\n    pending: Int\n    results: [ChangesResult]\n  }\n\n  extend type Query {\n    changes(\n      doc_ids: [String!]\n      conflicts: Boolean\n      descending: Boolean\n      feed: String\n      filter: String\n      heartbeat: Int\n      include_docs: Boolean\n      attachments: Boolean\n      att_encoding_info: Boolean\n      lastEventId: Int\n      limit: Int\n      since: String\n      timeout: Int\n      view: String\n      seq_interval: Int\n    ): ChangesResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    changes: async (parent, args, context, info) => {\n      return changes(context, args)\n    },\n  },\n})\n","import { CouchDbContext } from '../util/createResolver'\nimport getAxios from '../util/getAxios'\n\nexport interface FindOptions {\n  selector?: any\n  limit?: number\n  skip?: number\n  sort?: number\n  fields?: string[]\n  use_index?: string[]\n  r?: number\n  bookmark?: string\n  update?: boolean\n  stable?: boolean\n  stale?: string\n  execution_stats?: boolean\n}\n\nexport interface FindResponse {\n  execution_stats: any\n  bookmark: any\n  warning: string\n  docs: any[]\n}\n\nexport async function find(context: CouchDbContext, options: FindOptions) {\n  let url = `${context.dbUrl}/${context.dbName}/_find`\n\n  const response = await getAxios(context).post(url, options)\n\n  return response.data\n}\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../util/getAxios'\nimport queryString from 'qs'\nimport { CouchDbContext, CouchDbDocument } from '../util/createResolver'\n\nexport interface GetOptions {\n  rev?: string\n  revs?: boolean\n  revs_info?: boolean\n  open_revs?: boolean\n  conflicts?: boolean\n  attachments?: boolean\n  latest?: boolean\n}\n\nexport async function get(\n  context: CouchDbContext,\n  id: string,\n  options: GetOptions = {}\n): Promise<CouchDbDocument> {\n  const hasArgs = Object.keys(options).length > 0\n  let url = `${context.dbUrl}/${context.dbName}/${encodeURIComponent(id)}`\n\n  if (hasArgs) {\n    url += `?${queryString.stringify(options)}`\n  }\n\n  const response = await getAxios(context).get(url)\n\n  return response.data\n}\n","import getAxios from '../util/getAxios'\nimport { CouchDbContext } from '../util/createResolver'\n\nexport interface InfoResponse {\n  db_name: string\n  update_seq: string\n  sizes: {\n    file: number\n    external: number\n    active: number\n  }\n  purge_seq: number\n  other: {\n    data_size: number\n  }\n  doc_del_count: number\n  doc_count: number\n  disk_size: number\n  disk_format_version: number\n  data_size: number\n  compact_running: Boolean\n  cluster: {\n    q: number\n    n: number\n    w: number\n    r: number\n  }\n  instance_start_time: number\n}\n\nexport async function info(context: CouchDbContext): Promise<InfoResponse> {\n  let url = `${context.dbUrl}`\n\n  const response = await getAxios(context).get(url)\n\n  return response.data\n}\n","import queryString from 'qs'\nimport { CouchDbContext } from '../util/createResolver'\nimport getAxios from '../util/getAxios'\n\nexport interface QueryOptions {\n  ddoc: string\n  view: string\n  conflicts?: boolean\n  descending?: boolean\n  endkey?: any | any[]\n  group?: boolean\n  group_level?: number\n  include_docs?: boolean\n  attachments?: boolean\n  att_encoding_info?: boolean\n  inclusive_end?: boolean\n  key?: any | any[]\n  keys: any | any[]\n  limit?: number\n  reduce?: boolean\n  skip?: number\n  sorted?: boolean\n  stable?: boolean\n  stale: String\n  startkey?: any | any[]\n  update?: String\n  update_seq?: boolean\n}\n\nexport interface QueryResponse {\n  offset: number\n  update_seq: any | any[]\n  total_rows: number\n  rows: Array<{\n    id: String\n    key?: any | any[]\n    value?: any\n  }>\n}\nexport async function query(\n  context: CouchDbContext,\n  { view, ddoc, ...options }: QueryOptions\n): Promise<QueryResponse> {\n  let url = `${context.dbUrl}/${context.dbName}/_design/${ddoc}/_view/${view}`\n\n  const hasArgs = Object.keys(options).length > 0\n  if (hasArgs) {\n    url += `?${queryString.stringify(options)}`\n  }\n\n  const response = await getAxios(context).get(url)\n\n  return response.data\n}\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../util/getAxios'\nimport { CouchDbContext } from '../util/createResolver'\n\nexport interface SearchOptions {\n  index: string\n  ddoc: string\n  query: string\n  bookmark?: string\n  counts?: string[]\n  drilldown?: any\n  group_field?: string\n  group_limit?: number\n  group_sort?: any\n  highlight_fields?: string[]\n  highlight_pre_tag?: string\n  highlight_post_tag?: string\n  highlight_number?: number\n  highlight_size?: number\n  include_docs?: boolean\n  include_fields?: string[]\n  limit?: number\n  ranges?: any\n  sort?: string | string[]\n  stale?: string\n}\n\nexport interface SearchResponse {\n  total_rows: number\n  bookmark: string\n  rows: Array<{\n    id: String\n    order: number[]\n    fields: Record<string, any>\n  }>\n  counts?: any\n}\n\nexport async function search(\n  context: CouchDbContext,\n  { index, ddoc, ...options }: SearchOptions\n) {\n  let url = `${context.dbUrl}/${context.dbName}/_design/${ddoc}/_search/${index}`\n\n  const response = await getAxios(context).post(url, options)\n\n  return response.data\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { find } from '../../couchdb'\n\nexport const typeDefs = gql`\n  type FindResponse {\n    execution_stats: JSON\n    bookmark: String\n    warning: String\n    docs: [JSON!]\n  }\n\n  extend type Query {\n    find(\n      selector: JSON!\n      limit: Int\n      skip: Int\n      sort: Int\n      fields: [String!]\n      use_index: [String!]\n      r: Int\n      bookmark: String\n      update: Boolean\n      stable: Boolean\n      stale: String\n      execution_stats: Boolean\n    ): FindResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    find: async (parent, args, context, info) => {\n      return find(context, args)\n    },\n  },\n})\n","import { gql } from 'apollo-server-core'\nimport getAxios from '../../util/getAxios'\nimport queryString from 'qs'\nimport { createResolver } from '../../util/createResolver'\nimport { get } from '../../couchdb'\n\n/**\n * Generic GET on a document\n */\nexport const typeDefs = gql`\n  type GetResponse {\n    _id: String!\n    _rev: String\n    document: JSON\n  }\n\n  extend type Query {\n    get(\n      id: String!\n      rev: String\n      revs: Boolean\n      revs_info: Boolean\n      open_revs: Boolean\n      conflicts: Boolean\n      attachments: Boolean\n      latest: Boolean\n    ): GetResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    get: async (parent, { id, ...args }, context, info) => {\n      const document = await get(context, id, args)\n      return {\n        _id: document._id,\n        _rev: document._rev,\n        document,\n      }\n    },\n  },\n})\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { info } from '../../couchdb/info'\n\nexport const typeDefs = gql`\n  type Sizes {\n    file: Int\n    external: Int\n    active: Int\n  }\n\n  type Other {\n    data_size: Int\n  }\n\n  type Cluster {\n    q: Int\n    n: Int\n    w: Int\n    r: Int\n  }\n\n  type InfoResponse {\n    db_name: String\n    update_seq: String\n    sizes: Sizes\n    purge_seq: Int\n    other: Other\n    doc_del_count: Int\n    doc_count: Int\n    disk_size: Int\n    disk_format_version: Int\n    data_size: Int\n    compact_running: Boolean\n    cluster: Cluster\n    instance_start_time: Int\n  }\n\n  extend type Query {\n    info: InfoResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    info: async (parent, args, context) => {\n      return info(context)\n    },\n  },\n})\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { query, QueryOptions } from '../../couchdb/query'\n\nexport const typeDefs = gql`\n  type QueryResponse {\n    offset: Int\n    update_seq: JSON\n    total_rows: Int\n    rows: [QueryRow!]\n  }\n\n  type QueryRow {\n    id: String\n    key: JSON\n    value: JSON\n  }\n\n  extend type Query {\n    query(\n      ddoc: String!\n      view: String!\n      conflicts: Boolean\n      descending: Boolean\n      endkey: JSON\n      group: Boolean\n      group_level: Int\n      include_docs: Boolean\n      attachments: Boolean\n      att_encoding_info: Boolean\n      inclusive_end: Boolean\n      key: JSON\n      keys: [JSON!]\n      limit: Int\n      reduce: Boolean\n      skip: Int\n      sorted: Boolean\n      stable: Boolean\n      stale: String\n      startkey: JSON\n      update: String\n      update_seq: Boolean\n    ): QueryResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    query: async (parent, args, context, info) => {\n      return query(context, args as QueryOptions)\n    },\n  },\n})\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { search, SearchOptions } from '../../couchdb/search'\n\nexport const typeDefs = gql`\n  type SearchResponse {\n    total_rows: Int\n    bookmark: String\n    rows: [SearchRow]\n    counts: JSON\n  }\n\n  type SearchRow {\n    id: String\n    order: [Int]\n    fields: JSON\n  }\n\n  extend type Query {\n    search(\n      index: String!\n      ddoc: String!\n      bookmark: String\n      counts: [String!]\n      drilldown: JSON\n      group_field: String\n      group_limit: Int\n      group_sort: JSON\n      highlight_fields: [String!]\n      highlight_pre_tag: String\n      highlight_post_tag: String\n      highlight_number: Int\n      highlight_size: Int\n      include_docs: Boolean\n      include_fields: [String!]\n      limit: Int\n      query: String!\n      ranges: JSON\n      sort: [String!]\n      stale: String\n    ): SearchResponse\n  }\n`\n\nexport const resolvers = createResolver({\n  Query: {\n    search: async (parent, args, context, info) => {\n      return search(context, args as SearchOptions)\n    },\n  },\n})\n","import { buildFederatedSchema } from '@apollo/federation'\nimport { GraphQLSchemaModule } from 'apollo-server-core'\nimport { base } from './graphql/base'\nimport * as mutations from './graphql/mutations'\nimport * as queries from './graphql/queries'\n\nexport interface CreateSchemaOptions {\n  /**\n   * Includes schemas for cloudant endpoints\n   *\n   * defaults to true\n   */\n  cloudant?: boolean\n  schemas?: GraphQLSchemaModule[]\n}\n\n/**\n * Creates a GraphQL Schema for CouchDB\n */\nexport function createSchema({\n  schemas = [],\n  cloudant = true,\n}: CreateSchemaOptions = {}) {\n  const { search, ...couchdbQueries } = queries\n\n  return buildFederatedSchema([\n    base,\n    ...Object.keys(cloudant ? queries : couchdbQueries).map(\n      key => queries[key]\n    ),\n    ...Object.keys(mutations).map(key => mutations[key]),\n    ...schemas,\n  ])\n}\n"],"names":["base","typeDefs","gql","createResolver","resolver","getAxios","context","axios","create","headers","dbHeaders","Symbol","iterator","asyncIterator","resolveConflicts","documents","onResolveConflict","getConflictsByDocument","conflictingDocuments","Promise","all","Object","keys","map","id","document","conflicts","_rev","revToSave","resolvedDocs","docsToSave","reduce","deleted","docId","conflict","_deleted","filter","post","dbUrl","dbName","docs","response","onConflictsResolved","data","result","ok","find","doc","_id","rev","then","res","rows","row","documentsWithConflictRevs","_conflicts","results","conflictedDoc","d","original","put","options","url","new_edits","error","resolved","Error","reason","savedDocument","onDocumentsSaved","upsert","body","recover","get","encodeURIComponent","e","status","bulkDocs","previousRevs","length","saveResult","resolvedDoc","resolvedResult","saveResults","index","ids","i","forEach","value","_templateObject","Mutation","parent","info","input","allDocs","key","endkey","startkey","args","queryString","stringify","Query","bulkGet","revs","changes","hasArgs","lastEventId","since","parseInt","query","view","ddoc","search","schemas","cloudant","couchdbQueries","queries","buildFederatedSchema","mutations"],"mappings":"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"}