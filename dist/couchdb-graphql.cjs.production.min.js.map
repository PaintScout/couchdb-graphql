{"version":3,"file":"couchdb-graphql.cjs.production.min.js","sources":["../src/graphql/base.ts","../node_modules/regenerator-runtime/runtime.js","../src/util/createResolver.ts","../src/util/parseFetchResponse.ts","../src/util/resolveConflicts.ts","../src/couchdb/put.ts","../src/couchdb/bulkDocs.ts","../src/graphql/mutations/bulkDocs.ts","../src/graphql/mutations/put.ts","../src/couchdb/allDocs.ts","../src/graphql/queries/allDocs.ts","../src/couchdb/bulkGet.ts","../src/graphql/queries/bulkGet.ts","../src/couchdb/changes.ts","../src/graphql/queries/changes.ts","../src/couchdb/find.ts","../src/couchdb/get.ts","../src/couchdb/info.ts","../src/couchdb/query.ts","../src/couchdb/search.ts","../src/couchdb/createDb.ts","../src/graphql/queries/find.ts","../src/graphql/queries/get.ts","../src/graphql/queries/info.ts","../src/graphql/queries/query.ts","../src/graphql/queries/search.ts","../src/createContext.ts","../src/createCouchDbModule.ts"],"sourcesContent":["import { gql } from 'apollo-server-core'\n\nexport const base = {\n  typeDefs: gql`\n    scalar JSON\n\n    type Query\n    type Mutation\n  `,\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import { CouchDbContext } from '../createContext'\nimport { GraphQLFieldResolver } from 'graphql'\n\nexport function createResolver<T = any>(\n  resolver: GraphQLFieldResolver<any, CouchDbContext, T>\n) {\n  return resolver\n}\n","export default async function parseFetchResponse(response: Response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response.json()\n  } else {\n    const error = new Error(response.statusText)\n\n    // @ts-ignore\n    error.response = await response.json()\n    throw error\n  }\n}\n","import { CouchDbContext } from '../createContext'\nimport parseFetchResponse from './parseFetchResponse'\n\n/**\n * Returns an object where the key is the doc id and the value is the rejected document\n * and full conflicting documents\n */\nasync function getConflictsByDocument(\n  documents: any[],\n  context: CouchDbContext\n): Promise<\n  Record<string, { document: any; conflicts: any[]; revToSave: string }>\n> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n\n  // get _conflicts for each document\n  const documentsWithConflictRevs = await fetch(\n    `${dbUrl}/${dbName}/_all_docs?conflicts=true&include_docs=true`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        keys: documents.map(doc => doc._id),\n      }),\n    }\n  )\n    .then(parseFetchResponse)\n    .then(res => {\n      return res.rows.map(row => row.doc).filter(doc => !!doc)\n    })\n\n  // get full document for each _conflict\n  const conflictingDocuments = await fetch(`${dbUrl}/${dbName}/_bulk_get`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      docs: documentsWithConflictRevs.reduce(\n        (conflicts, doc) => [\n          ...conflicts,\n          ...((doc && doc._conflicts) || []).map(rev => ({\n            id: doc._id,\n            rev,\n          })),\n        ],\n        []\n      ),\n    }),\n  })\n    .then(parseFetchResponse)\n    .then(res => res.results.map(row => row.docs[0].ok).filter(doc => !!doc))\n\n  const result = documentsWithConflictRevs.reduce((result, doc) => {\n    if (!result[doc._id]) {\n      const conflictedDoc = documentsWithConflictRevs.find(\n        d => d._id === doc._id\n      )\n\n      result[doc._id] = {\n        // the document rejected by the conflict\n        document: documents.find(original => original._id === doc._id),\n        // add the stored document in the conflicts array\n        conflicts: [doc],\n        revToSave: conflictedDoc._rev,\n      }\n    }\n\n    // check if any _conflicts were for this document\n    const conflicts = conflictingDocuments.filter(d => d._id === doc._id)\n\n    if (conflicts) {\n      return {\n        ...result,\n        [doc._id]: {\n          ...result[doc._id],\n          conflicts: [...result[doc._id].conflicts, ...conflicts],\n        },\n      }\n    }\n\n    return result\n  }, {})\n\n  return result\n}\n\n/**\n * Resolves conflicts by calling context.onResolveConflict and saving its result\n */\nexport async function resolveConflicts(\n  documents: any[],\n  context: CouchDbContext\n) {\n  const {\n    fetch,\n    dbName,\n    dbUrl,\n    onResolveConflict,\n    onConflictsResolved,\n  } = context.couchDb\n  if (!onResolveConflict) {\n    return null\n  }\n\n  const conflictingDocuments = await getConflictsByDocument(documents, context)\n\n  const resolvedDocs = await Promise.all(\n    Object.keys(conflictingDocuments).map(async id => {\n      const resolvedDocument = await onResolveConflict!({\n        document: conflictingDocuments[id].document,\n        conflicts: conflictingDocuments[id].conflicts,\n        context,\n      })\n\n      if (resolvedDocument) {\n        const { _conflicts, ...resolved } = resolvedDocument\n        return {\n          ...resolved,\n          _rev: conflictingDocuments[id].revToSave,\n        }\n      }\n    })\n  ).then(res => res.filter(Boolean))\n\n  const docsToSave = [\n    ...resolvedDocs,\n\n    ...Object.keys(conflictingDocuments).reduce(\n      (deleted, docId) => [\n        ...deleted,\n        ...conflictingDocuments[docId].conflicts\n          .map(conflict => ({\n            ...conflict,\n            _deleted: true,\n          }))\n          .filter(\n            conflict => conflict._rev !== conflictingDocuments[docId].revToSave\n          ),\n      ],\n      [] as any[]\n    ),\n  ]\n\n  const response = await fetch(`${dbUrl}/${dbName}/_bulk_docs`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      docs: docsToSave,\n    }),\n  }).then(parseFetchResponse)\n\n  const resolvedDocuments = response\n    .filter(result => result.ok)\n    .map(result => ({\n      ...docsToSave.find(doc => doc._id === result.id),\n      _rev: result.rev,\n      _id: result.id,\n    }))\n\n  if (onConflictsResolved && resolvedDocuments.length > 0) {\n    onConflictsResolved({\n      documents: resolvedDocuments,\n      context,\n    })\n  }\n\n  return response.map((doc, index) => ({\n    ...resolvedDocs[index],\n    _id: doc.id,\n    _rev: doc.rev,\n  }))\n}\n","import { resolveConflicts } from '../util/resolveConflicts'\nimport { CouchDbDocument } from '../types'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\ninterface PutOptions {\n  upsert?: boolean\n  new_edits?: boolean\n}\n\nexport async function put<T extends CouchDbDocument>(\n  context: CouchDbContext,\n  doc: T,\n  options: PutOptions = {}\n): Promise<T | null> {\n  const { fetch, dbUrl, dbName, onDocumentsSaved } = context.couchDb\n\n  const { upsert, new_edits = true } = options\n  let url = `${dbUrl}/${dbName}/_bulk_docs`\n  let rev = doc._rev ?? undefined // don't let it be null\n\n  // couchdb errors if _deleted is null\n  if (doc._deleted === null) {\n    delete doc._deleted\n  }\n\n  // get previous _rev for upsert\n  if (upsert) {\n    if (!doc._id) {\n      throw Error('upsert option requires input to contain _id')\n    }\n\n    try {\n      const { _rev } = await fetch(\n        `${dbUrl}/${dbName}/${encodeURIComponent(doc._id)}`\n      ).then(parseFetchResponse)\n      rev = _rev\n    } catch (e) {\n      e._id = doc._id\n      if (!e.response || e.response.status !== 404) {\n        throw e\n      }\n    }\n  }\n\n  const result = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      docs: [{ ...doc, _rev: rev }],\n      new_edits,\n    }),\n  })\n    .then(parseFetchResponse)\n    .then(async res => {\n      const result = Array.isArray(res) ? res[0] : res\n\n      // resolve conflicts\n      if (result && result.id && result.error === 'conflict') {\n        const [resolved] = await resolveConflicts([doc], context)\n\n        if (resolved) {\n          return resolved\n        }\n      }\n\n      return { ...doc, _id: result.id, _rev: result.rev }\n    })\n    .catch(err => {\n      err.stack = new Error(err.message).stack + (err.stack ?? '')\n      err._id = doc._id\n\n      throw err\n    })\n\n  if (result && result.error) {\n    const err = new Error(result.reason)\n    // @ts-ignore\n    err._id = doc._id\n\n    throw err\n  }\n\n  if (result) {\n    if (onDocumentsSaved) {\n      onDocumentsSaved({ documents: [result], context })\n    }\n\n    return result\n  } else {\n    // new_edits=false returns empty response\n    return null\n  }\n}\n","import { resolveConflicts } from '../util/resolveConflicts'\nimport { CouchDbDocument } from '../types'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface BulkDocsResponseObject<T extends CouchDbDocument> {\n  _id: string\n  _rev?: string\n  document?: T\n  error?: string\n  reason?: string\n}\n\nexport type BulkDocsResponse<\n  T extends CouchDbDocument\n> = BulkDocsResponseObject<T>[]\n\nexport interface BulkDocsOptions {\n  upsert?: boolean\n  new_edits?: boolean\n}\nexport async function bulkDocs<T extends CouchDbDocument>(\n  context: CouchDbContext,\n  docs: any[],\n  options: BulkDocsOptions = {}\n): Promise<BulkDocsResponse<T>> {\n  const { fetch, dbUrl, dbName, onDocumentsSaved } = context.couchDb\n  const { upsert, new_edits = true } = options\n  let url = `${dbUrl}/${dbName}/_bulk_docs`\n  let previousRevs: Record<string, string> = {}\n\n  // get previous _revs for upsert\n  if (upsert) {\n    const ids: string[] = docs.map(i => i._id).filter(id => !!id)\n\n    const { data: allDocs } = await fetch(`${dbUrl}/${dbName}/_all_docs`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        keys: ids,\n      }),\n    }).then(parseFetchResponse)\n\n    allDocs.rows.forEach(row => {\n      previousRevs[row.id] = row.value ? row.value.rev : null\n    })\n  }\n\n  const saveResults = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      docs: docs.map(doc => {\n        const docToSave = {\n          ...doc,\n          _rev:\n            // fallback to undefined if it is null\n            (upsert && doc._id ? previousRevs[doc._id] : doc._rev) ?? undefined,\n        }\n\n        if (docToSave._deleted === null) {\n          delete docToSave._deleted\n        }\n\n        return docToSave\n      }),\n      new_edits,\n    }),\n  })\n    .then(parseFetchResponse)\n    .then(async res => {\n      // resolve conflicts\n      const conflicts = res.filter(result => result.error === 'conflict')\n\n      if (conflicts.length > 0) {\n        const resolved = await resolveConflicts(\n          docs.filter(doc =>\n            conflicts.find(conflict => conflict.id === doc._id)\n          ),\n          context\n        )\n\n        if (resolved) {\n          // update any \"conflict\" results with the resolved result\n          return res.map(saveResult => {\n            const resolvedDoc = resolved.find(\n              resolvedResult => resolvedResult.id === saveResult.id\n            )\n            if (saveResult.error === 'conflict' && resolvedDoc) {\n              return resolvedDoc\n            }\n\n            return saveResult\n          })\n        }\n      }\n\n      // return bulkDocs data\n      return res\n    })\n    .catch(err => {\n      err.stack = new Error(err.message).stack + (err.stack ?? '')\n      err.ids = docs.map(d => d._id)\n\n      throw err\n    })\n\n  const response = saveResults.map((result, index) => {\n    const document = docs[index]\n\n    const _rev = result.error\n      ? // if an error, return the last _rev\n        previousRevs[document._id] || document._rev\n      : // otherwise result.rev will be populated\n        result.rev\n\n    return {\n      _id: result.id,\n      _rev,\n      error: result.error,\n      reason: result.reason,\n      document: {\n        ...document,\n        _id: result.id,\n        _rev,\n      },\n    }\n  })\n\n  if (onDocumentsSaved) {\n    onDocumentsSaved({\n      documents: response.filter(res => !res.error).map(res => res.document),\n      context,\n    })\n  }\n\n  return response\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { bulkDocs } from '../../couchdb/bulkDocs'\n\nexport const typeDefs = gql`\n  type BulkDocsResponseObject {\n    _id: String\n    _rev: String\n    document: JSON\n    error: String\n    reason: String\n  }\n\n  extend type Mutation {\n    bulkDocs(\n      input: [JSON!]!\n      upsert: Boolean\n      new_edits: Boolean\n    ): [BulkDocsResponseObject]\n  }\n`\n\nexport const resolvers = {\n  Mutation: {\n    bulkDocs: createResolver(\n      (parent, { input, upsert, new_edits = true }, context, info) => {\n        return bulkDocs(context, input, { upsert, new_edits })\n      }\n    ),\n  },\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { put } from '../../couchdb/put'\n\n/**\n * PUTs a document using _bulk_docs endpoint\n */\nexport const typeDefs = gql`\n  type PutResponse {\n    _id: String!\n    _rev: String\n    document: JSON\n  }\n\n  extend type Mutation {\n    put(input: JSON, upsert: Boolean, new_edits: Boolean): PutResponse\n  }\n`\n\nexport const resolvers = {\n  Mutation: {\n    put: createResolver(\n      async (parent, { input, upsert, new_edits = true }, context, info) => {\n        const document = await put(context, input, { upsert, new_edits })\n\n        return {\n          _id: document._id,\n          _rev: document._rev,\n          document,\n        }\n      }\n    ),\n  },\n}\n","import queryString from 'qs'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface AllDocsOptions {\n  conflicts?: boolean\n  endkey?: any | any[]\n  include_docs?: boolean\n  inclusive_end?: boolean\n  key?: any | any[]\n  keys?: any | any[]\n  limit?: number\n  skip?: number\n  startkey?: any | any[]\n  update_seq?: boolean\n}\n\nexport interface AllDocsResponse<T = any> {\n  total_rows: number\n  offset: number\n  rows: Array<{\n    id: string\n    rev?: string\n    value?: {\n      rev: string\n    }\n    doc?: T\n  }>\n}\n\nexport async function allDocs<T = any>(\n  context: CouchDbContext,\n  { keys, key, endkey, startkey, ...args }: AllDocsOptions = {}\n): Promise<AllDocsResponse<T>> {\n  const { fetch } = context.couchDb\n  let url = `${context.couchDb.dbUrl}/${context.couchDb.dbName}/_all_docs`\n\n  if (args) {\n    url += `?${queryString.stringify(args)}`\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      keys,\n      key,\n      endkey,\n      startkey,\n    }),\n  })\n    .then(parseFetchResponse)\n    .catch(err => {\n      err.stack = new Error(err.message).stack + (err.stack ?? '')\n\n      err.body = JSON.stringify({\n        keys,\n        key,\n        endkey,\n        startkey,\n      })\n      throw err\n    })\n\n  return response\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { allDocs } from '../../couchdb/allDocs'\n\nexport const typeDefs = gql`\n  type AllDocsRow {\n    id: String!\n    rev: String\n    value: JSON\n    doc: JSON\n  }\n\n  type AllDocsResponse {\n    total_rows: Int!\n    offset: Int!\n    rows: [AllDocsRow!]!\n  }\n\n  extend type Query {\n    allDocs(\n      conflicts: Boolean\n      endkey: JSON\n      include_docs: Boolean\n      inclusive_end: Boolean\n      key: JSON\n      keys: [JSON!]\n      limit: Int\n      skip: Int\n      startkey: JSON\n      update_seq: Boolean\n    ): AllDocsResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    allDocs: createResolver((parent, args, context, info) => {\n      return allDocs(context, args)\n    }),\n  },\n}\n","import queryString from 'qs'\nimport { CouchDbDocument } from '../types'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface BulkGetOptions {\n  revs?: boolean\n}\n\nexport interface BulkGetResponse<T extends CouchDbDocument> {\n  results: Array<{\n    id: string\n    docs: [\n      {\n        ok?: T\n        error?: {\n          id: string\n          rev?: string\n          error: string\n          reason: string\n        }\n      }\n    ]\n  }>\n}\n\nexport async function bulkGet<T extends CouchDbDocument>(\n  context: CouchDbContext,\n  docs: Array<{ id: string; rev?: string }>,\n  { revs }: BulkGetOptions = {}\n): Promise<BulkGetResponse<T>> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n  let url = `${dbUrl}/${dbName}/_bulk_get`\n\n  if (revs) {\n    url += `?${queryString.stringify({ revs })}`\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      docs,\n      revs,\n    }),\n  })\n    .then(parseFetchResponse)\n    .catch(err => {\n      err.stack = new Error(err.message).stack + (err.stack ?? '')\n      err.body = JSON.stringify({ docs, revs })\n\n      throw err\n    })\n\n  return response\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { bulkGet } from '../../couchdb/bulkGet'\n\n/**\n * Generic GET on a document\n */\nexport const typeDefs = gql`\n  input BulkGetInput {\n    id: String!\n    rev: String\n  }\n\n  type BulkGetResponse {\n    results: [BulkGetResult!]!\n  }\n\n  type BulkGetResult {\n    id: String\n    docs: [BulkGetDocs!]!\n  }\n\n  type BulkGetDocs {\n    ok: JSON\n    error: BulkGetError\n  }\n\n  type BulkGetError {\n    id: String\n    rev: String\n    error: String\n    reason: String\n  }\n\n  extend type Query {\n    bulkGet(docs: [BulkGetInput!]!, revs: Boolean): BulkGetResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    bulkGet: createResolver((parent, { docs, revs }, context, info) => {\n      return bulkGet(docs, context, { revs })\n    }),\n  },\n}\n","import queryString from 'qs'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface ChangesOptions {\n  doc_ids?: string[]\n  conflicts?: boolean\n  descending?: boolean\n  feed?: string\n  filter?: string\n  heartbeat?: number\n  include_docs?: boolean\n  attachments?: boolean\n  att_encoding_info?: boolean\n  lastEventId?: number\n  limit?: number\n  since?: string | number\n  timeout?: number\n  view?: string\n  seq_interval?: number\n}\n\nexport interface ChangesResponse {\n  last_seq: any\n  pending: number\n  results: Array<{\n    changes: Array<{ rev: string }>\n    id: string\n    seq: any\n    doc: any\n    deleted?: boolean\n  }>\n}\nexport async function changes(\n  context: CouchDbContext,\n  options: ChangesOptions\n): Promise<ChangesResponse> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n  const hasArgs = Object.keys(options).length > 0\n  let url = `${context}/${context}/_changes`\n\n  if (hasArgs) {\n    if (options.lastEventId) {\n      delete options.lastEventId\n      options['last-event-id'] = options.lastEventId\n    }\n\n    // if options.since is not 'now', convert to number\n    if (options.since && options.since !== 'now') {\n      options.since = parseInt(options.since as string)\n    }\n\n    url += `?${queryString.stringify(options)}`\n  }\n\n  const response = await fetch(url)\n    .then(parseFetchResponse)\n    .catch(err => {\n      err.stack = new Error(err.message).stack + (err.stack ?? '')\n\n      throw err\n    })\n\n  return response\n}\n","import { gql } from 'apollo-server-core'\n\nimport { createResolver } from '../../util/createResolver'\nimport { changes } from '../../couchdb/changes'\n\nexport const typeDefs = gql`\n  type Change {\n    rev: String\n  }\n  type ChangesResult {\n    changes: [Change]\n    id: String\n    seq: JSON\n    doc: JSON\n    deleted: Boolean\n  }\n\n  type ChangesResponse {\n    last_seq: JSON\n    pending: Int\n    results: [ChangesResult]\n  }\n\n  extend type Query {\n    changes(\n      doc_ids: [String!]\n      conflicts: Boolean\n      descending: Boolean\n      feed: String\n      filter: String\n      heartbeat: Int\n      include_docs: Boolean\n      attachments: Boolean\n      att_encoding_info: Boolean\n      lastEventId: Int\n      limit: Int\n      since: String\n      timeout: Int\n      view: String\n      seq_interval: Int\n    ): ChangesResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    changes: createResolver((parent, args, context, info) => {\n      return changes(context, args)\n    }),\n  },\n}\n","import parseFetchResponse from '../util/parseFetchResponse'\nimport { CouchDbContext } from '../createContext'\n\nexport interface FindOptions {\n  selector?: any\n  limit?: number\n  skip?: number\n  sort?: number\n  fields?: string[]\n  use_index?: string[]\n  r?: number\n  bookmark?: string\n  update?: boolean\n  stable?: boolean\n  stale?: string\n  execution_stats?: boolean\n}\n\nexport interface FindResponse<T = any> {\n  execution_stats: any\n  bookmark: any\n  warning: string\n  docs: T[]\n}\n\nexport async function find<T = any>(\n  context: CouchDbContext,\n  options: FindOptions\n): Promise<FindResponse<T>> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n  let url = `${dbUrl}/${dbName}/_find`\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(options),\n  })\n    .then(parseFetchResponse)\n    .catch(err => {\n      err.stack = new Error(err.message).stack + (err.stack ?? '')\n      err.body = JSON.stringify(options)\n      throw err\n    })\n\n  return response\n}\n","import queryString from 'qs'\nimport { CouchDbDocument } from '../types'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface GetOptions {\n  rev?: string\n  revs?: boolean\n  revs_info?: boolean\n  open_revs?: boolean\n  conflicts?: boolean\n  attachments?: boolean\n  latest?: boolean\n}\n\nexport async function get<T extends CouchDbDocument>(\n  context: CouchDbContext,\n  id: string,\n  options: GetOptions = {}\n): Promise<T> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n  const hasArgs = Object.keys(options).length > 0\n\n  if (!id) {\n    throw new Error('id is undefined')\n  }\n\n  let url = `${dbUrl}/${dbName}/${encodeURIComponent(id)}`\n\n  if (hasArgs) {\n    url += `?${queryString.stringify(options)}`\n  }\n\n  const response = await fetch(url)\n    .then(parseFetchResponse)\n    .catch(err => {\n      err._id = id\n      err.stack = new Error(err.message).stack + (err.stack ?? '')\n\n      throw err\n    })\n\n  return response\n}\n","import { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface InfoResponse {\n  db_name: string\n  update_seq: string\n  sizes: {\n    file: number\n    external: number\n    active: number\n  }\n  purge_seq: number\n  other: {\n    data_size: number\n  }\n  doc_del_count: number\n  doc_count: number\n  disk_size: number\n  disk_format_version: number\n  data_size: number\n  compact_running: Boolean\n  cluster: {\n    q: number\n    n: number\n    w: number\n    r: number\n  }\n  instance_start_time: number\n}\n\nexport async function info(context: CouchDbContext): Promise<InfoResponse> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n  let url = `${dbUrl}/${dbName}`\n\n  const response = await fetch(url)\n    .then(parseFetchResponse)\n    .catch(err => {\n      err.stack = new Error(err.message).stack + (err.stack ?? '')\n\n      throw err\n    })\n\n  return response\n}\n","import queryString from 'qs'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface QueryOptions {\n  ddoc: string\n  view: string\n  conflicts?: boolean\n  descending?: boolean\n  endkey?: any | any[]\n  group?: boolean\n  group_level?: number\n  include_docs?: boolean\n  attachments?: boolean\n  att_encoding_info?: boolean\n  inclusive_end?: boolean\n  key?: any | any[]\n  keys?: any | any[]\n  limit?: number\n  reduce?: boolean\n  skip?: number\n  sorted?: boolean\n  stable?: boolean\n  stale?: string\n  startkey?: any | any[]\n  update?: string\n  update_seq?: boolean\n}\n\nexport interface QueryResponse<T> {\n  offset: number\n  update_seq: any | any[]\n  total_rows: number\n  rows: Array<{\n    id: string\n    key?: any | any[]\n    value?: any\n    doc?: T\n  }>\n}\nexport async function query<T = any>(\n  context: CouchDbContext,\n  { view, ddoc, key, keys, ...options }: QueryOptions\n): Promise<QueryResponse<T>> {\n  const { fetch, dbUrl, dbName, onDocumentsSaved } = context.couchDb\n  const postOptions = { key, keys }\n\n  let url = `${dbUrl}/${dbName}/_design/${ddoc}/_view/${view}`\n\n  if (options) {\n    url += `?${queryString.stringify(options)}`\n  }\n\n  const hasArgs = Object.keys(postOptions).length > 0\n  const fetchOptions: any = {}\n  if (hasArgs) {\n    fetchOptions.method = 'POST'\n    fetchOptions.body = JSON.stringify(postOptions)\n    fetchOptions.headers = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    }\n  }\n\n  const response = await fetch(url, fetchOptions)\n    .then(parseFetchResponse)\n    .catch(err => {\n      err.stack = new Error(err.message).stack + (err.stack ?? '')\n      err.body = fetchOptions.body\n      throw err\n    })\n\n  return response\n}\n","import { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport interface SearchOptions {\n  index: string\n  ddoc: string\n  query: string\n  bookmark?: string\n  counts?: string[]\n  drilldown?: any\n  group_field?: string\n  group_limit?: number\n  group_sort?: any\n  highlight_fields?: string[]\n  highlight_pre_tag?: string\n  highlight_post_tag?: string\n  highlight_number?: number\n  highlight_size?: number\n  include_docs?: boolean\n  include_fields?: string[]\n  limit?: number\n  ranges?: any\n  sort?: string | string[]\n  stale?: string\n}\n\nexport interface SearchResponse<T> {\n  total_rows: number\n  bookmark: string\n  rows: Array<{\n    id: string\n    order: number[]\n    fields: Record<string, any>\n    doc?: T\n  }>\n  counts?: any\n}\n\nexport async function search<T = any>(\n  context: CouchDbContext,\n  { index, ddoc, ...options }: SearchOptions\n): Promise<SearchResponse<T>> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n\n  let url = `${dbUrl}/${dbName}/_design/${ddoc}/_search/${index}`\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(options),\n  })\n    .then(parseFetchResponse)\n    .catch(err => {\n      err.stack = new Error(err.message).stack + (err.stack ?? '')\n      err.body = JSON.stringify(options)\n\n      throw err\n    })\n\n  return response\n}\n","import { CouchDbDocument } from '../types'\nimport { CouchDbContext } from '../createContext'\nimport parseFetchResponse from '../util/parseFetchResponse'\n\nexport async function createDb<T extends CouchDbDocument>(\n  context: CouchDbContext\n): Promise<T> {\n  const { fetch, dbUrl, dbName } = context.couchDb\n  let url = `${dbUrl}/${dbName}`\n\n  const response = await fetch(url, { method: 'PUT' })\n    .then(parseFetchResponse)\n    .catch(err => {\n      err.stack = new Error(err.message).stack + (err.stack ?? '')\n\n      throw err\n    })\n\n  return response\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { find } from '../../couchdb'\n\nexport const typeDefs = gql`\n  type FindResponse {\n    execution_stats: JSON\n    bookmark: String\n    warning: String\n    docs: [JSON!]\n  }\n\n  extend type Query {\n    find(\n      selector: JSON!\n      limit: Int\n      skip: Int\n      sort: Int\n      fields: [String!]\n      use_index: [String!]\n      r: Int\n      bookmark: String\n      update: Boolean\n      stable: Boolean\n      stale: String\n      execution_stats: Boolean\n    ): FindResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    find: createResolver((parent, args, context, info) => {\n      return find(context, args)\n    }),\n  },\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { get } from '../../couchdb'\n\n/**\n * Generic GET on a document\n */\nexport const typeDefs = gql`\n  type GetResponse {\n    _id: String!\n    _rev: String\n    document: JSON\n  }\n\n  extend type Query {\n    get(\n      id: String!\n      rev: String\n      revs: Boolean\n      revs_info: Boolean\n      open_revs: Boolean\n      conflicts: Boolean\n      attachments: Boolean\n      latest: Boolean\n    ): GetResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    get: createResolver(async (parent, { id, ...args }, context, info) => {\n      const document = await get(context, id, args)\n      return {\n        _id: document._id,\n        _rev: document._rev,\n        document,\n      }\n    }),\n  },\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { info } from '../../couchdb/info'\n\nexport const typeDefs = gql`\n  type Sizes {\n    file: Int\n    external: Int\n    active: Int\n  }\n\n  type Other {\n    data_size: Int\n  }\n\n  type Cluster {\n    q: Int\n    n: Int\n    w: Int\n    r: Int\n  }\n\n  type InfoResponse {\n    db_name: String\n    update_seq: String\n    sizes: Sizes\n    purge_seq: Int\n    other: Other\n    doc_del_count: Int\n    doc_count: Int\n    disk_size: Int\n    disk_format_version: Int\n    data_size: Int\n    compact_running: Boolean\n    cluster: Cluster\n    instance_start_time: Int\n  }\n\n  extend type Query {\n    info: InfoResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    info: createResolver((parent, args, context) => {\n      return info(context)\n    }),\n  },\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { query, QueryOptions } from '../../couchdb/query'\n\nexport const typeDefs = gql`\n  type QueryResponse {\n    offset: Int\n    update_seq: JSON\n    total_rows: Int\n    rows: [QueryRow!]\n  }\n\n  type QueryRow {\n    id: String\n    key: JSON\n    value: JSON\n  }\n\n  extend type Query {\n    query(\n      ddoc: String!\n      view: String!\n      conflicts: Boolean\n      descending: Boolean\n      endkey: JSON\n      group: Boolean\n      group_level: Int\n      include_docs: Boolean\n      attachments: Boolean\n      att_encoding_info: Boolean\n      inclusive_end: Boolean\n      key: JSON\n      keys: [JSON!]\n      limit: Int\n      reduce: Boolean\n      skip: Int\n      sorted: Boolean\n      stable: Boolean\n      stale: String\n      startkey: JSON\n      update: String\n      update_seq: Boolean\n    ): QueryResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    query: createResolver<QueryOptions>(async (parent, args, context, info) => {\n      return query(context, args)\n    }),\n  },\n}\n","import { gql } from 'apollo-server-core'\nimport { createResolver } from '../../util/createResolver'\nimport { search, SearchOptions } from '../../couchdb/search'\n\nexport const typeDefs = gql`\n  type SearchResponse {\n    total_rows: Int!\n    bookmark: String!\n    rows: [SearchRow]!\n    counts: JSON\n  }\n\n  type SearchRow {\n    id: String!\n    order: [Int!]!\n    fields: JSON!\n    doc: JSON\n  }\n\n  extend type Query {\n    search(\n      index: String!\n      ddoc: String!\n      bookmark: String\n      counts: [String!]\n      drilldown: JSON\n      group_field: String\n      group_limit: Int\n      group_sort: JSON\n      highlight_fields: [String!]\n      highlight_pre_tag: String\n      highlight_post_tag: String\n      highlight_number: Int\n      highlight_size: Int\n      include_docs: Boolean\n      include_fields: [String!]\n      limit: Int\n      query: String!\n      ranges: JSON\n      sort: [String!]\n      stale: String\n    ): SearchResponse\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    search: createResolver<SearchOptions>(\n      async (parent, args, context, info) => {\n        return search(context, args)\n      }\n    ),\n  },\n}\n","import 'isomorphic-fetch'\nimport { CouchDbDocument } from './types'\n\nexport interface CouchDbContext {\n  couchDb: {\n    dbUrl: string\n    dbName: string\n\n    /**\n     * The fetch function used by the requests made to the couchdb server\n     *\n     * default is node-fetch\n     */\n    fetch: typeof fetch\n\n    onResolveConflict?: <T extends CouchDbDocument>(args: {\n      document: T\n      conflicts: T[]\n      context: CouchDbContext\n    }) => T | Promise<T>\n    onConflictsResolved?: <T extends CouchDbDocument>(args: {\n      documents: T[]\n      context: CouchDbContext\n    }) => any\n    onDocumentsSaved?: <T extends CouchDbDocument>(args: {\n      documents: T[]\n      context: CouchDbContext\n    }) => any\n  }\n}\n\nexport function createContext(args: {\n  dbUrl: CouchDbContext['couchDb']['dbUrl']\n  dbName: CouchDbContext['couchDb']['dbName']\n\n  /**\n   * The fetch function used by the requests made to the couchdb server\n   *\n   * default is isomorphic-fetch\n   */\n  fetch?: CouchDbContext['couchDb']['fetch']\n\n  onResolveConflict?: CouchDbContext['couchDb']['onResolveConflict']\n  onConflictsResolved?: CouchDbContext['couchDb']['onConflictsResolved']\n  onDocumentsSaved?: CouchDbContext['couchDb']['onDocumentsSaved']\n}): CouchDbContext {\n  return {\n    couchDb: {\n      fetch,\n      ...args,\n    },\n  }\n}\n","import {\n  GraphQLModule,\n  GraphQLModuleOptions,\n  Resolvers,\n  ModuleContext,\n} from '@graphql-modules/core'\nimport { CouchDbContext } from './createContext'\nimport * as mutations from './graphql/mutations'\nimport * as queries from './graphql/queries'\nimport { base } from './graphql/base'\n\nexport interface CouchDBModuleOptions<\n  Config = any,\n  Session extends object = any,\n  Context = CouchDbContext,\n  SelfResolvers extends Resolvers<any, ModuleContext<Context>> = Resolvers<\n    any,\n    ModuleContext<Context>\n  >\n> extends GraphQLModuleOptions<Config, Session, Context, SelfResolvers> {\n  cloudant?: boolean\n}\n\nexport function createCouchDbModule<\n  Config = any,\n  Session extends object = any,\n  Context = CouchDbContext,\n  SelfResolvers extends Resolvers<any, ModuleContext<Context>> = Resolvers<\n    any,\n    ModuleContext<Context>\n  >\n>(\n  {\n    cloudant,\n    ...options\n  }: CouchDBModuleOptions<Config, Session, Context, SelfResolvers>,\n  moduleConfig?: Config\n) {\n  // separate cloudant queries from couchdb\n  const { search, ...couchdbQueries } = queries\n\n  // combine typeDefs\n  const typeDefs = [\n    base.typeDefs,\n    ...Object.keys(cloudant ? queries : couchdbQueries).map(\n      key => queries[key].typeDefs\n    ),\n    ...Object.keys(mutations).map(key => mutations[key].typeDefs),\n  ]\n\n  if (options.typeDefs) {\n    if (Array.isArray(options.typeDefs)) {\n      typeDefs.push(...options.typeDefs)\n    } else {\n      typeDefs.push(options.typeDefs)\n    }\n  }\n\n  // combine resolvers\n  const resolvers = [\n    ...Object.keys(cloudant ? queries : couchdbQueries).map(\n      key => queries[key].resolvers\n    ),\n    ...Object.keys(mutations).map(key => mutations[key].resolvers),\n  ]\n\n  if (options.resolvers) {\n    if (Array.isArray(options.resolvers)) {\n      resolvers.push(...options.resolvers)\n    } else {\n      resolvers.push(options.resolvers)\n    }\n  }\n\n  return new GraphQLModule(\n    {\n      ...options,\n      typeDefs,\n      resolvers,\n    },\n    moduleConfig\n  )\n}\n"],"names":["base","typeDefs","gql","runtime","exports","undefined","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","GenStateSuspendedStart","method","arg","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","done","GenStateSuspendedYield","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","createResolver","resolver","parseFetchResponse","response","status","json","statusText","getConflictsByDocument","documents","fetch","couchDb","dbUrl","dbName","headers","body","JSON","stringify","map","doc","_id","res","rows","row","filter","documentsWithConflictRevs","docs","reduce","conflicts","_conflicts","rev","id","results","ok","conflictingDocuments","conflictedDoc","find","d","document","original","revToSave","_rev","resolveConflicts","onConflictsResolved","onResolveConflict","all","resolvedDocument","resolved","Boolean","docsToSave","resolvedDocs","deleted","docId","conflict","_deleted","resolvedDocuments","index","put","options","onDocumentsSaved","upsert","new_edits","url","encodeURIComponent","_context2","Array","isArray","stack","message","reason","bulkDocs","previousRevs","ids","data","docToSave","saveResult","resolvedDoc","resolvedResult","_templateObject","Mutation","parent","input","allDocs","endkey","startkey","args","queryString","Query","bulkGet","revs","changes","hasArgs","lastEventId","since","parseInt","get","query","view","ddoc","postOptions","fetchOptions","Accept","search","moduleConfig","cloudant","couchdbQueries","queries","mutations","resolvers","GraphQLModule"],"mappings":"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"}